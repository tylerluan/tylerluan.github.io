<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>动作识别/驱动项目全流程回顾</title>
    <link href="/posts/16852/"/>
    <url>/posts/16852/</url>
    
    <content type="html"><![CDATA[<p>包括最简单的2D动作识别，复杂一些的2D 3D数字人驱动，单目&#x2F;多目数字人工程方案。</p><span id="more"></span><h3 id="全景思维导图"><a href="#全景思维导图" class="headerlink" title="全景思维导图"></a>全景思维导图</h3><p>（隐去生产部署细节</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/3D%20Mocap.png"></p><hr><h3 id="动作识别"><a href="#动作识别" class="headerlink" title="动作识别"></a>动作识别</h3><p>动作识别用于健身大屏、虚拟拜佛等生产场景，依托于大屏（一张RTX3080，双RGB摄），深度学习+UE4的组合来实现一些生产的互娱需求，由于UE4占用比较多的计算资源，动作识别的核心痛点在于利用单目RGB做一些准确率达标的实时应用。</p><p>作为应用基础，也在其上开发了一些滑雪&#x2F;切水果等互娱应用，复用一套算法pipeline、API接口即可。</p><p>实现的思路很简单，单帧提取动作，多帧做滑动窗口，提取feature通过分类器进行动作分类，分类器实现了包括NN，Linear SVM，RandomForest，XGBoost等机器学习方法，，MLP等深度学习网络，也包括基础的模型集成，投票选举等功能。</p><p>一些tricks包括noise的添加（data aug）,nan的处理逻辑（前帧）,feature包括哪些信息（pose 位移 速度 增加了joint angle）。</p><p>项目是我中间接手的，接手后做的主要工作包括mediapipe替代老旧的openpose提速（保证精度损失）；data处理代码重构，进行提速，保留重复处理数据，减少存盘环节；增加关节角度信息丰富feature的组成等等，最终效果是数据采集完成后，单卡20min训练一个动作识别模型，提速数倍。</p><p>动作识别效果：</p><p><video src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/bow_results_cut_out.mp4" controls></video></p><hr><h3 id="数字人驱动基础概念"><a href="#数字人驱动基础概念" class="headerlink" title="数字人驱动基础概念"></a>数字人驱动基础概念</h3><p>一些基础的数学概念，思维导图：</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/Math.png?imageView2/2/w/700"></p><h4 id="相机模型"><a href="#相机模型" class="headerlink" title="相机模型"></a>相机模型</h4><p>相机内参 外参  畸变系数</p><p>张正友标定法 ChArUco 对极约束  PnP (Perspective n point  Homography matrix(单应矩阵</p><p>三角化 Triangulation  DLT(Direct Linear Transform) SVD求解  RANSAC</p><h4 id="IK"><a href="#IK" class="headerlink" title="IK"></a>IK</h4><p>IK Solver  IK Net  IK algorithm</p><h4 id="Param-Model"><a href="#Param-Model" class="headerlink" title="Param Model"></a>Param Model</h4><p>SCAPE SMPL SMPL-X STAR</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>Filter（smooth滤波器） Rotation（4种形式和变换 ） 优化方法（梯度下降 牛顿 L-BFGS SGD EM）</p><hr><h3 id="2D数字人驱动"><a href="#2D数字人驱动" class="headerlink" title="2D数字人驱动"></a>2D数字人驱动</h3><h4 id="竞品公司"><a href="#竞品公司" class="headerlink" title="竞品公司"></a>竞品公司</h4><p>deepmotion，基于几年自研的运动估计模型（大量cpu集群做运动优化），用户上传单目video返回bvh，效果业内领先，偶发失误；</p><p>TDPT&#x2F;VseeFace&#x2F;Kalidokit 一类伪开源项目，主要通过2D关键点lift到3D关键点，或者直接IKNet计算出关节旋转角度，缺点是关节翻转问题严重；</p><h4 id="Pose提取"><a href="#Pose提取" class="headerlink" title="Pose提取"></a>Pose提取</h4><hr><h3 id="3D数字人驱动"><a href="#3D数字人驱动" class="headerlink" title="3D数字人驱动"></a>3D数字人驱动</h3><h4 id="竞品公司-1"><a href="#竞品公司-1" class="headerlink" title="竞品公司"></a>竞品公司</h4><p>国内在单目3D数字人驱动上做的比较好的是北京的聚力维度，主打人脸表情丰富和单目动作驱动。</p><p>英国的move.ai在多目数字人驱动上效果较好，是多目的竞品对象。</p><p>其他一些竞品公司：</p><h4 id="手部估计"><a href="#手部估计" class="headerlink" title="手部估计"></a>手部估计</h4><p>手部的估计模型有两种，第一种是MANO，本质上是SMPL+H，61个参数（15*3 + 10 shape + 3 cam + 3 rot），MANO又分为两种，一种是获取MANO params，也就是hand 3d pose数据，另一种是直接回归mesh。</p><p><strong>MANO params 相关：</strong></p><p>Minimal-Hand，以速度提升为主，为了达到实时，采用2D lift的方案，使用DetNet+IKNet，先检测2d+3d关键点，然后通过IK获得MANO参数，实际使用中速度是满足要求的，但是受限于训练数据和2D lift的方案，准确度不高，达不到生产级别；</p><p>MobileHand，也是以移动端部署为核心，所以选择了MobileNetV3这样的轻量级backbone，做end2end的推理，image2mano，使用23个自由度代替MANO+PCA的方案，问题仍然是数据集，FreiHand几乎都是手部近景数据，这种paperwork在生产上效果很差；</p><p>S2HAND采用自监督方式，但只要数据摆在那，无论网络结构还是训练方式玩出什么花，都无法解决生产问题。</p><p><strong>MANO mesh 相关：</strong></p><p>MobRecon，通过2D lifting 3D，然后通过spatial conv回归hand mesh；</p><p>HandOccNet，主要针对手部遮挡的问题，使用FPN结构，通过改进transformer网络结构克服遮挡；</p><p>手部估计另一种是<strong>SMPLX params</strong>，毕竟SMPLX里面也包含手部参数。</p><p>FrankHand，实际上是从FrankMocap里面扒出来的手部估计模型，类HMR encoder-decoder结构，end2end从image中提取feature，然后获取SMPLX参数，FrankHand的优势在于训练数据足够丰富，几乎采用了市面上开源的所有手部数据，并将其统一格式，效果实测也是最好的。</p><h4 id="人脸估计"><a href="#人脸估计" class="headerlink" title="人脸估计"></a>人脸估计</h4><p>没有较好的开源方案，主要有两条路线，一条是通过landmark或者face mesh驱动，效果不会很好，另一条是通过人脸3D重建获得3D系数，通过算法或网络转换到blendshape驱动，是工业界常用的方法。</p><h4 id="身体估计"><a href="#身体估计" class="headerlink" title="身体估计"></a>身体估计</h4><p>身体估计的参数模型主要有SCAPE SMPL SMPLX STAR等，围绕这些参数模型，又可以将身体估计分为pose估计和mesh估计，从估计方法上，可以分为回归方法、混合方法、基于时序的方法等。围绕身体参数，引入外部硬件的又有基于IMU的身体估计，使用运动学算法优化的physical方法等。</p><p>几乎阅读并复现了这个领域所有效果看起来可以的论文，大部分是通过魔改结构或者数据增强在human3.6m数据集上刷榜。</p><p><strong>回归方法</strong></p><p>HMR是人体姿态估计的开山之作，通过2D joints回归SMPL param；</p><p>PyMAF使用spatial feature pyramid学习pose的dense特征，使用HRNet提取grid feature，通过反馈网络精细化mesh；</p><p>Mesh Transformer使用transformer结构来学习pose特征，不经过SMPL参数，直接回归3D关键点和mesh；</p><p>ROMP解决了多人实时估计的问题，使用HRNet+CoordConv，输入尺寸达到512；</p><p><strong>混合方法</strong></p><p>SPIN在HMR基础上加入了SMPLify先验（由CMU pose数据学习，通过不断迭代回归来逼近SMPL参数）；</p><p>ETF使用比SPMLify更好的回归方式，构建大规模训练集</p><p>PARE着力解决人体姿态估计中的遮挡问题，做occlusion sensitivity analysis;</p><p>DynaBOA通过test-time-augmentation在Human3.6M上刷榜；</p><p>HybrIK解决了3D-mesh的问题，为了提高IKNet效果，将旋转分为twist+swing两个部分处理（额外标注）；</p><p>LVD使用新颖的视角，通过vertex descent从image回归mesh；</p><p><strong>基于时序的方法</strong></p><p>VIBE是开山之作，通过AMASS学习先验，通过GRU实现时序encoder（工程上优化到实时）；</p><p>TCMR首先用r50 backbone提取所有frame的静态特征，然后基于GRU回归pose参数，通过前后帧监督调整当前帧，时间序列上更加平滑；</p><p>DeciWatch解决了时间序列pose估计的效率问题，使用frame sample，类似于插帧算法，sample系数就是加速倍数；</p><p><strong>基于运动学优化&#x2F;传感器的方法</strong></p><p>PhysCap使用openpose提取人体2d joints，基于RBDL做运动学优化，特别是GRF（ground reaction force）的计算，优化接地效果；</p><p>PIP结合IMU与RBDL运动学优化，效果较好但毕竟引入了惯性传感器；</p><p>UnderPressure为了解决脚部接地的问题，建立了GRF数据集，并通过网络预测GRF，优化脚部接地效果；</p><p>TransPose直接基于noitom的IMU做运动估计；</p><p>rgbd-kinect使用kinect相机获取深度信息（API出pose），mediapipe估计人脸，minimal-hand估计手部，效果差；</p><p>Stanford团队的<a href="https://github.com/davrempe/contact-human-dynamics">contact-human-dynamics</a>部分借鉴CMU的MTC，引入TOWR做运动学优化，优化人物的接地效果；</p><p>后续又提出<a href="https://github.com/davrempe/humor">HuMor</a>使用vposer做先验，在测试时进行增强，不适用于实时驱动的场景；</p><h4 id="Full-Body估计"><a href="#Full-Body估计" class="headerlink" title="Full Body估计"></a>Full Body估计</h4><hr><h3 id="单目工程方案"><a href="#单目工程方案" class="headerlink" title="单目工程方案"></a>单目工程方案</h3><p>3D人物的建模与渲染，在Blender&#x2F;UE4&#x2F;Unity三个平台上都有进行，blender适合算法人员测试，Unity的开源支持更多，UE4需要专门的UE工程师协调，核心在于接收算法端发送的pose数据（终端做一些处理），最终驱动人物的骨骼模型（SMPLX）。</p><p>整个方案将身体与手分开做，原因手部估计是单目估计最困难的部分：</p><p>身体估计采用image2pose的方案，基于coco-annotator标注工具标注了大量本地数据（2D joints），然后通过smplify+ETF方式构建pseudo annotation，基于SPIN结构训练模型；</p><p>手部训练一个区分左右手模型，训练一个手部检测器（基于100DOH+本地数据，测试发现超过了全网开源的所有手部检测器），然后使用image2pose的方案估计手部pose，对于缺失值&#x2F;异常值需要加判断逻辑；</p><p>滤波器测试了kalman one-euro Savitzky-Golay等，效果类似主要看超参数的调整，最终使用多重滤波器，分别在joints&#x2F;pose&#x2F;skeleton等不同级别上通过不同参数滤波；</p><p>人脸估计部分，一个简单方案是Deep3DFaceRecon回归表情系数，通过Expression2Blendshape2Arkit的pipeline，等于捡apple的剩饭吃，在限定条件下（光线、距离）还是可以取得不错的效果。</p><hr><h3 id="多目工程方案"><a href="#多目工程方案" class="headerlink" title="多目工程方案"></a>多目工程方案</h3><p>对标竞品Move.ai，同样采用gopro来搭建场地。</p><h4 id="gopro同步算法"><a href="#gopro同步算法" class="headerlink" title="gopro同步算法"></a>gopro同步算法</h4><p>相机同步是影响多目效果的关键因素之一，gopro基于网络提供RTMP服务，但延迟较高，且无法同步。</p><p>自建一套相机同步算法，可以达到多目相机的RTMP收流秒级同步，实现无线多目同步输出：</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/gorpo_rtmp_sync.JPG?imageView2/2/w/700"></p><p>实际使用还是有线方案，RTMP依赖网络，延迟较高无法解决</p><h4 id="2D人体关键点检测"><a href="#2D人体关键点检测" class="headerlink" title="2D人体关键点检测"></a>2D人体关键点检测</h4><p>多种人体2D关键点检测算法，开源项目普遍还是使用mediapipe，原因是速度快，多平台部署方便，支持移动端。实际在生产上效果不好，CPU占用率高，错误率非常高，所以编译GPU版本&#x2F;导出onnx模型（生态本身较封闭），仅适合在低需求场景下使用。</p><p>mediapipe与body估计模型效果对比：</p><p><video src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/2d_body_detect_mediapipe-vitpose_compare.mp4" width="1920" height="540" controls></video></p><h4 id="多种triangulation方式"><a href="#多种triangulation方式" class="headerlink" title="多种triangulation方式"></a>多种triangulation方式</h4><p>有一部分论文使用CNN来进行triangulation，比如清华的lightcap，微软的VoxelPose，基于human3.6 mosh数据，一些体密度估计方法，加入一些heatmap HRNet等网络改进，最终通过end2end CNN来解决问题，实测效果都存在作用域受限的问题。</p><p>基于几何（Algebraic）的triangulation更加靠谱，尤其是在相机同步和关键点搞定之后，基于几何三角化的效果满足生产需求。</p><p>有一些开源的例如RANSAC Triangulation等，效果一般，主要速度慢，在整个实时3D估计人体的pipeline里面，留给三角化的CPU资源不算少，但在多相机条件下实时三角化还是比较苛刻。</p><p>两种三角化的通用做法，一种是“from best camera”,一种是“check repro  error”，这都是我自己起的名字，核心思想都是通过reprojection（重投影）来找到误差最大的相机，从而通过不断迭代缩写reprojection误差，速度上也与代码实现有关。</p><h4 id="基于IKNet做3D-joints-to-pose"><a href="#基于IKNet做3D-joints-to-pose" class="headerlink" title="基于IKNet做3D joints to pose"></a>基于IKNet做3D joints to pose</h4><p>思路来自于HyberIK，魔改HybeerIK的IKNet，先获得bone axis的旋转，再做batch  IK, 实现3d joints to rotation。</p><hr><h3 id="Text2Motion"><a href="#Text2Motion" class="headerlink" title="Text2Motion"></a>Text2Motion</h3><p>一个奇怪的paper分支，大概是基于HumanML3D KIT等几个text2motion数据集，做一些基于BERT&#x2F;CLIP理解文本，VAE&#x2F;diffusion&#x2F;attention推理的方案，不出意外效果都很差。</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mocap</tag>
      
      <tag>ActionRecognition</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TalkingHead项目全回顾</title>
    <link href="/posts/16000/"/>
    <url>/posts/16000/</url>
    
    <content type="html"><![CDATA[<p>TalkingHead主要分为两类：</p><ol><li><p>Anime face的driving，以复现开源实现为主，做娱乐产业；</p></li><li><p>Human face的driving，FOM开先河，分为img驱动、audio驱动、半身驱动、nerf类等，做2D数字人、数字名片、照片动起来、视频会议化身等;</p></li></ol><span id="more"></span><h3 id="数字人生产效果展示"><a href="#数字人生产效果展示" class="headerlink" title="数字人生产效果展示"></a>数字人生产效果展示</h3><p>（视频来自公司官网：</p><p><video src="https://cdn.guiji.ai/ows/media/ppt.84f5affa.mp4" controls></video></p><hr><h3 id="Anime-Face-Driving"><a href="#Anime-Face-Driving" class="headerlink" title="Anime Face Driving"></a>Anime Face Driving</h3><h4 id="THA-Talking-Head-Anime-系列"><a href="#THA-Talking-Head-Anime-系列" class="headerlink" title="THA(Talking Head Anime)系列"></a>THA(Talking Head Anime)系列</h4><p>作者都是泰国小哥，<a href="http://github.com/dragonmeteor/talking-head-anime-demo">THA</a>是使用自己标注的6 pose数据train的GAN，结构类似cyclegan，额外增加一个face rotater用于头部旋转；</p><p><a href="https://github.com/pkhungurn/talking-head-anime-2-demo">THA2</a> 引入了<a href="https://www.ifacialmocap.com/">ifacialmocap</a>驱动，网络输入由6 pose变为42 blendshape，增加了更多表情。</p><p>两代开源代码加waifu的anime头像生成，就可以完成一个基本的动漫头像驱动，接近一些主播使用的动漫头像替身效果。</p><h4 id="EasyVtuber系列"><a href="#EasyVtuber系列" class="headerlink" title="EasyVtuber系列"></a>EasyVtuber系列</h4><p><a href="https://github.com/GunwooHan/EasyVtuber">EasyVtuber</a> 使用mediapipe提取face mesh，其余与THA类似，增加了obs功能。</p><p><a href="https://github.com/yuyuyzl/EasyVtuber">EasyVtuber2</a> 借鉴THA2，直接使用ifacialmocap提取blendshape，通过UDP发送，直接驱动动漫头像。</p><p>EasyVtuber在THA基础上封装了易用的obs等功能，更接近一个初级产品形态。</p><hr><h3 id="Human-Face-Driving"><a href="#Human-Face-Driving" class="headerlink" title="Human Face Driving"></a>Human Face Driving</h3><h4 id="FOM系列"><a href="#FOM系列" class="headerlink" title="FOM系列"></a>FOM系列</h4><p><strong>介绍</strong></p><p><a href="https://github.com/AliaksandrSiarohin/first-order-model">FOM</a>前身是monkey-net，核心是 unsupervised keypoint detector，然后通过 dense motion network提取信息。</p><p>后续出的<a href="https://github.com/yoyo-nb/Thin-Plate-Spline-Motion-Model">TPSMM</a>，提出TPS的非线性变换，通过原图和keypoint detector经过dense motion network提取optical flow，使用optical flow来做image inpaiting.</p><p><a href="https://github.com/harlanhong/CVPR2022-DaGAN">DaGAN</a> 使用self-supervised depth模型指导keypoint detector，然后将depth和原RGB输入cross attention模型，最后通过decoder解码。</p><p>技术路线基本上是延续encoder-decoder的思路，只是对于输入的source+destination图像的信息提取不同，可提取的信息包括无监督关键点、深度信息、光流信息等，最后通过decoder解码，通过L1 perception等Loss进行模型训练。</p><p><strong>改进</strong></p><p>针对FOM&#x2F;TPSMM，转换为onnx模型，做了实时pipeline，实践中发现为了控制人物头部抖动，需要预选bbox或者平滑bbox。</p><p>针对DaGAN模型，优化了best_frame的选取（pfpld 解决张嘴问题），onnx模型优化速度，<a href="https://github.com/Rudrabha/Wav2Lip">wav2lip</a>优化嘴部等。</p><p><strong>竞品</strong></p><p>数字名片项目，实际生产效果对标<a href="https://www.d-id.com/">D-ID</a>。</p><h4 id="AudioDriven系列"><a href="#AudioDriven系列" class="headerlink" title="AudioDriven系列"></a>AudioDriven系列</h4><p><a href="https://github.com/Rudrabha/Wav2Lip">wav2lip</a>是开山之作，提出了使用lip-sync expert作为loss，有强化学习的思想；</p><p><a href="https://github.com/MRzzm/DINet">DINet</a>引入了AdaAT，将source和reference以及audio提取特征后做deformed feature，然后通过decoder生成图像；</p><p><a href="https://github.com/vinthony/video-retalking">VideoReTalking</a>加入了emotion template，先用表情生成一个稳定视频，然后替换嘴部；</p><p>本质上与FOM系列类似，但引入了audio信息，特别是为了提升开口说话的效果，要做对于嘴部的特殊处理，例如利用mask单独做嘴部生成，或增加mouth loss，基本也是以关键点的形式完成。</p><p>整体缺点一个是人物抖动、张嘴后的牙齿不明显（teethnet对牙齿增强），另一个关键问题是大范围动作无法还原回身体。</p><h4 id="ADNerf"><a href="#ADNerf" class="headerlink" title="ADNerf"></a>ADNerf</h4><p>ADNerf是Nerf系列的产物，如果对于3D物体可以建模，那么很自然的可以想到对人体头部建模，从而驱动说话，属于novel view synthesis 新颖视图合成的类别，近年也有一些论文产出。</p><p>原ADNerf对数据进行预处理，audio和image分别获得audio feature和landmark&#x2F;语义&#x2F;pose信息，通过泊松融合提取背景。然后进行two-stage的nerf训练，分别训练头部和肩部。</p><p>生产上在ADNerf开源之前就完成了复现，为了提高效果，主要从feature提取、loss设计、网络设计、调参等过程上进行优化。</p><p>例如使用<a href="https://github.com/choyingw/SynergyNet">SynergyNet</a>或者mediapipe提取head pose，利用wenet提取audio，引入hdr loss调整配比等。</p><p>但最后的结果一般，后续有机会跟ADNerf的作者进行了沟通，他承认本身团队达到的效果就一般，未能达到生产级别。</p><h4 id="数字人生产方案"><a href="#数字人生产方案" class="headerlink" title="数字人生产方案"></a>数字人生产方案</h4><p>最早基于<a href="https://github.com/zhangzjn/APB2Face">apb2face</a>，后面为了实现高清效果基于<a href="https://github.com/NVIDIA/pix2pixHD">pix2pixHD</a>；</p><p>需要长时间语料，对face image做区域遮挡，只对嘴型做pix2pix，输入audio feature + mask face&#x2F;reference face，参考图像是为了更稳定。</p><p>loss包括perception loss(vgg) L1 loss等等常见loss。</p><p>生产上做的优化包括如何降低语料长度，TTS对中文更好的支持等等。</p><p>一种比较trick的方案是使用短时长数据+FOM&#x2F;deepfake进行长时间语料生成。</p><p>就说这么多。</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>TalkingHead</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AIGC项目相关全回顾</title>
    <link href="/posts/47896/"/>
    <url>/posts/47896/</url>
    
    <content type="html"><![CDATA[<p>在StyleGan系列时代，AIGC还只是实验室的产物，即使DALL-E出现，仍然没有普及，但是自从stable diffusion横空出世，整个AIGC领域进入了飞速发展期，随后ChatGPT火遍全球，打通了text-image的最后一环。</p><p>基于开源实现的一个标准数字人目前的最优方案：ChatGPT出prompts+text，MidJourney出图，Elevenlabs进行text2speech，最后由D-ID进行唇形驱动。</p><p>而基于各个公司的私有解决方案，无非是替代了这其中的某个环节，辅以自研技术。</p><span id="more"></span><h3 id="Image-Generate"><a href="#Image-Generate" class="headerlink" title="Image Generate"></a>Image Generate</h3><p>Image Generate的核心是Nvida的StyleGan三部曲。</p><p><strong>StyleGAN1</strong>基于PGGAN（Progressive Growing GAN）做改进，PGGAN的generator从4x4渐进式的upsample到1024x1024，渐进式学习图像特征，StyleGAN1为了精细化控制图像生成的质量，创造性的提出了latent space，也就是隐变量W，主要创新点如下：</p><ol><li>使用FC构建Mapping Network，由图像获得1x512的latent，进行图像特征的解耦</li><li>样式控制AdaIN,将W经过一个affine transform变为scale+bias的加权因子，在conv+norm后施加给不同尺度的生成器中，来提供样式信息</li><li>4x4输入使用常值，减少特征纠缠（使得信息全部由W提供）</li><li>AdaIN之前向每个通道增加一个随机噪声，增加生成图像的多样性</li></ol><p>此外还使用bilinear sampling(双线性采样)代替nearest sampling等trick提升效果。</p><p>由于图像变为了latent space中的latent，也就是W，从而延伸出了一些trick，包括style mix和truncation,style mix可以将两个W的特征融合，truncation对特征截断，可以在图像生成时控制图像的差异程度。</p><p><strong>SPADE</strong>可以顺带提一下，因为nvidia的视觉团队很擅长利用normalize做文章，SPADA将semantic mask变换为scale+bias变成了spatial adaptive normalization，使用pix2pixHD的generator结构，实现了semantic image synthesis，产出主要是互娱项目，小孩通过笔画即可生成图像，参考<a href="http://www.minivision.cn/algorithm.html">神笔马良</a>项目。</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/SPADE_minivision.png?imageView2/2/w/700" alt="SPADE应用"></p><p><strong>Pix2Style2Pix</strong>也可以顺带提一下，很多基于StyleGAN的工作，大部分为了提升特征控制的稳定性，psp使用feature pyramids(特征金字塔)结构替代了StyleGAN的FC结构，希望获得更稳定的人脸编辑效果。</p><blockquote><p>update. 以色列特拉维夫的<a href="https://github.com/rotemtzaban/STIT">STIT</a>（stitch it in time）基于StyleGAN做了基于视频前后帧的更稳定的人脸编辑</p><p><a href="https://github.com/williamyang1991/StyleGANEX">StyleGANEX</a> 使用dilated conv构建generator，编码使用psp结构，实现了对未对齐面部更好的编辑效果</p></blockquote><p><strong>StyleGAN2</strong>认为AdaIN造成了生成图像中存在的水滴（伪影），于是使用权重解调（weight demodulation）修改了AdaIN，normalize过程中不再需要mean，只需要计算std，并将noise移出style模块。</p><p>此外学习resnet skip-connection结构，在generator和discrimator的中间层增加了连接，利用不同尺度信息，扩大网络规模；</p><p>使用lazy regularization,提高评估loss速度；</p><p>使用path length regularization，对生成器图像到latent求一个梯度（jacobian matrix）计算loss，使图像到latent的过程更加线性。</p><p><strong>StyleGAN2-ada</strong>(adaptive discriminator augmentation)解决了小数据集训练stylegan数据如何增强的问题，每4个batch测量discriminator的过拟合程度，如果过拟合了，减少augmentation的概率P，即adaptive P.</p><p><strong>StyleGAN3</strong>弱化了特征与像素的对应关系，引入fourier特征，从频率的角度减少混叠（aliasing）,引入低通滤波器，在低分辨率降低截止频率，更多的过滤掉无用的高频信息，提升了图像的平移不变性，使用1x1 conv代替3x3 conv，提升了图像的旋转不变性。</p><p>工程上的主要产出在StyleGanv2阶段，使用stylegan-2-ada完成了一些图像生成项目，包括AnimeFace的生成（复刻Waifu）、NFT图像生成、盲盒角色生成（生产交付），同时辅助了一些其他项目，例如人脸图像的生成（丰富人脸训练数据）、TalkingHead的人脸来源、人脸的lantent project + style mix，做两个明星脸混合，创造不存在的ID、人脸edit+实时DeepFake等。</p><p>复刻Waifu：</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/20210518182853.png?imageView2/2/w/700" alt="waifu复现"></p><p>Face edit，通过反向的vgg net将人脸图片project到latent space，然后通过direction对latent微调：</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/face_edit_face_swap.png?imageView2/2/w/500" alt="face edit"></p><hr><h3 id="Image-Inpainting"><a href="#Image-Inpainting" class="headerlink" title="Image Inpainting"></a>Image Inpainting</h3><p>公司做算法集成平台，为了拥有inpainting的AI能力，从LAMA和ZITS入手，构建了本地API。</p><p>LAMA主要利用FFC(fast fourier convolution)+upsample&#x2F;downsample来构建pipeline</p><p>ZITS更新一些，基于transformer结构，借鉴了LAMA的loss&#x2F;FFC等，对mask 进行position encoding，建立Fourier CNN Texture Restoration结构，主要克服了高分辨率下的inpainting问题。</p><hr><h3 id="StableDiffusion"><a href="#StableDiffusion" class="headerlink" title="StableDiffusion"></a>StableDiffusion</h3><p>主要工作围绕StableDiffusion展开，包括延伸的Lora和Dreambooth，基于<a href="https://github.com/bmaltais/kohya_ss">kohya_ss</a>训练lora模型，基于<a href="https://github.com/d8ahazard/sd_dreambooth_extension">Dreambooth webui插件</a>训练Dreambooth模型，完成了百变头像（dreambooth&#x2F;lora）、视频风格化（mov2mov）、服装模特（controlnet）、复现Midjourney的商品生成效果等。</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>CompVis推出latent diffusion，包括后面的stable diffusion模型，核心都是在做一件事，latent text-to-image using diffusion.</p><p>Diffusion是text2image的核心，就是一个图像加噪过程，反向则是通过U-net的denoise过程，之所以要在latent space做，是为了降低计算成本。</p><p>stable diffusion v1在860M U-net上，基于CLIP Vit-L&#x2F;14 text encoder训练的sd模型，支持512x512分辨率，由于良好的开源成为最火的diffusion项目。</p><p><a href="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/stablediffusion_v1_unet_structure.jpg">sd的unet详细网络结构</a></p><p>sd在denoise中的sample过程，最初提出的是DDPM，目前最快的是DPM++ SDE，原理参考 <a href="https://www.zhihu.com/question/536012286/answer/2533146567">lucheng的回答</a>  <a href="https://baijiahao.baidu.com/s?id=1754603075856631603&wfr=spider&for=pc">Diffusion数学原理</a>，从VAE到GAN到Diffusion，都是为了解决一个前向概率分布的反向求解问题，Diffusion反其道而行之，先确定反向求解是最简单的高斯分布形式（denoise），然后只需要学习前向过程（diffusion）即可。</p><p>DDPM是SDE的一阶形式，忽略了方差，只使用unet预测的噪声的均值，通过重参数求解t-1时刻latent；</p><p>DDIM是DPM的一阶形式，引入了方差，通过牺牲随机性换取性能，50次sample可以得到DDPM1000次的结果；</p><p>DPM++ SDE是二阶形式的SDE（随机微分方程）版本，对应的DPM是求解ODE（常微分方程），效率更高；</p><p>controlnet一定程度上解决了sd不可控的问题，通过复制部分trainable layer，添加zero convolution，训练了基于openpose&#x2F;hed&#x2F;depth等模型；</p><p>其他一些paper：</p><p>Google提出imagen，但没有开源</p><p>OpenAI提出GLIDE + DALL-E，没有开源</p><p>Paddlepaddle的ERNIE-ViLG</p><p>清华团队的CogView2，纯transformer结构，宣传对中文的支持更好</p><h4 id="SD图像生成"><a href="#SD图像生成" class="headerlink" title="SD图像生成"></a>SD图像生成</h4><p><strong>Cartoon Portrait (卡通肖像</strong></p><p>基于<a href="https://civitai.com/models/9409">anythingv3</a>模型，做img2img任务，提供生产服务：</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20230411142726770.png?imageView2/2/w/700" alt="image-20230411142726770"></p><h4 id="SD模型Finetune"><a href="#SD模型Finetune" class="headerlink" title="SD模型Finetune"></a>SD模型Finetune</h4><p>共有四种方式，包括Dreambooth、Lora、TextualInversion、HyperNetwork，Dreambooth是对整个网络参数finetune，Lora是添加额外low rank layer进行finetune，TextualInversion是对text embedding vector进行finetune，HyperNetwork是使用网络生成额外添加层。</p><p>早期使用Dreambooth训练，耗时久，模型文件大，后期Lora成为后起之秀，在civitai上更多的模型选择safetensor格式，基于Lora finetune SD模型，加入更多character和style等等。</p><p><strong>Avatar with multiple styles (百变头像</strong></p><p>使用人物头像，训练dreambooth模型，实现类似于 <a href="https://www.midjourney.org/">midjourney</a> 的效果，需要测试大量prompts （参考<a href="https://lexica.art/?q=portrait">lexica</a>等），提供生产服务：</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20230411112020788.png?imageView2/2/w/500" alt="image-20230411112020788"></p><p><strong>Virtual-Try-on</strong></p><p>传统的Virtual-Try-on任务使用GAN来完成，同时依赖分割模型的效果，例如<a href="https://github.com/sangyun884/HR-VITON">HR-VITON</a>，测试会发现仅仅在训练数据的domain中work，在域外数据并不能很好的work，这符合对GAN的一贯认知。</p><p>基于sd做try-on的简单思路是训练衣服的dreambooth&#x2F;lora模型，然后通过controlnet+prompts对模特进行控制，实测发现脸部质量难以控制，迁移能力差：</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/traditional_lora_result.png?imageView2/2/w/700"></p><p>基于dreambooth finetune sd2.1 inpainting模型，同样可以实现Virtual-Try-on的效果，但整体受限制较多，需要在源数据、mask、生成prompts等多个环节把控质量：</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/virtual-try-on.png?imageView2/2/w/700"></p><blockquote><p>传统lora模型训练用到kohya_ss，原因webui的dreambooth lora模式受限制太多，kohya_ss符合civitai的形式</p><p> inpainting model finetune用到diffusers，但inpainting模型的finetune代码还有bug，修复后提PR，训练的lora模型也不能够在webui中使用 （23.4）</p></blockquote><h4 id="SD视频生成"><a href="#SD视频生成" class="headerlink" title="SD视频生成"></a>SD视频生成</h4><p><a href="https://github.com/Scholar01/sd-webui-mov2mov">mov2mov</a>插件，自动对视频抽帧，每帧图像通过img2img+controlnet+lora进行风格化生成，调整denoise参数控制风格化强度；</p><p><a href="https://github.com/OedoSoldier/enhanced-img2img">enhanced-img2img</a>，引入了multi-frame rendering，将当前帧图像与前后帧（或初始帧）拼接，提高视频风格化的稳定性，也提高了VRAM和速度的消耗；</p><p><a href="https://www.bilibili.com/video/BV1C84y1g7iu">参考效果</a></p><hr><h3 id="Text2Video"><a href="#Text2Video" class="headerlink" title="Text2Video"></a>Text2Video</h3><p>meta的Make A Video</p><p>Google的Imagen Video和Phenaki</p><p>清华团队的Cogvideo</p><p>新加坡国立的 <a href="https://github.com/showlab/Tune-A-Video">Tune-A-Video</a>是将T2I任务迁移到T2V，修改SD的unet中的cross attention，加入时空attention，通过视频的前后帧信息训练unet的attention部分，生成时同时需要训练视频的inverse noise来在sample过程指导，实测效果一般，只能生成短序列video；</p><hr><h3 id="Nerf"><a href="#Nerf" class="headerlink" title="Nerf"></a>Nerf</h3><p>Nerf（(Neural Radiance Fields) ）是一种新颖视图合成的novel方法，通过5D coords，经过MLP而不使用convolution，输出color&#x2F;volume density，也就是体密度，然后使用volume render将物体进行渲染。</p><p>ADNerf</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>AIGC</tag>
      
      <tag>StyleGAN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ChatGPT项目总结</title>
    <link href="/posts/32678/"/>
    <url>/posts/32678/</url>
    
    <content type="html"><![CDATA[<p>半路出家，赶一波LLM热潮。</p><span id="more"></span><h3 id="中文大模型"><a href="#中文大模型" class="headerlink" title="中文大模型"></a>中文大模型</h3><p>ChatGLM LLAMA BLOOM MOSS</p><p>参考xmind</p><hr><h3 id="NLP实现的相关工作"><a href="#NLP实现的相关工作" class="headerlink" title="NLP实现的相关工作"></a>NLP实现的相关工作</h3><h4 id="Humanable-with-ChatGPT"><a href="#Humanable-with-ChatGPT" class="headerlink" title="Humanable with ChatGPT"></a>Humanable with ChatGPT</h4><p>基于 <a href="https://github.com/llSourcell/ChatGPT_Clone">chatgpt-clone</a>，通过vecel搭建在线服务，分为nodejs的前端和openai API的后端部分，使用Operand在线服务提取知识图谱（html），在调用chatgpt时注入知识图谱搜索的信息，实现了最easy的一种拟人化回答方式，可以改写chatgpt的回答。</p><h4 id="Dialogue-Chatbot"><a href="#Dialogue-Chatbot" class="headerlink" title="Dialogue Chatbot"></a>Dialogue Chatbot</h4><p>希望实现humanable的chatbot，围绕着复现CAI（character.ai），尝试开源的Pygmalion,KoboldAI等方案，整体采用的还是prompts engineerring方式，通过设立character简介，在prompts前注入部分dialogue，在一些经过story&#x2F;NSFW&#x2F;novel finetune过的LLM上可以进行高质量的多轮对话。</p><p>此外CAI还加入了一些在线的dialogue打分机制，可能通过在线学习增强了人物的personification。</p><h4 id="LangChain"><a href="#LangChain" class="headerlink" title="LangChain"></a>LangChain</h4><p>基于langchain_GLM，使用chatglm-6b作为base模型，通过text-&gt;embedding-&gt;vector database-&gt;similarity search-&gt;prompts的通用方式，实现外挂知识库查询，延伸的功能还包括本地非结构化文档分析。</p><h4 id="Finetune"><a href="#Finetune" class="headerlink" title="Finetune"></a>Finetune</h4><p>对于LLM的finetune可以分为两类，一类是全量finetune，占用大量GPU，需要deepspeed加速，另一类是部分finetune，又包括三种：</p><ul><li>freeze，自由的固定大部分模型参数，选择一些层进行finetune</li><li>p-tunning (v2) ， v1是对embedding层进行finetune，v2增加了对每一层前面的prompts进行tunning</li><li>lora，low rank adpation</li></ul><p>主要实验围绕Alpaca-cot，基于transformer+PEFT,对chatglm-6b模型进行lora finetune，第一步实现小样本注入（仿照luotuo），第二步实现领域内数据集finetune，第三步实现人格化数据集finetune。</p><hr><h3 id="ChatGPT-self-introduction"><a href="#ChatGPT-self-introduction" class="headerlink" title="ChatGPT self-introduction"></a>ChatGPT self-introduction</h3><p>让chatgpt自己写一篇关于自己的综述</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><br><span class="hljs-symbol">You:</span><br><br>write chatgpt<span class="hljs-comment">&#x27;s tech details for me</span><br><br><span class="hljs-symbol">ChatGPT:</span><br>ChatGPT <span class="hljs-built_in">is</span> a language model developed <span class="hljs-keyword">by</span> OpenAI. It <span class="hljs-built_in">is</span> built <span class="hljs-keyword">on</span> the transformer architecture <span class="hljs-built_in">and</span> <span class="hljs-built_in">is</span> trained <span class="hljs-keyword">on</span> a massive amount <span class="hljs-keyword">of</span> diverse <span class="hljs-keyword">text</span> data <span class="hljs-keyword">from</span> the internet.<br><br>Here are some technical details about ChatGPT:<br><br>- Model Architecture: Transformer<br>- Pretraining corpus: Common Crawl, Wikipedia, <span class="hljs-built_in">and</span> WebText<br>- Pretraining approach: Unsupervised learning, <span class="hljs-keyword">where</span> the model <span class="hljs-built_in">is</span> trained <span class="hljs-keyword">to</span> predict the <span class="hljs-keyword">next</span> word <span class="hljs-keyword">in</span> a sequence given the previous context.<br>- Model size: The base version <span class="hljs-keyword">of</span> ChatGPT has <span class="hljs-number">175</span> billion parameters, making it one <span class="hljs-keyword">of</span> the largest language models currently available.<br>- Training process: The model <span class="hljs-built_in">is</span> trained <span class="hljs-keyword">using</span> GPUs <span class="hljs-keyword">on</span> large clusters <span class="hljs-keyword">of</span> computers.<br>- Training time: It took several months <span class="hljs-keyword">to</span> train ChatGPT <span class="hljs-keyword">on</span> the massive corpus <span class="hljs-keyword">of</span> data.<br>- Input/Output: ChatGPT takes a natural language prompt <span class="hljs-keyword">as</span> input <span class="hljs-built_in">and</span> generates a continuation <span class="hljs-keyword">of</span> the prompt <span class="hljs-keyword">as</span> output.<br>- Fine-tuning: The model can be fine-tuned <span class="hljs-keyword">for</span> specific tasks such <span class="hljs-keyword">as</span> question-answering, <span class="hljs-keyword">text</span> generation, <span class="hljs-built_in">and</span> conversational AI <span class="hljs-keyword">by</span> training it <span class="hljs-keyword">on</span> smaller task-specific datasets.<br>- Tools: The model can be accessed through the OpenAI API <span class="hljs-built_in">or</span> through the OpenAI GPT-<span class="hljs-number">3</span> Playground.<br><br>These are some <span class="hljs-keyword">of</span> the technical details <span class="hljs-keyword">of</span> ChatGPT. The model <span class="hljs-built_in">is</span> constantly being updated <span class="hljs-built_in">and</span> improved <span class="hljs-keyword">by</span> OpenAI, so the details may change over time.<br><br><span class="hljs-symbol">You:</span><br>告诉我cahtgpt的技术细节<br><br><span class="hljs-symbol">ChatGPT:</span><br>ChatGPT是由OpenAI开发的语言模型。它基于变换器架构，并在互联网上大量不同的文本数据上进行训练。<br><br>以下是关于ChatGPT的一些技术细节：<br><br>- 模型架构：变换器<br>- 预训练语料库：Common Crawl、维基百科和WebText<br>- 预训练方法：无监督学习，即模型被训练以根据上下文预测序列中的下一个单词。<br>- 模型大小：ChatGPT的基础版本有<span class="hljs-number">175</span>亿个参数，使其成为目前可用的最大语言模型之一。<br>- 训练过程：该模型在大型计算机集群上使用GPU进行训练。<br>- 训练时间：在大量数据语料库上训练ChatGPT需要几个月的时间。<br>- 输入/输出：ChatGPT采用自然语言提示作为输入，并生成提示的继续部分作为输出。<br>- 微调：该模型可以通过在更小的任务特定数据集上进行训练，对特定任务进行微调，例如问答、文本生成和对话AI。<br>- 工具：可以通过OpenAI API或OpenAI GPT-<span class="hljs-number">3</span> Playground访问模型。<br><br>这些是ChatGPT的一些技术细节。模型由OpenAI不断更新和改进，因此细<br><br><span class="hljs-symbol">You:</span><br>chatgpt和instructGPT的区别在哪里？<br><br><span class="hljs-symbol">ChatGPT:</span><br>ChatGPT <span class="hljs-built_in">and</span> InstructGPT are both language models developed <span class="hljs-keyword">by</span> OpenAI, but they are designed <span class="hljs-keyword">for</span> different purposes.<br><br>ChatGPT <span class="hljs-built_in">is</span> a conversational AI model designed <span class="hljs-keyword">to</span> generate human-<span class="hljs-built_in">like</span> responses <span class="hljs-keyword">in</span> a conversation. It <span class="hljs-built_in">is</span> trained <span class="hljs-keyword">on</span> a diverse range <span class="hljs-keyword">of</span> internet <span class="hljs-keyword">text</span> data <span class="hljs-built_in">and</span> can be fine-tuned <span class="hljs-keyword">for</span> specific tasks such <span class="hljs-keyword">as</span> question-answering, <span class="hljs-keyword">text</span> generation, <span class="hljs-built_in">and</span> dialogue systems.<br><br>InstructGPT, <span class="hljs-keyword">on</span> the other hand, <span class="hljs-built_in">is</span> specifically designed <span class="hljs-keyword">for</span> the task <span class="hljs-keyword">of</span> procedural <span class="hljs-keyword">text</span> generation. It <span class="hljs-built_in">is</span> trained <span class="hljs-keyword">on</span> a large dataset <span class="hljs-keyword">of</span> instructions <span class="hljs-built_in">and</span> recipes <span class="hljs-built_in">and</span> <span class="hljs-built_in">is</span> capable <span class="hljs-keyword">of</span> generating <span class="hljs-keyword">step</span>-<span class="hljs-keyword">by</span>-<span class="hljs-keyword">step</span> instructions <span class="hljs-keyword">for</span> a wide range <span class="hljs-keyword">of</span> tasks, such <span class="hljs-keyword">as</span> cooking, <span class="hljs-keyword">assembly</span>, <span class="hljs-built_in">and</span> repair. Unlike ChatGPT, InstructGPT <span class="hljs-built_in">is</span> <span class="hljs-built_in">not</span> designed <span class="hljs-keyword">for</span> general conversational AI.<br><br><span class="hljs-keyword">In</span> summary, the main difference between ChatGPT <span class="hljs-built_in">and</span> InstructGPT <span class="hljs-built_in">is</span> their intended use cases. ChatGPT <span class="hljs-built_in">is</span> a general-purpose conversational AI model, <span class="hljs-keyword">while</span> InstructGPT <span class="hljs-built_in">is</span> specialized <span class="hljs-keyword">in</span> generating <span class="hljs-keyword">step</span>-<span class="hljs-keyword">by</span>-<span class="hljs-keyword">step</span> instructions <span class="hljs-keyword">for</span> specific tasks.<br><br><span class="hljs-symbol">You:</span><br>提供chatgpt在线服务的是一个模型还是经过finetune的多个模型？<br><br><span class="hljs-symbol">ChatGPT:</span><br>OpenAI provides access <span class="hljs-keyword">to</span> ChatGPT through its API, which <span class="hljs-built_in">is</span> a service that allows developers <span class="hljs-keyword">to</span> integrate the model <span class="hljs-keyword">into</span> their applications. It <span class="hljs-built_in">is</span> a large, fine-tuned version <span class="hljs-keyword">of</span> the original GPT-<span class="hljs-number">3</span> model. The specific version <span class="hljs-keyword">of</span> the model that <span class="hljs-built_in">is</span> used <span class="hljs-keyword">for</span> the API service may have undergone fine-tuning <span class="hljs-keyword">for</span> various specific tasks such <span class="hljs-keyword">as</span> language generation, question-answering, <span class="hljs-built_in">and</span> dialogue systems, <span class="hljs-keyword">in</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">to</span> improve its performance <span class="hljs-keyword">for</span> these use cases.<br><br>Therefore, it <span class="hljs-built_in">is</span> a fine-tuned version <span class="hljs-keyword">of</span> the original GPT-<span class="hljs-number">3</span> model, rather than multiple models, that <span class="hljs-built_in">is</span> provided <span class="hljs-keyword">as</span> an online service through the OpenAI API.<br><br><span class="hljs-symbol">You:</span><br>告诉我现有的NLP大规模语言模型有哪些，以及他们分别的参数量，请包括chatgpt instructgpt GPT3 davinci<br><br><br><span class="hljs-symbol">ChatGPT:</span><br>There are several large-scale NLP language models that have been developed <span class="hljs-keyword">by</span> different organizations <span class="hljs-built_in">and</span> research groups:<br><br><span class="hljs-number">1</span>. OpenAI<span class="hljs-comment">&#x27;s GPT-3: GPT-3 (Generative Pretrained Transformer 3) is one of the largest NLP language models to date. It has over 175 billion parameters, making it one of the most powerful language models available.</span><br><span class="hljs-number">2</span>. OpenAI<span class="hljs-comment">&#x27;s ChatGPT: ChatGPT is a fine-tuned version of the GPT-3 model, specifically designed for conversational AI. It has a smaller number of parameters compared to GPT-3, but still in the billions.</span><br><span class="hljs-number">3</span>. OpenAI<span class="hljs-comment">&#x27;s InstructGPT: InstructGPT is a fine-tuned version of GPT-3, designed for the task of procedural text generation. It also has a smaller number of parameters compared to GPT-3.</span><br><span class="hljs-number">4</span>. OpenAI<span class="hljs-comment">&#x27;s Davinci: Davinci is another large-scale NLP language model developed by OpenAI, with over 175 billion parameters. It is capable of a wide range of language tasks, including conversation, question-answering, and text generation.</span><br><br>These are some <span class="hljs-keyword">of</span> the most well-known large-scale NLP language models that are currently available. The exact number <span class="hljs-keyword">of</span> parameters <span class="hljs-keyword">in</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">of</span> these models <span class="hljs-built_in">is</span> subject <span class="hljs-keyword">to</span> change <span class="hljs-keyword">as</span> they are continually being improved <span class="hljs-built_in">and</span> updated <span class="hljs-keyword">by</span> the organizations that develop them.<br><br><span class="hljs-symbol">You:</span><br>instructGPT的论文名字是？<br><br><span class="hljs-symbol">ChatGPT:</span><br>I<span class="hljs-comment">&#x27;m sorry, InstructGPT is a proprietary model developed by OpenAI and I couldn&#x27;t find any associated published paper. OpenAI often releases blog posts or demos showcasing their models, but the research behind them is not typically published in the traditional academic sense. Instead, the models and the research behind them are proprietary and not publicly available.</span><br><br><span class="hljs-symbol">You:</span><br>tell <span class="hljs-keyword">me</span> about the paper <span class="hljs-keyword">from</span> openai : &lt;Training language models <span class="hljs-keyword">to</span> follow instructions <span class="hljs-keyword">with</span> human feedback&gt;<br><br><span class="hljs-symbol">ChatGPT:</span><br>I<span class="hljs-comment">&#x27;m sorry, but I couldn&#x27;t find a paper with that exact title from OpenAI. OpenAI is a research organization that develops cutting-edge AI models, but they do not always publish their research in the traditional academic sense. Instead, they often release blog posts, demos, and API services that showcase their models and their capabilities.</span><br><br>It<span class="hljs-comment">&#x27;s possible that the paper you&#x27;re referring to is a research paper that was not published by OpenAI, but instead by another research organization or academic institution. If you could provide more information or context, I may be able to assist you in finding the information you&#x27;re looking for.</span><br><br><span class="hljs-symbol">You:</span><br>详细阐述instructGPT的技术细节<br><br><span class="hljs-symbol">ChatGPT:</span><br>InstructGPT <span class="hljs-built_in">is</span> a language model developed <span class="hljs-keyword">by</span> OpenAI <span class="hljs-keyword">for</span> the task <span class="hljs-keyword">of</span> procedural <span class="hljs-keyword">text</span> generation. It <span class="hljs-built_in">is</span> fine-tuned <span class="hljs-keyword">from</span> OpenAI<span class="hljs-comment">&#x27;s larger GPT-3 model and is designed to generate step-by-step instructions for a wide range of tasks, such as cooking, assembly, and repair.</span><br><br>The technical details <span class="hljs-keyword">of</span> InstructGPT include:<br><br><span class="hljs-number">1</span>. Pretrained Transformer Architecture: InstructGPT uses the transformer architecture, which <span class="hljs-built_in">is</span> a type <span class="hljs-keyword">of</span> neural network architecture that has been widely adopted <span class="hljs-keyword">for</span> NLP tasks. The model <span class="hljs-built_in">is</span> pretrained <span class="hljs-keyword">on</span> a large corpus <span class="hljs-keyword">of</span> <span class="hljs-keyword">text</span> data, which allows it <span class="hljs-keyword">to</span> learn a general representation <span class="hljs-keyword">of</span> language.<br><span class="hljs-number">2</span>. Fine-tuning: InstructGPT <span class="hljs-built_in">is</span> fine-tuned <span class="hljs-keyword">on</span> a dataset <span class="hljs-keyword">of</span> instructions <span class="hljs-built_in">and</span> recipes <span class="hljs-keyword">in</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">to</span> improve its performance <span class="hljs-keyword">for</span> the task <span class="hljs-keyword">of</span> procedural <span class="hljs-keyword">text</span> generation. Fine-tuning <span class="hljs-built_in">is</span> a process <span class="hljs-keyword">of</span> adjusting the model<span class="hljs-comment">&#x27;s parameters based on a smaller, specialized dataset, in order to make it better suited for a specific task.</span><br><span class="hljs-number">3</span>. Generative Model: InstructGPT <span class="hljs-built_in">is</span> a generative model, meaning that it <span class="hljs-built_in">is</span> capable <span class="hljs-keyword">of</span> generating <span class="hljs-built_in">new</span> <span class="hljs-keyword">text</span>, rather than just classifying <span class="hljs-built_in">or</span> predicting existing <span class="hljs-keyword">text</span>. <span class="hljs-keyword">When</span> generating instructions, the model takes <span class="hljs-keyword">in</span> a prompt <span class="hljs-built_in">and</span> generates a sequence <span class="hljs-keyword">of</span> steps that can be followed <span class="hljs-keyword">to</span> complete a task.<br><span class="hljs-number">4</span>. Human Feedback: One <span class="hljs-keyword">of</span> the unique features <span class="hljs-keyword">of</span> InstructGPT <span class="hljs-built_in">is</span> that it can be trained <span class="hljs-keyword">using</span> human feedback, allowing users <span class="hljs-keyword">to</span> give the model direct feedback <span class="hljs-keyword">on</span> the quality <span class="hljs-keyword">of</span> its generated instructions. This feedback can be used <span class="hljs-keyword">to</span> further fine-tune the model <span class="hljs-built_in">and</span> improve its performance.<br><br>These are some <span class="hljs-keyword">of</span> the technical details <span class="hljs-keyword">of</span> InstructGPT. It <span class="hljs-built_in">is</span> a powerful language model that <span class="hljs-built_in">is</span> specifically designed <span class="hljs-keyword">for</span> the task <span class="hljs-keyword">of</span> procedural <span class="hljs-keyword">text</span> generation, <span class="hljs-built_in">and</span> its fine-tuning <span class="hljs-built_in">and</span> human feedback capabilities make it highly customizable <span class="hljs-built_in">and</span> adaptable <span class="hljs-keyword">to</span> a wide range <span class="hljs-keyword">of</span> use cases.<br><br><span class="hljs-symbol">You:</span><br><span class="hljs-number">2021</span>年以前，openai基于GPT的开发路线，做了哪些努力？<br><br><span class="hljs-symbol">ChatGPT:</span><br>Before <span class="hljs-number">2021</span>, OpenAI made significant efforts <span class="hljs-keyword">in</span> developing <span class="hljs-built_in">and</span> improving the GPT language model. Here are some <span class="hljs-keyword">of</span> their <span class="hljs-keyword">key</span> achievements:<br><br><span class="hljs-number">1</span>. Generative Pre-trained Transformer (GPT): <span class="hljs-keyword">In</span> <span class="hljs-number">2018</span>, OpenAI released the original GPT model, which marked a major milestone <span class="hljs-keyword">in</span> the field <span class="hljs-keyword">of</span> NLP. GPT was the first large-scale language model <span class="hljs-keyword">to</span> use the transformer architecture, <span class="hljs-built_in">and</span> its impressive performance <span class="hljs-keyword">on</span> a wide range <span class="hljs-keyword">of</span> NLP tasks demonstrated the potential <span class="hljs-keyword">of</span> this type <span class="hljs-keyword">of</span> model.<br><span class="hljs-number">2</span>. GPT-<span class="hljs-number">2</span>: <span class="hljs-keyword">In</span> <span class="hljs-number">2019</span>, OpenAI released GPT-<span class="hljs-number">2</span>, which was an even larger <span class="hljs-built_in">and</span> more powerful version <span class="hljs-keyword">of</span> GPT. GPT-<span class="hljs-number">2</span> was trained <span class="hljs-keyword">on</span> a massive corpus <span class="hljs-keyword">of</span> <span class="hljs-keyword">text</span> data, <span class="hljs-built_in">and</span> it demonstrated remarkable performance <span class="hljs-keyword">in</span> tasks such <span class="hljs-keyword">as</span> language generation, question answering, <span class="hljs-built_in">and</span> summarization.<br><span class="hljs-number">3</span>. GPT-<span class="hljs-number">3</span>: <span class="hljs-keyword">In</span> <span class="hljs-number">2020</span>, OpenAI released GPT-<span class="hljs-number">3</span>, which was an even larger <span class="hljs-built_in">and</span> more advanced version <span class="hljs-keyword">of</span> GPT-<span class="hljs-number">2</span>. GPT-<span class="hljs-number">3</span> was trained <span class="hljs-keyword">on</span> an even larger corpus <span class="hljs-keyword">of</span> <span class="hljs-keyword">text</span> data, <span class="hljs-built_in">and</span> it showed remarkable performance <span class="hljs-keyword">in</span> a wide range <span class="hljs-keyword">of</span> NLP tasks, including machine translation, question answering, <span class="hljs-built_in">and</span> <span class="hljs-keyword">text</span> classification.<br><span class="hljs-number">4</span>. API <span class="hljs-built_in">and</span> Toolkits: <span class="hljs-keyword">In</span> addition <span class="hljs-keyword">to</span> the models themselves, OpenAI also developed API services <span class="hljs-built_in">and</span> toolkits that allowed developers <span class="hljs-built_in">and</span> researchers <span class="hljs-keyword">to</span> easily access <span class="hljs-built_in">and</span> use the GPT models. This made it easier <span class="hljs-keyword">for</span> people <span class="hljs-keyword">to</span> incorporate GPT <span class="hljs-keyword">into</span> their own applications <span class="hljs-built_in">and</span> research projects.<br><br>These are just some <span class="hljs-keyword">of</span> the <span class="hljs-keyword">key</span> efforts that OpenAI made <span class="hljs-keyword">in</span> the development <span class="hljs-keyword">of</span> the GPT models before <span class="hljs-number">2021</span>. Through these models <span class="hljs-built_in">and</span> the related API <span class="hljs-built_in">and</span> toolkits, OpenAI has made a significant contribution <span class="hljs-keyword">to</span> the field <span class="hljs-keyword">of</span> NLP <span class="hljs-built_in">and</span> has advanced the state <span class="hljs-keyword">of</span> the art <span class="hljs-keyword">in</span> language modeling.<br><br><span class="hljs-symbol">You:</span><br><span class="hljs-number">2021</span>年以前，一定程度上可以替代chatgpt的中文模型有哪些？<br><br><span class="hljs-symbol">ChatGPT:</span><br>Before <span class="hljs-number">2021</span>, there were several Chinese language models that could <span class="hljs-keyword">to</span> some extent replace ChatGPT. Here are a few examples:<br><br><span class="hljs-number">1</span>. BERT: BERT, <span class="hljs-built_in">or</span> Bidirectional Encoder Representations <span class="hljs-keyword">from</span> Transformers, <span class="hljs-built_in">is</span> a pre-trained transformer-based language model developed <span class="hljs-keyword">by</span> Google. BERT was released <span class="hljs-keyword">in</span> <span class="hljs-number">2018</span> <span class="hljs-built_in">and</span> quickly became one <span class="hljs-keyword">of</span> the most widely used NLP models <span class="hljs-keyword">for</span> a variety <span class="hljs-keyword">of</span> tasks, including sentiment analysis, <span class="hljs-keyword">text</span> classification, <span class="hljs-built_in">and</span> named entity recognition.<br><span class="hljs-number">2</span>. ERNIE: ERNIE <span class="hljs-built_in">is</span> a pre-trained language model developed <span class="hljs-keyword">by</span> Baidu Research. It was released <span class="hljs-keyword">in</span> <span class="hljs-number">2019</span> <span class="hljs-built_in">and</span> <span class="hljs-built_in">is</span> based <span class="hljs-keyword">on</span> the transformer architecture. ERNIE has been shown <span class="hljs-keyword">to</span> perform well <span class="hljs-keyword">on</span> a range <span class="hljs-keyword">of</span> NLP tasks, including named entity recognition, <span class="hljs-keyword">text</span> classification, <span class="hljs-built_in">and</span> question answering.<br><span class="hljs-number">3</span>. THU-ERNIE: THU-ERNIE <span class="hljs-built_in">is</span> a pre-trained Chinese language model developed <span class="hljs-keyword">by</span> Tsinghua University. It was released <span class="hljs-keyword">in</span> <span class="hljs-number">2019</span> <span class="hljs-built_in">and</span> <span class="hljs-built_in">is</span> based <span class="hljs-keyword">on</span> the transformer architecture. THU-ERNIE has been shown <span class="hljs-keyword">to</span> perform well <span class="hljs-keyword">on</span> a range <span class="hljs-keyword">of</span> NLP tasks, including named entity recognition, <span class="hljs-keyword">text</span> classification, <span class="hljs-built_in">and</span> machine translation.<br><br>These are just a few examples <span class="hljs-keyword">of</span> the Chinese language models that existed before <span class="hljs-number">2021</span> <span class="hljs-built_in">and</span> could <span class="hljs-keyword">to</span> some extent replace ChatGPT. However, it<span class="hljs-comment">&#x27;s worth noting that ChatGPT is still a cutting-edge model that offers many advantages, including its large size and powerful language generation capabilities.</span><br><br><span class="hljs-symbol">You:</span><br>假如我有一批中文语料数据，chatgpt finetune接口如何使用？<br><br><span class="hljs-symbol">ChatGPT:</span><br><span class="hljs-keyword">If</span> you have a batch <span class="hljs-keyword">of</span> Chinese language corpus data, you can fine-tune the ChatGPT model <span class="hljs-keyword">using</span> the OpenAI API. Here<span class="hljs-comment">&#x27;s a high-level overview of the process:</span><br><br><span class="hljs-number">1</span>. Register <span class="hljs-keyword">for</span> an OpenAI API <span class="hljs-keyword">key</span>: <span class="hljs-keyword">To</span> access the OpenAI API, you<span class="hljs-comment">&#x27;ll need to register for an API key. You can do this by visiting the OpenAI website and following the instructions.</span><br><span class="hljs-number">2</span>. Preprocess the corpus data: Before you fine-tune the model, you<span class="hljs-comment">&#x27;ll need to preprocess your corpus data. This typically involves cleaning and preprocessing the text data, splitting it into training and validation sets, and converting it into the appropriate format for input into the OpenAI API.</span><br><span class="hljs-number">3</span>. Train the model: Once you have your corpus data preprocessed, you can fine-tune the ChatGPT model <span class="hljs-keyword">using</span> the OpenAI API. You<span class="hljs-comment">&#x27;ll use the API to specify the location of your training data and specify the parameters for fine-tuning. The API will then fine-tune the model on your data and produce a new fine-tuned version of the model.</span><br><span class="hljs-number">4</span>. Use the fine-tuned model: Once the fine-tuning process <span class="hljs-built_in">is</span> complete, you can use the fine-tuned model <span class="hljs-keyword">for</span> your NLP tasks. You can use the API <span class="hljs-keyword">to</span> input <span class="hljs-keyword">text</span> <span class="hljs-built_in">and</span> receive the model<span class="hljs-comment">&#x27;s predictions.</span><br><br>Note that fine-tuning a large language model <span class="hljs-built_in">like</span> ChatGPT can be computationally intensive <span class="hljs-built_in">and</span> requires significant computational resources. <span class="hljs-keyword">If</span> you don<span class="hljs-comment">&#x27;t have access to a powerful computing environment, you may need to use cloud computing services to perform the fine-tuning process.</span><br><br>It<span class="hljs-comment">&#x27;s worth mentioning that OpenAI is constantly updating and improving its API, so be sure to check the API documentation for the most up-to-date information on how to use the API to fine-tune ChatGPT.</span><br><br><span class="hljs-symbol">You:</span><br>chatgpt finetune可以带来什么效果？chatgpt支持哪些下游任务？<br><br><span class="hljs-symbol">ChatGPT:</span><br>Fine-tuning ChatGPT can lead <span class="hljs-keyword">to</span> improved performance <span class="hljs-keyword">on</span> specific NLP tasks. The goal <span class="hljs-keyword">of</span> fine-tuning <span class="hljs-built_in">is</span> <span class="hljs-keyword">to</span> adapt the pre-trained language model <span class="hljs-keyword">to</span> better suit your specific NLP task <span class="hljs-keyword">by</span> training it <span class="hljs-keyword">on</span> a smaller, task-specific dataset. This allows the model <span class="hljs-keyword">to</span> learn task-specific patterns <span class="hljs-built_in">and</span> biases <span class="hljs-keyword">from</span> the data <span class="hljs-built_in">and</span> produce better results.<br><br>ChatGPT supports a wide range <span class="hljs-keyword">of</span> NLP tasks, including but <span class="hljs-built_in">not</span> limited <span class="hljs-keyword">to</span>:<br><br><span class="hljs-number">1</span>. Question answering: ChatGPT can be fine-tuned <span class="hljs-keyword">to</span> answer questions based <span class="hljs-keyword">on</span> a given context.<br><span class="hljs-number">2</span>. <span class="hljs-keyword">Text</span> classification: ChatGPT can be fine-tuned <span class="hljs-keyword">for</span> <span class="hljs-keyword">text</span> classification tasks, such <span class="hljs-keyword">as</span> sentiment analysis <span class="hljs-built_in">or</span> spam detection.<br><span class="hljs-number">3</span>. <span class="hljs-keyword">Text</span> generation: ChatGPT can be fine-tuned <span class="hljs-keyword">for</span> <span class="hljs-keyword">text</span> generation tasks, such <span class="hljs-keyword">as</span> machine translation, summarization, <span class="hljs-built_in">and</span> dialogue generation.<br><span class="hljs-number">4</span>. Named entity recognition (NER): ChatGPT can be fine-tuned <span class="hljs-keyword">for</span> NER, which involves identifying <span class="hljs-built_in">and</span> categorizing entities mentioned <span class="hljs-keyword">in</span> a <span class="hljs-keyword">text</span>, such <span class="hljs-keyword">as</span> persons, organizations, <span class="hljs-built_in">and</span> locations.<br><span class="hljs-number">5</span>. Part-<span class="hljs-keyword">of</span>-speech tagging (POS): ChatGPT can be fine-tuned <span class="hljs-keyword">for</span> POS, which involves identifying the grammatical category <span class="hljs-keyword">of</span> words <span class="hljs-keyword">in</span> a <span class="hljs-keyword">text</span>, such <span class="hljs-keyword">as</span> nouns, verbs, <span class="hljs-built_in">and</span> adjectives.<br><br>Overall, fine-tuning ChatGPT can lead <span class="hljs-keyword">to</span> improved performance <span class="hljs-keyword">on</span> a wide range <span class="hljs-keyword">of</span> NLP tasks, <span class="hljs-built_in">and</span> the specific task you choose <span class="hljs-keyword">to</span> fine-tune the model <span class="hljs-keyword">for</span> will impact the specific improvements you can expect. However, it<span class="hljs-comment">&#x27;s worth noting that fine-tuning is not a guaranteed solution and requires a task-specific dataset, careful tuning of the model&#x27;s hyperparameters, and a thorough understanding of the underlying model architecture.</span><br><br><span class="hljs-symbol">You:</span><br>chatgpt支持的五种下游任务，请分别举一个最简单的例子，包含对话<br><br><span class="hljs-symbol">ChatGPT:</span><br>Sure! Here are five simple examples <span class="hljs-keyword">of</span> the five downstream tasks that ChatGPT can be used <span class="hljs-keyword">for</span>, along <span class="hljs-keyword">with</span> a sample dialogue <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> task:<br><br><span class="hljs-number">1</span>. Question Answering: Given a context, ChatGPT can be used <span class="hljs-keyword">to</span> answer questions.<br><br><span class="hljs-symbol">Context:</span> <span class="hljs-string">&quot;The capital of France is Paris.&quot;</span><br><span class="hljs-symbol">Question:</span> <span class="hljs-string">&quot;What is the capital of France?&quot;</span><br><span class="hljs-symbol">ChatGPT:</span> <span class="hljs-string">&quot;The capital of France is Paris.&quot;</span><br><br><span class="hljs-number">1</span>. <span class="hljs-keyword">Text</span> Classification: ChatGPT can be fine-tuned <span class="hljs-keyword">for</span> <span class="hljs-keyword">text</span> classification tasks, such <span class="hljs-keyword">as</span> sentiment analysis <span class="hljs-built_in">or</span> spam detection.<br><br><span class="hljs-symbol">Text:</span> <span class="hljs-string">&quot;I love this movie! It&#x27;s so much fun.&quot;</span><br><span class="hljs-symbol">ChatGPT:</span> <span class="hljs-string">&quot;Positive sentiment.&quot;</span><br><br><span class="hljs-number">1</span>. <span class="hljs-keyword">Text</span> Generation: ChatGPT can be fine-tuned <span class="hljs-keyword">for</span> <span class="hljs-keyword">text</span> generation tasks, such <span class="hljs-keyword">as</span> machine translation, summarization, <span class="hljs-built_in">and</span> dialogue generation.<br><br><span class="hljs-symbol">Input:</span> <span class="hljs-string">&quot;What is your favorite hobby?&quot;</span><br><span class="hljs-symbol">ChatGPT:</span> <span class="hljs-string">&quot;My favorite hobby is reading books.&quot;</span><br><br><span class="hljs-number">1</span>. Named Entity Recognition (NER): ChatGPT can be fine-tuned <span class="hljs-keyword">for</span> NER, which involves identifying <span class="hljs-built_in">and</span> categorizing entities mentioned <span class="hljs-keyword">in</span> a <span class="hljs-keyword">text</span>, such <span class="hljs-keyword">as</span> persons, organizations, <span class="hljs-built_in">and</span> locations.<br><br><span class="hljs-symbol">Text:</span> <span class="hljs-string">&quot;Barack Obama was the 44th President of the United States.&quot;</span><br><span class="hljs-symbol">ChatGPT:</span> <span class="hljs-string">&quot;Barack Obama (Person), 44th (Ordinal), President (Job Title), United States (Location)&quot;</span><br><br><span class="hljs-number">1</span>. Part-<span class="hljs-keyword">of</span>-Speech Tagging (POS): ChatGPT can be fine-tuned <span class="hljs-keyword">for</span> POS, which involves identifying the grammatical category <span class="hljs-keyword">of</span> words <span class="hljs-keyword">in</span> a <span class="hljs-keyword">text</span>, such <span class="hljs-keyword">as</span> nouns, verbs, <span class="hljs-built_in">and</span> adjectives.<br><br><span class="hljs-symbol">Text:</span> <span class="hljs-string">&quot;The cat is sleeping on the bed.&quot;</span><br><span class="hljs-symbol">ChatGPT:</span> <span class="hljs-string">&quot;The/Determiner cat/Noun is/Verb sleeping/Verb on/Preposition the/Determiner bed/Noun.&quot;</span><br><br>I hope these examples give you an idea <span class="hljs-keyword">of</span> the different tasks that ChatGPT can be used <span class="hljs-keyword">for</span>!<br><br><span class="hljs-symbol">You:</span><br>有人用chatgpt生成stable diffusion的prompts， chatgpt在训练时有没有输入图片数据？<br><br><span class="hljs-symbol">ChatGPT:</span><br>Yes, people have used ChatGPT <span class="hljs-keyword">to</span> generate prompts <span class="hljs-keyword">for</span> Stable Diffusions. However, ChatGPT <span class="hljs-built_in">is</span> primarily trained <span class="hljs-keyword">on</span> <span class="hljs-keyword">text</span> data <span class="hljs-built_in">and</span> does <span class="hljs-built_in">not</span> directly receive input <span class="hljs-keyword">in</span> the form <span class="hljs-keyword">of</span> images. <span class="hljs-keyword">To</span> generate prompts that involve images, people have combined ChatGPT <span class="hljs-keyword">with</span> other computer vision models that can process images <span class="hljs-built_in">and</span> extract information <span class="hljs-keyword">from</span> them. The resulting model can <span class="hljs-keyword">then</span> use the information extracted <span class="hljs-keyword">from</span> the image <span class="hljs-keyword">to</span> generate <span class="hljs-keyword">text</span> that describes the image.<br><br>So <span class="hljs-keyword">while</span> ChatGPT itself doesn<span class="hljs-comment">&#x27;t receive image data directly, it can still be combined with computer vision models to generate text that is influenced by images.</span><br><br><span class="hljs-symbol">You:</span><br>chatgpt是否是通过单独的鉴别服务器来识别违规内容<br><br><span class="hljs-symbol">ChatGPT:</span><br>OpenAI doesn<span class="hljs-comment">&#x27;t publicly disclose the specific details of how it enforces its policies with respect to inappropriate content generation, but it&#x27;s likely that the enforcement mechanisms are built into the overall platform and architecture of the service, rather than relying on a separate server.</span><br><br><span class="hljs-keyword">In</span> general, OpenAI takes responsible AI practices seriously, <span class="hljs-built_in">and</span> has implemented measures <span class="hljs-keyword">to</span> help prevent its language models <span class="hljs-keyword">from</span> generating inappropriate <span class="hljs-built_in">or</span> harmful content. This may include <span class="hljs-keyword">using</span> filters <span class="hljs-built_in">and</span> other automated systems <span class="hljs-keyword">to</span> detect <span class="hljs-built_in">and</span> remove problematic outputs, <span class="hljs-keyword">as</span> well <span class="hljs-keyword">as</span> manual review processes.<br><br>However, these systems may <span class="hljs-built_in">not</span> be perfect, <span class="hljs-built_in">and</span> there may still be instances <span class="hljs-keyword">where</span> inappropriate <span class="hljs-built_in">or</span> harmful content <span class="hljs-built_in">is</span> generated <span class="hljs-keyword">by</span> OpenAI<span class="hljs-comment">&#x27;s models. In such cases, the company encourages users to report any such incidents, and it has established a process for reviewing and addressing such reports.</span><br><br><span class="hljs-symbol">You:</span><br>chatgpt plus的计划目前进展到哪一步了？<br><br><span class="hljs-symbol">ChatGPT:</span><br>I am an AI language model trained <span class="hljs-keyword">by</span> OpenAI, <span class="hljs-built_in">and</span> my knowledge cutoff <span class="hljs-built_in">is</span> <span class="hljs-number">2021</span>. <span class="hljs-keyword">As</span> <span class="hljs-keyword">of</span> my training data, OpenAI had <span class="hljs-built_in">not</span> yet released information about the progress <span class="hljs-keyword">of</span> its <span class="hljs-string">&quot;ChatGPT+&quot;</span> plan.<br><br>OpenAI <span class="hljs-built_in">is</span> a research organization that develops <span class="hljs-built_in">and</span> publishes cutting-edge AI models, including language models <span class="hljs-built_in">like</span> GPT-<span class="hljs-number">3</span> <span class="hljs-built_in">and</span> ChatGPT. The company <span class="hljs-built_in">is</span> known <span class="hljs-keyword">for</span> its work <span class="hljs-keyword">in</span> advancing the state <span class="hljs-keyword">of</span> the art <span class="hljs-keyword">in</span> AI, <span class="hljs-built_in">and</span> <span class="hljs-keyword">for</span> its commitment <span class="hljs-keyword">to</span> responsible AI practices.<br><br>However, <span class="hljs-keyword">as</span> AI <span class="hljs-built_in">is</span> a rapidly evolving field, it<span class="hljs-comment">&#x27;s possible that there have been significant advancements or changes to OpenAI&#x27;s plans since my training data was collected. For up-to-date information on the current status of OpenAI&#x27;s projects and plans, I would recommend checking the company&#x27;s website or contacting them directly.</span><br><br><span class="hljs-symbol">You:</span><br>假如你是一个openai的面试官，现在对我进行面试，请你提问和openai或者chatgpt或者GPT3相关的技术问题，并在我回答错误的时候指出正确答案<br><br><span class="hljs-symbol">ChatGPT:</span><br>好的，作为面试官，我将会问一些关于OpenAI和ChatGPT/GPT-<span class="hljs-number">3</span>的技术问题。<br><br><span class="hljs-number">1</span>. OpenAI的GPT-<span class="hljs-number">3</span>是基于什么技术构建的？<br><span class="hljs-number">2</span>. GPT-<span class="hljs-number">3</span>的参数量大约有多少？<br><span class="hljs-number">3</span>. ChatGPT是如何进行语言生成的？<br><span class="hljs-number">4</span>. ChatGPT是否可以被微调，以适应特定的任务？<br><span class="hljs-number">5</span>. OpenAI是否开源了GPT-<span class="hljs-number">3</span>的源代码？<br><span class="hljs-number">6</span>. OpenAI是否为GPT-<span class="hljs-number">3</span>和ChatGPT开发了特定的API，以便开发者可以访问这些模型？<br><span class="hljs-number">7</span>. ChatGPT支持哪些类型的语言生成任务？<br><span class="hljs-number">8</span>. 在GPT-<span class="hljs-number">3</span>和ChatGPT中，数据隐私和安全如何得到保证？<br><br>请回答这些问题。如果回答错误，我会提供正确答案。<br><br><span class="hljs-symbol">You:</span><br>我不会，直接告诉我答案<br><br><span class="hljs-symbol">ChatGPT:</span><br>对不起，我不能直接告诉你答案。如果你需要了解某些信息，可以尝试询问具体问题，我会尽力回答您。<br><br><span class="hljs-symbol">You:</span><br>    OpenAI的GPT-<span class="hljs-number">3</span>是基于什么技术构建的？<br>    <br>    GPT-<span class="hljs-number">3</span>的参数量大约有多少？<br>    <br>    ChatGPT是如何进行语言生成的？<br>    <br>    ChatGPT是否可以被微调，以适应特定的任务？<br>    <br>    OpenAI是否开源了GPT-<span class="hljs-number">3</span>的源代码？<br>    <br>    OpenAI是否为GPT-<span class="hljs-number">3</span>和ChatGPT开发了特定的API，以便开发者可以访问这些模型？<br>    <br>    ChatGPT支持哪些类型的语言生成任务？<br>    <br>    在GPT-<span class="hljs-number">3</span>和ChatGPT中，数据隐私和安全如何得到保证？<br><br><span class="hljs-symbol">ChatGPT:</span><br>回答：<br><br><span class="hljs-number">1</span>. OpenAI的GPT-<span class="hljs-number">3</span>是基于Transformer技术构建的。<br><span class="hljs-number">2</span>. GPT-<span class="hljs-number">3</span>的参数量大约为<span class="hljs-number">175</span>B。<br><span class="hljs-number">3</span>. ChatGPT是通过预训练语言模型生成的，然后再根据输入的上下文和任务生成文本。<br><span class="hljs-number">4</span>. ChatGPT可以被微调，以适应特定的任务。<br><span class="hljs-number">5</span>. OpenAI没有开源GPT-<span class="hljs-number">3</span>的源代码。<br><span class="hljs-number">6</span>. OpenAI为GPT-<span class="hljs-number">3</span>和ChatGPT开发了特定的API，以便开发者可以访问这些模型。<br><span class="hljs-number">7</span>. ChatGPT支持诸如对话生成、文本生成、文本分类等类型的语言生成任务。<br><span class="hljs-number">8</span>. 在GPT-<span class="hljs-number">3</span>和ChatGPT中，OpenAI采取了严格的数据隐私和安全措施，以确保用户数据的安全。<br><br><span class="hljs-symbol">You:</span><br>让一个大型语言模型假扮一个面试官，这属于NLP的哪种下游任务？<br><br><span class="hljs-symbol">ChatGPT:</span><br>这属于NLP中的对话生成下游任务。<br><br><span class="hljs-symbol">You:</span><br>NLP中的对话生成下游任务，可以细分为哪些类别？<br><br><span class="hljs-symbol">ChatGPT:</span><br>NLP中的对话生成下游任务可以细分为以下几类：<br><br><span class="hljs-number">1</span>. 对话生成：通过模型生成与用户交互的语言<br><span class="hljs-number">2</span>. 对话摘要：生成一个简短的语言摘要，用于概括长对话的主要信息<br><span class="hljs-number">3</span>. 对话情感分析：识别对话中的情感极性，例如积极、消极、中立<br><span class="hljs-number">4</span>. 对话翻译：将对话从一种语言翻译成另一种语言<br><span class="hljs-number">5</span>. 对话引导：根据用户的请求，生成下一步的对话策略<br><br>这些任务是NLP中对话生成的主要分类，但并不是全部。其他还有语音合成、语音识别、语音生成等等。<br><br><span class="hljs-symbol">You:</span><br>假如我是一家中国的AIGC公司，现在可以利用chatgpt实现哪些服务，并且取得效益？<br><br><span class="hljs-symbol">ChatGPT:</span><br>作为一家AIGC公司，您可以利用ChatGPT实现以下服务以取得效益：<br><br><span class="hljs-number">1</span>. 自动客服：您可以使用ChatGPT为客户提供快速的回复，并为客户提供信息和帮助。<br><span class="hljs-number">2</span>. 内容生成：您可以使用ChatGPT生成各种形式的内容，包括文字、图片和视频，以满足您的市场营销需求。<br><span class="hljs-number">3</span>. 语言翻译：您可以使用ChatGPT进行机器翻译，提高您的全球业务范围。<br><span class="hljs-number">4</span>. 聊天机器人：您可以使用ChatGPT开发聊天机器人，实现智能对话。<br><span class="hljs-number">5</span>. 情感分析：您可以使用ChatGPT对客户评论进行情感分析，以更好地了解客户的需求和满意度。<br><span class="hljs-number">6</span>. 问答系统：您可以使用ChatGPT开发问答系统，为客户提供快速准确的答案。<br><span class="hljs-number">7</span>. 对话生成：您可以使用ChatGPT生成对话，以满足您的业务需求。<br><br>这些服务都可以帮助您提高客户满意度，提高客户忠诚度，增加销售额，并在竞争对手中脱颖而出。<br><br><span class="hljs-symbol">You:</span><br>假如我使用大量名字叫“王刚”的人写的文章和他的生平简历作为语料，finetune chatgpt，你可以模仿finetune之后的效果吗？<br><br><span class="hljs-symbol">ChatGPT:</span><br>作为一个AI生成的模型，我不能模仿经过finetune的模型的效果，但是我可以给出一个概括。<br><br>如果你使用名字为“王刚”的人写的文章和他的生平简历作为语料finetune了GPT模型，那么得到的模型将会对“王刚”这个名字和相关信息更熟悉，并且在生成相关信息时，具有更高的准确性和相关性。当然，这将取决于语料的质量和数量以及finetune的方法和设置。<br><br><span class="hljs-symbol">You:</span><br>“我是王刚，我生活在北京，我喜欢足球”<br><br><span class="hljs-symbol">ChatGPT:</span><br>很抱歉，仅仅通过上面的信息并不能很好地finetune chatgpt模型。为了让模型更好地模仿一个人，您需要提供更多关于这个人的信息和他的语言表现。您可以使用他写的文章、生平简历和其他相关材料来finetune模型，以便更好地生成他的语言。<br><br><span class="hljs-symbol">You:</span><br>“我是王刚，我生活在北京，我喜欢足球， 这是我写的一篇文章，我爱中国”  假如我使用上述语料finetune了一个语言模型，当我问语言模型“你是谁”的时候，语言模型会如何回复？<br><br><span class="hljs-symbol">ChatGPT:</span><br>如果使用上述语料finetune过的语言模型，当你问它<span class="hljs-string">&quot;你是谁&quot;</span>时，它有可能回复<span class="hljs-string">&quot;我是王刚&quot;</span>，因为它学习到了关于<span class="hljs-string">&quot;王刚&quot;</span>的信息。但是，语言模型的回答可能不一定准确，还要取决于finetune过程中使用的技术、参数和数据量等。<br><br><span class="hljs-symbol">You:</span><br>“我是王刚，我生活在北京，我喜欢足球， 这是我写的一篇文章，我爱中国”    对这段话做语义分割<br><br><span class="hljs-symbol">ChatGPT:</span><br>对于这段话，可以进行以下语义分割：<br><br><span class="hljs-number">1</span>. <span class="hljs-string">&quot;我是王刚&quot;</span>：表示身份信息<br><span class="hljs-number">2</span>. <span class="hljs-string">&quot;我生活在北京&quot;</span>：表示地理位置信息<br><span class="hljs-number">3</span>. <span class="hljs-string">&quot;我喜欢足球&quot;</span>：表示个人兴趣信息<br><span class="hljs-number">4</span>. <span class="hljs-string">&quot;这是我写的一篇文章&quot;</span>：表示相关的行为信息<br><span class="hljs-number">5</span>. <span class="hljs-string">&quot;我爱中国&quot;</span>：表示个人对国家的情感信息。<br><br>语义分割是NLP的一个重要的任务，它的目的是将文本分解为不同的意义组件，以便进一步进行分析和处理。<br><br><span class="hljs-symbol">You:</span><br>换个话题，聊天机器人是如何处理上下文关系的，是否收到prompts长度的限制，chatgpt的prompts长度是多少？<br><br><span class="hljs-symbol">ChatGPT:</span><br>聊天机器人通常通过对上下文的理解来处理上下文关系。它可以通过维护对对话历史的记录以及对词语相关性的判断来理解上下文。<br><br>对于prompts长度，一般来说没有固定的限制，但是长度过长可能会影响聊天机器人的效果。<br><br>关于ChatGPT，OpenAI没有明确说明prompts长度的限制。但一般来说，较短的prompts可以让模型更快地生成相关回复，而较长的prompts则可以帮助模型更好地理解上下文关系，生成更加准确的回复。<br><br><span class="hljs-symbol">You:</span><br>我在写一篇关于chatgpt历史和技术细节的综述，除了我们聊到的，还有哪些我最好知道的？<br><br><span class="hljs-symbol">ChatGPT:</span><br>除了我们已经讨论的内容外，以下是关于ChatGPT和GPT-<span class="hljs-number">3</span>的一些重要知识点：<br><br><span class="hljs-number">1</span>. GPT-<span class="hljs-number">3</span>的架构：GPT-<span class="hljs-number">3</span>是一个巨大的多层双向Transformer模型，其中每层都是由多个头组成的，主要用于语言模型预训练。<br><span class="hljs-number">2</span>. 训练数据：GPT-<span class="hljs-number">3</span>是在大量网络上的语料库（例如：Wikipedia）<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>ChatGPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FaceSwap项目全回顾</title>
    <link href="/posts/6357/"/>
    <url>/posts/6357/</url>
    
    <content type="html"><![CDATA[<p>换脸项目整体开发了2年多，从最早的DFL一直做到HifiFace，最后算法实现的效果是非常惊艳并且业界领先的，但是由于多重因素，就像莫名其妙火起来又莫名其妙消失的ZAO一样，没有找到商业的落地点，虽然做了一些换脸直播的尝试，但是受限于整体架构和产品设计，结果可以说是失败的。</p><span id="more"></span><h3 id="开发时间线"><a href="#开发时间线" class="headerlink" title="开发时间线"></a>开发时间线</h3><p>换脸直播效果：</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/deepfake_online_ldh.jpeg?imageView2/2/w/300"></p><p><a href="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/FaceSwap.png">点击查看思维导图</a></p><p><a href="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/face_swap_huazhibing_h264_out.mp4">华智冰换脸效果（去音）</a>  模仿 原清华 <a href="https://www.bilibili.com/video/BV19P4y1b7P3/">华智冰</a></p><ul><li>围绕DeepFaceLab训练模型&#x2F;效果提升&#x2F;实时化</li><li>围绕SimSwap效果提升&#x2F;实时化</li><li>明确HifiFace为baseline，论文复现</li><li>大规模数据搜集和模型训练&#x2F;调参</li><li>模型部署</li></ul><hr><h3 id="DFL探索"><a href="#DFL探索" class="headerlink" title="DFL探索"></a>DFL探索</h3><p>互联网搜集、标注组采集，建立200+ID的人脸数据库，每ID人脸数量约1k-1w不等；</p><p>标注xseg人脸分割模型数据1k+，finetune Xseg模型；</p><p>改进deepfacelab训练流程，使用二阶段训练方式，全自动化训练，训练上百明星换脸模型；</p><p>建立dfl实时化pipeline（21年），比原作者开源DeepFaceLive早半年，增加了单人人脸锁定、双人实时换脸等功能。</p><h4 id="Fake-ID"><a href="#Fake-ID" class="headerlink" title="Fake ID"></a>Fake ID</h4><p>考虑到使用明星脸做face swap的道德问题，做face morph希望生成新的不存在的人脸，测试过各大厂商的face morph API，部分使用传统方法，部分使用深度学习网络，尝试用styleganada做half mix，dlib传统方法等，效果都不是很好。</p><p>考虑到deepfacelab的特性，最终从数据集mining的角度解决fake ID问题，在数据集中进行人物配比，训练中加强true face loss，实现fake ID 模型的低成本生成。</p><p>后续实际生产中，还有通过face embedding合成，多次换脸等方式来生成不存在的人脸，或者明星混合脸。</p><h4 id="Universal-Model"><a href="#Universal-Model" class="headerlink" title="Universal Model"></a>Universal Model</h4><p>deepfacelab是典型的1-1模型，使用dst脸替换src脸，在实际使用中肯定希望有一个universal的模型，任意src脸都可以替换为dst，也就是可以更换主播直播，但都是一个脸。</p><p>一方面可以通过DF-UD模型的true face选项增加loss约束，另一方面使用最新的AMP结构，天然对多src的支持好。</p><p>也尝试了网络结构的改进，通过增加输入分支，训练N合1模型。</p><p>最后的方案还是做data distribution的调整，可以起到不错的效果，实现了universal的模型，即任意src都可以换成同一个dst。</p><h4 id="多阶段训练"><a href="#多阶段训练" class="headerlink" title="多阶段训练"></a>多阶段训练</h4><p>为了批量化生产换脸模型，建立了multi stage的训练脚本，对deepfacelab代码重构，基于参数需要调整的特性，总结一套通用参数，通过多stage自动加载预训练模型，自动调整参数。</p><p>最终效果是可以通过配置文件，批量训练N个不同人物的换脸模型，训练速度快，模型可用率高，同时新模型不断在base模型上迭代，整体换脸效果随着ID和数据的增多变好。</p><p>最终DF-UD结构迭代到70w+epoch，LIAE结构迭代到150w+epoch，使用A100*2，batchsize32。</p><h4 id="实时化"><a href="#实时化" class="headerlink" title="实时化"></a>实时化</h4><p>从不同方向优化deepfacelab pipeline推理速度，最终实现1080P下30fps换脸（RTX3080），测试双人换脸也可以实时，满足生产要求。</p><p><strong>模型方面</strong></p><ul><li><p>模型手工剪枝，去除冗余操作</p></li><li><p>mediapipe GPU替换S3FD做人脸检测</p></li><li><p>转换tensorrt模型，xseg等做batch推理</p></li></ul><p><strong>workflow方面</strong></p><ul><li><p>color merge算法提速（C++）</p></li><li><p>pre crop</p></li><li><p>tracking&amp;smooth</p></li><li><p>multi thread(cv2box)</p></li></ul><p><strong>数值计算上</strong></p><ul><li>numexpr加速</li></ul><hr><h3 id="SimSwap并行化"><a href="#SimSwap并行化" class="headerlink" title="SimSwap并行化"></a>SimSwap并行化</h3><p>在手头没有更好的换脸模型情况下，对simswap模型并行化，进行换脸视频的快速产出。</p><p>通过mount tmpfs优化IO，multi thread优化推理速度等，实现4*A100（24G）显存下20路并行，满足了生产要求。</p><p>项目在后续已废弃，但为hififace实时化提供了不错的代码模板，hififace realtime就是基于此开发的。</p><hr><h3 id="HifiFace复现"><a href="#HifiFace复现" class="headerlink" title="HifiFace复现"></a>HifiFace复现</h3><p>HifiFace 2021年横空出世，效果惊艳，远超其他开源项目，官网并没有开源计划，于是着手复现，全项目复现完成比第三方复现开源早1-2个月，效果也远超第三方复现效果，未开源。</p><h4 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h4><ul><li>人脸feature ，测试了市面所有开源模型，根据论文选<a href="https://github.com/HuangYG123/CurricularFace">CurricularFace</a>，后续由于数据集庞大，难以更换</li><li>表情系数，测试了市面所有开源模型，选择<a href="https://github.com/microsoft/Deep3DFaceReconstruction">Deep3DFace</a></li></ul><p>此外尝试的方案有：</p><ul><li>不同人脸识别模型的feature concat</li><li>人脸识别模型feature提取中的mod trick</li><li>face parsing ，对不同部分细粒度操作</li><li>表情系数的精确化分割</li><li>数据集人脸增强（超分 重建 美颜）</li></ul><h4 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h4><p><strong>generator</strong></p><p>除复现论文结构，并在此基础上做kernel size&#x2F;batch norm&#x2F;256 lift to 512等实验外，参考<a href="https://github.com/yl4579/StarGANv2-VC">StarGanV2</a>引进了generator结构特性：</p><ul><li>AdaINRes</li><li>bias&#x2F;upsample inter mode&#x2F;sqrt2 tricks</li></ul><p><strong>discriminator</strong></p><p>除复现论文结构外，参考<a href="https://github.com/NVlabs/SPADE">SPADE</a>&#x2F;<a href="https://github.com/neuralchen/SimSwap">SimSwap</a>做了不同尝试，包括：</p><ul><li>multi-layer discriminator</li><li>U-net discriminator</li></ul><h4 id="Loss"><a href="#Loss" class="headerlink" title="Loss"></a>Loss</h4><p>大量loss对效果微调，包括论文的6个loss（shape loss&#x2F;id loss&#x2F;segmentation loss&#x2F;reconstruction loss&#x2F;cycle loss&#x2F;lpips loss），此外加入：</p><ul><li>contrastive face embedding loss （ref <a href="https://github.com/GGGHSL/InfoSwap-master">InfoSwap</a>）</li><li>iris loss</li><li>eye&#x2F;mouth&#x2F;teeth loss</li><li>focal loss etc.</li></ul><h4 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h4><p>建立了本地的训练工程，对模型通过结构进行版本更新，对loss权重调参，模型前后也有权重继承关系，毕竟调整一些层或者增加几十万数据不可能重新训练模型，渐进式训练方式获得v5版本，迭代至1000+epoch</p><hr><h3 id="大规模人脸数据库"><a href="#大规模人脸数据库" class="headerlink" title="大规模人脸数据库"></a>大规模人脸数据库</h3><p>最终提供的数据总规模在250w，提供性别&#x2F;图像质量分类label， 提供人脸embedding&#x2F;3d coff等信息用于训练中旁路注入信息。</p><h4 id="开源数据"><a href="#开源数据" class="headerlink" title="开源数据"></a>开源数据</h4><p>大量开源数据集的搜集，分类和预处理，核心点一是人种分类，二是性别分类，人种在开源数据集时评估，性别可以后期通过人脸属性分类模型解决。</p><p>典型的人脸开源数据包括FFHQ msceleb celebv celebv-hq vggface2 等，fake人脸数据集包括DigiFace1M FaceSynthetics FF++_Splice seeprettyface等，部分通过stylegan生成，部分通过UE等建模工具生成。</p><p>进行人脸detect&amp;align，提取embedding&#x2F;coff建立初版数据集。</p><h4 id="互联网数据爬取"><a href="#互联网数据爬取" class="headerlink" title="互联网数据爬取"></a>互联网数据爬取</h4><p>前期训练DeepFaceLab模型建立的大规模私有数据集，ID约200+，每个ID图像数千，经过简单人工筛选后加入人脸数据库。</p><p>提供weibo baidu 等图片爬虫工具，开源代码修改后打包windows可执行文件，明确使用文档，交付标注组通过索引爬取数据，前期使用人工筛选数据，后期通过质量评估模型自动筛选。</p><h4 id="人脸属性识别模型"><a href="#人脸属性识别模型" class="headerlink" title="人脸属性识别模型"></a>人脸属性识别模型</h4><p>大规模数据的采集带来的显著问题就是数据清洗困难，因此需要一个自动化清洗的pipeline，所以建立数据集，训练一个人脸属性分类模型。</p><p><a href="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/%E4%BA%BA%E8%84%B8%E5%B1%9E%E6%80%A7%E6%95%88%E6%9E%9C_211222_selftrained.mp4">模型在测试集上的识别效果</a></p><p><strong>数据标注</strong></p><p>工具基于开源的labelme，为了简化标注流程，采用对半标注的方法，减少标注时间，即<code>female</code> <code>male</code> 两类只需要标注<code>male</code>，其他留空，待标注完毕后对标签数据进行批量处理。</p><p>提供标注文档、标注环境，分批标注，使用小批次数据训练的模型反向标注数据提供给标注组清洗，增加清洗速度，最终总数据量约7.5w。</p><p><strong>训练框架和训练模型</strong></p><p>训练基于 <a href="https://github.com/ykk648/mmclassification/tree/master">mmcls</a>，为了兼顾模型效果和速度，使用512大尺寸输入，mobilenetv3轻量级模型推理，基于开源代码增加了多标签分类训练和推理的支持，标签分为10类，使用0-1代表标签是否选中。</p><p>划分训练集和验证集，data aug上只选择RandomFlip，保留全图人脸信息。</p><h4 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h4><p>以npy格式提供face embedding 信息，基于CurricularFace；</p><p>以npy格式提供face 3d coff信息，基于DeepFace3D;</p><p>使用GPEN GFPGAN DFDNet等face restore方法对数据超分，建立enhance数据集；</p><hr><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="四大工程"><a href="#四大工程" class="headerlink" title="四大工程"></a>四大工程</h4><p>前后迭代了4-5个工程，几十个版本，最终保留的几个工程包括魔改的DFL多阶段训练代码（兼容原DFL功能），SimSwap多路换脸代码（提速），人脸特征提取工程，换脸API。</p><p><strong>DFL多阶段训练代码</strong>（兼容原DFL功能），如上</p><p><strong>SimSwap多路换脸代码</strong>，如上</p><p><strong>人脸特征提取工程</strong>使用先换脸，然后对cheek做特殊处理，从人脸embedding层面避免下巴或者脸型不一致带来的换脸问题；</p><p>支持三种face embedding提取模型，支持web调用，字典存储；</p><p><strong>换脸API</strong>包括开发的不同分支，例如提供给C++的加密代码、离线换脸、实时在线换脸、单人多人锁定换脸等。</p><p>复用一套核心代码，在此基础上增加功能；</p><p>锁定使用人脸embedding 1:N+bbox tracking 实现，double check逻辑，多人脸batch推理；</p><p>经过优化后可以做到1080P下单卡2人实时锁定换脸，其中各个模型batch推理，线程尽可能复用。</p><h4 id="模型推理加速"><a href="#模型推理加速" class="headerlink" title="模型推理加速"></a>模型推理加速</h4><ul><li><p>数值计算加速 numpy&#x2F;numexpr&#x2F;numba （face reverse &#x2F; face tracking）</p></li><li><p>frame smooth，包括landmark等smooth</p></li><li><p>模型推理，在实践中不断确立了pytorch-onnx-tensorrt的方案（后续直接使用编译最新的onnxruntime13 支持在线tensorrt转换）</p></li><li><p>更换更轻量级模型，例如人脸检测使用500M的scrfd模型</p></li><li><p>多线程推理（cv2box）</p></li><li><p>roi pre crop，realtime加速trick</p></li></ul><h4 id="模型加密"><a href="#模型加密" class="headerlink" title="模型加密"></a>模型加密</h4><p>调研了市面上所有加密方案，选用pyarmor加密py代码，通过aes256加密模型，在py代码中对模型解码，打包项目提供接口，由于工程组不会写python和C++的交互，建立了CVQueue（cv2box），完全模拟queue操作，使用sharedmemory来做单PC C++和python不同进程间通信。</p><h4 id="平台支持"><a href="#平台支持" class="headerlink" title="平台支持"></a>平台支持</h4><p>支持linux&#x2F;windows，docker部署，支持wsl2部署，设计了基于RTMP流媒体服务器的换脸服务架构，由于研发部门能力有限无法实现。</p><hr><h3 id="其他工作"><a href="#其他工作" class="headerlink" title="其他工作"></a>其他工作</h3><h4 id="MobileFaceSwap"><a href="#MobileFaceSwap" class="headerlink" title="MobileFaceSwap"></a><a href="https://github.com/Seanseattle/MobileFaceSwap">MobileFaceSwap</a></h4><p>百度出品，目的是一个ID一个模型，通过dw conv和unet减少模型体积，适合边缘设备，进行了网络复现和模型训练。</p><h4 id="FSLSD"><a href="#FSLSD" class="headerlink" title="FSLSD"></a><a href="https://github.com/cnnlstm/FSLSD_HiRes">FSLSD</a></h4><p>基于psp(pixel2style2pixel)和stylegan，通过latent做face swap，效果一般。</p><h4 id="AI-power"><a href="#AI-power" class="headerlink" title="AI_power"></a><a href="https://github.com/ykk648/AI_power">AI_power</a></h4><p>在建立DFL&#x2F;HifiFace&#x2F;Simswap各类换脸pipeline过程中，建立了基于cv2box的多进程方案，发现在不同任务中可以复用模型和进程，于是建立了AI_power工程，将各类AI能力提取，建立API，实现了plug-in的AI模块，在后续换脸&#x2F;人体驱动&#x2F;表情驱动等项目开发中，使用cv2box+AI_power堆积木的方式构建工程，提供一个新功能的pipeline一般只需要1-2天，丰富了公司的AI能力库。</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>DeepFake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人脸识别项目回顾</title>
    <link href="/posts/37381/"/>
    <url>/posts/37381/</url>
    
    <content type="html"><![CDATA[<p>TODO。</p><span id="more"></span><h3 id="全景思维导图"><a href="#全景思维导图" class="headerlink" title="全景思维导图"></a>全景思维导图</h3><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/Face%20Recognition.png"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DeepLearning</tag>
      
      <tag>FaceRecognition</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>量化交易策略第一篇</title>
    <link href="/posts/63056/"/>
    <url>/posts/63056/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>轮动，是最朴素的量化交易策略之一，无论是基于动量、基本面、消息面按照一定周期选择买入标的的策略，都可以归为轮动策略，而其中最经典、最丰富的还是趋势跟踪策略。</p><p>趋势跟踪策略可以简单的理解为动量策略，即确定某种计算趋势的方法，通过这种趋势的度量来对标的进行轮动，关于趋势跟踪策略的有效性，可以阅读石川博石团队的 <a href="https://www.factorwar.com/littlebook/trend-following/">趋势跟踪策略小册子</a> ，基本对国内外、近几十年的趋势跟踪策略的发展做了很好的概述。</p><p>以动量轮动举例，建立一个标的池，隔一段时间买入涨幅最大的标的，就形成了最朴素的动量策略，完全可以使用量化交易实现。</p><p>以上解决了标的选择的问题，但并不是一个完整的策略，我列举了如下问题：</p><ul><li>量化框架&#x2F;代码来源</li><li>数据来源&#x2F;回测时长</li><li>标的&#x2F;标的数量的选择</li><li>标的的仓位控制 （风险溢价？）</li><li>开仓&#x2F;止损时机</li><li>轮动指标 （动量 基本面 因子?）</li><li>轮动周期 （按分钟 按周 按月？）</li><li>策略评价指标 （sharp sortino  SQN 年化 回撤？）</li><li>。。。</li></ul><p>这些问题在过去的几个月，甚至一年时间里一直萦绕在我的脑海里，这一年也是A股下跌的一年，走势基本是对08年的重演，几乎所有的私募基金、公募基金、价值投资、量化策略全部失效，大部分投资者损失惨重。</p><p>不像牛市，试错机会够多，在下跌的市场里，人性被无限放大，一次犹豫造成的损失是惊人的，也因此，我开始重塑自己的投资理念。</p><p>我想现在，终于，阶段性完成了以上任务，无论是否找到了投资的圣经，以上提到的问题我都给出了自己的解答，建立了自己的数据逻辑、代码框架，更重要的是，建立了若干个完整的轮动策略，这些策略我从22年10月份开始实盘，在昨天，22年11月28号开始更新雪球组合。</p><p>路途是艰难的，再次起航，希望能够坚持下去。</p><h2 id="问题的一些答案"><a href="#问题的一些答案" class="headerlink" title="问题的一些答案"></a>问题的一些答案</h2><h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><p>akshare + backtrader </p><p>由于akshare提供的数据只能到日线级别，如果做分钟级回测，需要使用掘金或者tdx的数据</p><h4 id="标的"><a href="#标的" class="headerlink" title="标的"></a>标的</h4><p>ETF、LOF、债券、可转债、公募基金</p><p>股票交易的印花税在长时间看是惊人的，而且随着A股的发展，ETF覆盖了越来越多的概念和行业，LOF和公募基金让散户也拥有了公募视角，天然的低波动性和对散户信息因子缺失的补全，都强于股票。</p><h4 id="轮动周期"><a href="#轮动周期" class="headerlink" title="轮动周期"></a>轮动周期</h4><p>一个月，20个交易日？</p><p>交易周期短，那么佣金和滑点会带来巨幅影响，交易周期长，无法把握行情的变化。A股一周有5个交易日，一个月大约有21个交易日，而且有明显的日历效应，例如春季行情、节前抛售、月底卖出、月初买入等等，对于轮动策略来说，时间节点的选择非常关键，经过我的大量回测，发现不同时间轮动的收益差距非常大。</p><h4 id="策略评价指标"><a href="#策略评价指标" class="headerlink" title="策略评价指标"></a>策略评价指标</h4><p>回撤，还是回撤。</p><p>投资者往往陷入追求交易圣杯的陷阱中不能自拔，例如追求高收益高波动，同时也面临可怕的回撤，人性让你放大了自己的回撤承受能力，而当你觉醒时，为时已晚。</p><p>相对于sharpe，sortino等波动&#x2F;收益评价指标，我更看重策略的回撤历史，最大回撤时间、最大回撤幅度、回撤的原因，以及如何降低回撤。</p><h4 id="平均买入还是控制仓位"><a href="#平均买入还是控制仓位" class="headerlink" title="平均买入还是控制仓位"></a>平均买入还是控制仓位</h4><p>控制仓位，是量化策略的点金石。</p><p>我们都知道，无论是一个最基本的MACD策略，还是动量跟踪策略，直接测试的效果都是很差的，而一旦加入仓位控制，就算是一个抛硬币50%随机买入卖出的策略，也可以取得正收益。</p><p>但如何控制仓位是一个很难的课题，对于高波动标的，如果减少仓位，那么策略的收益会显著下降，如果增加仓位，策略的回撤和波动率会大幅升高。</p><h4 id="如何止损"><a href="#如何止损" class="headerlink" title="如何止损"></a>如何止损</h4><p>止损，是一把双刃剑。</p><p>止损，是账户风险控制的最后一道防线，黑天鹅不可避免，机械止损才能避开大跌，长期来看，一个具备止损的策略可以跑赢任何熊市，当然，也会跑输牛市。</p><p>我选择了机械式的跟踪止损，以及指标性止损，以及大盘牛熊指标的止损。</p><h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><p>目前手里有很多策略，由于还没有实现自动交易，我有精力去实盘的有三个，分别是一个轮动策略的继承，只是标的的选择和部分指标不同。</p><p>后面我会逐步讲解每个策略的基本结构。</p><p>以上。</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Quant</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>airtest/lamda/qinglong自动化实践</title>
    <link href="/posts/7355/"/>
    <url>/posts/7355/</url>
    
    <content type="html"><![CDATA[<p>第一次接触mac os，wda，自动化相关等等。</p><span id="more"></span><h3 id="APP多开"><a href="#APP多开" class="headerlink" title="APP多开"></a>APP多开</h3><p>最终选择的方案 分身大师多开，加magisk重签名 + root hide app所有服务，可以完美多开并避免root检测。</p><p>其他尝试的方案  shelter&#x2F;island&#x2F;apktool逆向重签名</p><h3 id="QingLong"><a href="#QingLong" class="headerlink" title="QingLong"></a>QingLong</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 青龙Aipine依赖</span><br>apk add alpine-sdk autoconf  automake libtool gcc linux-headers<br>pip install lamda airtest pillow numpy tqdm <span class="hljs-comment"># opencv-contrib-python will be installed by airtest</span><br>pip install cv2box --no-dependencies<br><br><span class="hljs-comment"># npm依赖</span><br>jsdom moment ds date-fns @iarna/toml depend ts-md5 png-js axios<br><br><br><span class="hljs-comment"># 拉库</span><br>ql repo https:<span class="hljs-regexp">//gi</span>t.metauniverse-cn.com<span class="hljs-regexp">/https:/</span><span class="hljs-regexp">/github.com/</span>shufflewzc/faker2.git <span class="hljs-string">&quot;jd_|jx_|gua_|jddj_|jdCookie&quot;</span> <span class="hljs-string">&quot;activity|backUp&quot;</span> <span class="hljs-string">&quot;^jd[^_]|USER|function|utils|sendNotify|ZooFaker_Necklace.js|JDJRValidator_|sign_graphics_validate|ql|JDSignValidator|magic|depend|h5sts&quot;</span> <span class="hljs-string">&quot;main&quot;</span><br>ql repo https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/ykk648/</span>autocheck.git <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-string">&quot;scripts_dev|tools&quot;</span> <span class="hljs-string">&quot;images&quot;</span><br>ql repo https:<span class="hljs-regexp">//g</span>hproxy.com<span class="hljs-regexp">/https:/</span><span class="hljs-regexp">/github.com/y</span>kk648/checkinpanel.git <span class="hljs-string">&quot;api_|ck_|ins_&quot;</span> <span class="hljs-string">&quot;^checkin&quot;</span> <span class="hljs-string">&quot;^notify|^utils|cpm&quot;</span> <span class="hljs-string">&quot;master&quot;</span><br><br></code></pre></td></tr></table></figure><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>ios点击速度过慢，先切换到Android开发脚本。</p><h4 id="linux下pycharm搭建环境"><a href="#linux下pycharm搭建环境" class="headerlink" title="linux下pycharm搭建环境"></a>linux下pycharm搭建环境</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install airtest pocoui airtest-selenium<br></code></pre></td></tr></table></figure><h3 id="mac-os-iphone"><a href="#mac-os-iphone" class="headerlink" title="mac os  + iphone"></a>mac os  + iphone</h3><p>系统镜像 mac os 12.3.1 </p><p> vmware tools  vmware需要破解mac安装  <a href="https://github.com/paolo-projects/auto-unlocker">unlocker</a></p><p>vmware 16.2.1</p><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>WebDriverAgent-4.5.1</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 注册苹果开发者</span><br>https://developer.apple.com/account/<br><br><span class="hljs-comment"># install brew  途中安装git https://sourceforge.net/projects/git-osx-installer</span><br>/bin/zsh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span><br><span class="hljs-comment">#1、安装nodejs</span><br>brew install nodejs<br><span class="hljs-comment">#2、再执行下面命令来安装npm(npm是开发nodejs时所用的依赖库)</span><br>brew install npm<br></code></pre></td></tr></table></figure><p>连接真机，vmware设置为usb2.0，如失误多插拔重启，偶尔成功</p><p>xcode编译 <a href="https://blog.csdn.net/weixin_41765699/article/details/124322812">参考一</a>  <a href="https://blog.csdn.net/qq_41030861/article/details/110528139">参考二</a>， 注意修改bundle identifier</p><p><strong>放弃了，iphone反应速度慢，等待<a href="https://github.com/AirtestProject/iOS-Tagent">ios-tagent</a>支持ios15.5再测试， 先切换到Android了</strong></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ios</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阅读论文笔记合集-2022</title>
    <link href="/posts/65394/"/>
    <url>/posts/65394/</url>
    
    <content type="html"><![CDATA[<p>2022年论文阅读笔记合集</p><span id="more"></span><h3 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h3><h4 id="ConvNeXt"><a href="#ConvNeXt" class="headerlink" title="ConvNeXt"></a>ConvNeXt</h4><p>基于ResNet50，仿照Swin Transformer进行网络结构和trick的修改，使得conv结构再次超越transformer结构，证明ViT的精度提升大部分来自于更现代的trick，而非来自于transformer本身。</p><p>核心理论是conv可以替代transformer结构，自注意力可以被dw conv替代。</p><p>但是7*7的卷积在边缘设备（轻量级模型）上不友好，同时transformer中的MHSA(multi head self-attention)在INT8量化中不友好，所以实际上今年conv和transformer的改进对工业界影响都很有限，更多的变成了一个google和meta堆卡的比赛。</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220113103915565.png"></p><hr><h3 id="Hand-Estimate"><a href="#Hand-Estimate" class="headerlink" title="Hand Estimate"></a>Hand Estimate</h3><h4 id="MANO"><a href="#MANO" class="headerlink" title="MANO"></a>MANO</h4><hr><h3 id="Image-Generate"><a href="#Image-Generate" class="headerlink" title="Image Generate"></a>Image Generate</h3><h4 id="DaGAN"><a href="#DaGAN" class="headerlink" title="DaGAN"></a>DaGAN</h4><p>自监督训练人脸深度网络，使用该模型指导精准人脸关键点提取，利用人脸关键点、深度网络，做多模态注意力机制</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220422105939843.png" alt="image-20220422105939843"></p><hr><h3 id="ViT-Transfomer"><a href="#ViT-Transfomer" class="headerlink" title="ViT Transfomer"></a>ViT Transfomer</h3><h4 id="MAE"><a href="#MAE" class="headerlink" title="MAE"></a>MAE</h4><p>何凯明，基于ViT思想，仿照BERT的完形填空思路，提出一种简单的masked autoencoder，使用非对称的encoder-decoder结构，通过对image进行shuffle mask，encoder学习可见区域，decoder对图像进行重建，作为自监督预训练模型，作为预训练的backbone在下游任务取得好的效果。</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220107143727824.png"></p><p>对预训练模型采用finetune和linear probing(最后一层)两种方式，finetune的效果更好，一个反常识的地方是采用高达75%的mask ratio，认为图片信息的冗余很大，增大mask ratio可以强迫ViT学习图像的抽象信息。</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220107150435778.png"></p><hr><h3 id="3D-Human-Digitization"><a href="#3D-Human-Digitization" class="headerlink" title="3D Human Digitization"></a>3D Human Digitization</h3><p><a href="https://blog.csdn.net/chenguowen21/article/details/82793994">SMPL</a>   <a href="https://www.jianshu.com/p/f594850b8467">FPN U-NET FCN对比</a></p><h4 id="DATASET"><a href="#DATASET" class="headerlink" title="DATASET"></a>DATASET</h4><p>body pose <a href="http://sam.johnson.io/research/lsp.html">LSP</a>  <a href="https://virtualhumans.mpi-inf.mpg.de/3DPW/evaluation.html">3DPW</a>  <a href="http://vcai.mpi-inf.mpg.de/3dhp-dataset/">3DHP</a></p><p>hand pose <a href="https://lmb.informatik.uni-freiburg.de/resources/datasets/FreihandDataset.en.html">Freihand</a> <a href="https://www.tugraz.at/institute/icg/research/team-lepetit/research-projects/hand-object-3d-pose-annotation/">HO-3D</a> <a href="http://domedb.perception.cs.cmu.edu/mtc.html">MTC</a>  <a href="https://github.com/zhjwustc/icip17_stereo_hand_pose_dataset">STD stereo hand pose tracking</a> <a href="https://lmb.informatik.uni-freiburg.de/resources/datasets/RenderedHandposeDataset.en.html">RHD</a> <a href="http://human-pose.mpi-inf.mpg.de/#download">MPII</a></p><h4 id="Mesh-Graphormer"><a href="#Mesh-Graphormer" class="headerlink" title="Mesh Graphormer"></a>Mesh Graphormer</h4><p>结合GCNN+Transformer，利用HRNet提取grid feature，然后利用graphormer encoder提取出3D joints和vertices（SMPL 6890）</p><p>其中在hm36等数据上预训练，在3DPW上面finetune的模型效果最好（EXP）</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220314152311481.png" alt="image-20220314152311481"></p><h4 id="ROMP"><a href="#ROMP" class="headerlink" title="ROMP"></a>ROMP</h4><p>one shot 单目多人3D mesh回归，三个head同时回归出body center ，camera map和SMPL map,</p><p>提出CAR（Collision-Aware Representation）解决歧义问题，使得人体中心能够分开</p><p>loss包括body center loss和mesh parameter loss，</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220114114706232.png"></p><h4 id="Mediapipe-Hands"><a href="#Mediapipe-Hands" class="headerlink" title="Mediapipe Hands"></a>Mediapipe Hands</h4><p>分为两个stage，第一个阶段使用palm detector（FPN结构），原因更好检测，并且正方形可以减少anchor数量，数据上除了wild数据还构建了不同光影和背景的仿真数据：</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220210145237180.png" alt="image-20220210145237180"></p><p>第二部分是hand landmark model，提供21点x,y,z，以及手部出现概率和左右手分类结果，</p><p>手部出现概率用于重置tracking状态（tracking也是mediapipe提速的利器）</p><h4 id="FrankMoCap"><a href="#FrankMoCap" class="headerlink" title="FrankMoCap"></a>FrankMoCap</h4><h4 id="MocapNETs"><a href="#MocapNETs" class="headerlink" title="MocapNETs"></a>MocapNETs</h4><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220228162725575.png" alt="image-20220228162725575"></p><p>基于mocapnetv1和v2，先回归2D joints，然后回归到3D BVH文件</p><p>基于NSRM方式改进为eNSRM，用于表示全身关键点的旋转矩阵</p><p>运动优化使用 Hierarchical Coordinate Descen（HCD）方法</p><p>用到的数据集包括  手语数据集<a href="https://www.phonetik.uni-muenchen.de/forschung/Bas/SIGNUM/">SIGNUM</a> 运动图片 <a href="http://sam.johnson.io/research/lsp.html">Leeds Sport Dataset </a>  <a href="https://github.com/zhjwustc/icip17_stereo_hand_pose_dataset">STB已失效</a></p><h4 id="imGHUM"><a href="#imGHUM" class="headerlink" title="imGHUM"></a>imGHUM</h4><p>google实现的，第一个同时回归全身pose和shape的模型，模型可以学术申请</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220228164644345.png" alt="image-20220228164644345"></p><h4 id="S2HAND"><a href="#S2HAND" class="headerlink" title="S2HAND"></a>S2HAND</h4><p>利用mano模型回归3d信息，然后3d映射2d，利用标注的2d joints进行监督训练。</p><p>同时额外训练一个2d joints回归分支，辅助监督；一个render图片loss辅助监督</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220318102612323.png" alt="image-20220318102612323"></p><h4 id="HMR"><a href="#HMR" class="headerlink" title="HMR"></a>HMR</h4><p>CNN+SMPL，使用2D进行监督，辅助一个Discriminator分支</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220322113548990.png" alt="image-20220322113548990"></p><hr><h3 id="Physics-based-Human-Motion-Estimation"><a href="#Physics-based-Human-Motion-Estimation" class="headerlink" title="Physics-based Human Motion Estimation"></a>Physics-based Human Motion Estimation</h3><p>通过运动学优化方法构建pose estimation的训练集，来代替实际动捕数据。</p><p>代码未开源，实际效果较好。</p><p><strong>loss：</strong></p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220207161720461.png" alt="image-20220207161720461"></p><p>针对约40s的视频序列，做离线处理，其中pose是常见的姿态估计loss，smooth使用kinematic acceleration penalty使运动流畅</p><p>physics物理优化loss包括三个部分： </p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220207161743207.png" alt="image-20220207161743207"></p><p>通过inverse dynamics计算的广义力与实际力相似：  </p><p>广义力 &#x3D; 关节内力 + 地面接触力</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220207161754416.png" alt="image-20220207161754416"></p><p>在脚与地面接触时，每个接触点要尽可能接近地面：</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220207161816222.png" alt="image-20220207161816222"></p><p>穿透地面的惩罚：</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220207161832527.png" alt="image-20220207161832527"></p><p>预先提供了人体序列坐标和接触力ft^c（其中地面接触力可能是标注获得）</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Essays</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阅读论文笔记合集-2021</title>
    <link href="/posts/65074/"/>
    <url>/posts/65074/</url>
    
    <content type="html"><![CDATA[<p>2021年论文阅读笔记合集</p><span id="more"></span><p><a href="https://blog.csdn.net/TracelessLe/article/details/106593425">normalization</a></p><h3 id="Face-Swap"><a href="#Face-Swap" class="headerlink" title="Face Swap"></a>Face Swap</h3><h4 id="FSGAN"><a href="#FSGAN" class="headerlink" title="FSGAN"></a>FSGAN</h4><p>paper：</p><p><a href="https://arxiv.org/pdf/1908.05932.pdf">https://arxiv.org/pdf/1908.05932.pdf</a></p><p>官方repo：</p><p><a href="https://github.com/YuvalNirkin/fsgan"> https://github.com/YuvalNirkin/fsgan</a></p><hr><h4 id="Disney高清换脸"><a href="#Disney高清换脸" class="headerlink" title="Disney高清换脸"></a>Disney高清换脸</h4><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2022-01-05T11-27-25.197Z.png"></p><hr><h4 id="InfoSwap"><a href="#InfoSwap" class="headerlink" title="InfoSwap"></a>InfoSwap</h4><p>Information Bottleneck Disentanglement for Identity Swapping</p><p>paper: <a href="https://openaccess.thecvf.com/content/CVPR2021/papers/Gao_Information_Bottleneck_Disentanglement_for_Identity_Swapping_CVPR_2021_paper.pdf">https://openaccess.thecvf.com/content/CVPR2021/papers/Gao_Information_Bottleneck_Disentanglement_for_Identity_Swapping_CVPR_2021_paper.pdf</a></p><p>codes: <a href="https://github.com/GGGHSL/InfoSwap-master">https://github.com/GGGHSL/InfoSwap-master</a></p><p>两点创新，一是 将<a href="http://192.168.6.167:8090/display/CV/IBA">IBA</a>引入到arcface网络中：</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image2021-12-20_11-19-10.png"></p><p>第二个是在计算IBA提取的feature loss的时候，不仅让output src cos距离最小，还让output target cos距离变大</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220105192351796.png"></p><hr><h4 id="ShapeEditer"><a href="#ShapeEditer" class="headerlink" title="ShapeEditer"></a>ShapeEditer</h4><p>基于stylegan2，arcface提取id特征，pspnet提取attr特征，映射到latent，使用stylegan2生成图片</p><p>优点： 生成图片的分辨率达到1024*1024</p><p>缺点：不像<img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220110175953700.png"></p><hr><h4 id="FaceShifter"><a href="#FaceShifter" class="headerlink" title="FaceShifter"></a>FaceShifter</h4><p>SPatially-Adaptive (DE) normalization（SPADE）</p><p>adaptive embedding integration networ &#x2F; AEI</p><p>adaptive attentional denormalization generator &#x2F; AAD</p><p>参考AdaIN SPADE 利用denormalizion 在multi feature layer 做feature integration<img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220110175646046.png"></p><p>loss:</p><ul><li>reconstruction loss</li><li>adversarial loss</li><li>attribute loss  (multi level) </li><li>identity loss</li></ul><hr><h4 id="HifiFace"><a href="#HifiFace" class="headerlink" title="HifiFace"></a>HifiFace</h4><p>复现效果可以，3D特征使用deep3dfacerecon，人脸特征使用curricularface, mask使用HRNet</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220110165703904.png"></p><p>预处理上，训练集VGGFace2，使用人脸特征+3D特征，其中3D特征使用其中的表情和动作，人脸特征使用</p><p>训练中，分为低分辨率和高分辨率两个分支，低分辨率使用1&#x2F;4 feature size，方便身份和属性解耦，</p><p>同时SFF（semantic facial fusion module）会预测mask，解决遮挡和面部边缘融合问题</p><p>loss上，shape loss &#x2F; id loss &#x2F; segmentation loss &#x2F; reconstruction loss &#x2F; cycle loss &#x2F; lpips loss</p><hr><h3 id="Super-Resolution"><a href="#Super-Resolution" class="headerlink" title="Super Resolution"></a>Super Resolution</h3><p><a href="https://zhuanlan.zhihu.com/p/50757421">PSNR SSIM </a>   <a href="https://www.cnblogs.com/wxl845235800/p/7692788.html">ringing artifacts&#x2F;sinc&#x2F; </a>   <a href="https://zhuanlan.zhihu.com/p/63957812">spectral normalization </a> <a href="https://blog.csdn.net/u013043762/article/details/115908872">FID</a></p><hr><h4 id="ESRGAN-amp-Real-ESRGAN"><a href="#ESRGAN-amp-Real-ESRGAN" class="headerlink" title="ESRGAN &amp; Real-ESRGAN"></a>ESRGAN &amp; Real-ESRGAN</h4><p>   <strong>ESRGAN</strong> 整体基于SRGAN改进</p><ol><li><p><strong>RDDB</strong>结构，去掉residual block中的BN，使用dense block结构增加大量连接</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220106155628246.png"></p></li><li><p><strong>Relativistic Discriminator</strong> 相对鉴别器</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220106160004355.png"></p></li><li><p><strong>Perceptual Loss</strong> 感知损失，移到激活前，解决激活后特征稀疏导致的亮度问题</p></li><li><p><strong>Network Interpolation</strong> 网络插值，先训练一个基于PSNR的模型，然后在GAN上finetune，二者结合</p></li></ol><hr><p><strong>Real-ESRGAN</strong> 基于ESRGAN</p><ol><li><p>通过2-stage的image degradation来构建训练集</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220106165326026.png"></p></li><li><p>通过在first order和second order中加入sinc filter来模拟ringing artifact&#x2F;overshoot 现象</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220106165446004.png"></p></li><li><p>pixel unshuffle操作，来解决1x 2x的放大问题</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220106170120869.png"></p></li><li><p>鉴别器替换为U-Net，加入spectral normalization ，使鉴别器满足1-Lipschitz条件，使生成器梯度不会消失</p></li></ol><hr><h4 id="GFPGAN"><a href="#GFPGAN" class="headerlink" title="GFPGAN"></a>GFPGAN</h4><p>出自腾讯，复现效果较真实</p><ol><li>使用U-net构建一个degration removal模块，连接预训练StyleGAN2模型，分别使用latent和channal split SFT（Spatial Feature Transform）连接。<img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220107112159180.png"></li><li>训练数据使用FFHQ做退化生成，测试集使用合成开源数据（应该加入了私有数据)</li><li>三个loss如图，加强了五官loss，增加identity loss</li></ol><hr><h4 id="GPEN"><a href="#GPEN" class="headerlink" title="GPEN"></a>GPEN</h4><p>出自阿里，定义BFR（blind face restoration）问题，复现效果色彩略微失真</p><p>先训练一个能生成高清人脸的GAN（FFHQ），然后把这个预训练的GAN嵌入到一个UNet结构中，作为它的解码器部分，这之后，整个网络再通过人工降质的数据对来进行微调训练。</p><p>在质量评估中使用了PSNR FID LPIPS</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220107112816853.png"></p><hr><h4 id="DFDNet"><a href="#DFDNet" class="headerlink" title="DFDNet"></a>DFDNet</h4><p>类似查找匹配，先用大量数据训练多尺度的component字典，然后使用这些字典训练DFT结构，中间提出CAdaIN（component AdaIN）.</p><p>实测效果较好，但是生成痕迹明显，同时由于需要对五官做align，速度非常慢。</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220107114403024.png"></p><hr><h3 id="ViT-Transformer"><a href="#ViT-Transformer" class="headerlink" title="ViT Transformer"></a>ViT Transformer</h3><h4 id="ViT"><a href="#ViT" class="headerlink" title="ViT"></a>ViT</h4><p>google brain.</p><p>ViT的基本思想： 将图片划分为固定尺寸patch，拉平后增加position embedding（代表位置信息），经过transfomer encoder和MLP head（Transfomer结构），</p><p>注意额外使用一个class token（learnable embedding ）表示分类结果，避免对某个patch的偏重</p><p>优势： transfomer的跨模态能力，GPU友好，适合大规模计算，计算力上限高于CNN</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220107151841306.png"></p><hr><h4 id="Token-Labeling"><a href="#Token-Labeling" class="headerlink" title="Token Labeling"></a>Token Labeling</h4><p>起名LV-ViT，基于ViT，除了class对class token的监督以外，还引入了一个额外的score map对每个token进行监督，这个额外的source map来自另一个训练好的网络。</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220107152029775.png"></p><hr><h4 id="Tokens-to-Token-ViT"><a href="#Tokens-to-Token-ViT" class="headerlink" title="Tokens-to-Token ViT"></a>Tokens-to-Token ViT</h4><p>来自依图</p><p>基于ViT, 解决了ViT token长度一样和计算量大的问题， 思路是在ViT前面增加T2T结构，通过soft split + Unfold操作渐进式减少token的长度：</p><p>soft split: 在将图片切分成patch的时候，进行overlap，建立一个先验，即距离近的patch更相关</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220107152147049.png"></p><p>和ViT相比计算量下降明显，在<a href="https://paperswithcode.com/sota/image-classification-on-imagenet">Imagenet</a>上面仍然能达到SOTA</p><p>在T2T结构的选择上，对比了五种结构，最终选择使用deep narrow的结构：</p><ol><li><p>Dense connection as DenseNet [21];</p></li><li><p>Deep-narrow vs. shallow-wide structure as in Wide-ResNets [52];</p></li><li><p>Channel attention as Squeeze-an-Excitation (SE) Net-works [20];</p></li><li><p>More split heads in multi-head attention layer asResNeXt [44];</p></li><li><p>Ghost operations as GhostNet [14]</p></li></ol><p>此外，T2T可以使用Performer代替Transformer以降低GPU占用 （Rethinking transformer based set prediction for object detection）</p><hr><h4 id="Attention-is-all-you-need"><a href="#Attention-is-all-you-need" class="headerlink" title="Attention is all you need"></a>Attention is all you need</h4><p>用于机器翻译，保持encoder-decoder结构，完全抛弃rnn和cnn，使用transformer架构</p><p>提出self-attention，包括query key value，由三个不同的权值矩阵得到</p><p>提出multi head attention，等于多个self-attention的ensemble</p><p>引入位置编码(position embedding)</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220111095625685.png"></p><hr><h3 id="3D-Face-Reconstruction"><a href="#3D-Face-Reconstruction" class="headerlink" title="3D Face Reconstruction"></a>3D Face Reconstruction</h3><p><a href="https://www.jianshu.com/p/d2fb5b8147ca">3DMM</a>(3D morphable models )三维可变形人脸模型，每张脸表现为texture和shape的叠加，</p><p>基于传统方法model fit构建数据训练3DMM CNN，</p><h4 id="3DDFA-amp-3DDFA-V2"><a href="#3DDFA-amp-3DDFA-V2" class="headerlink" title="3DDFA &amp; 3DDFA_V2"></a>3DDFA &amp; 3DDFA_V2</h4><p>3DDFA(3D Dense Face Alignment) 使用PNNC(Projected Normalized Coordinate Code) 作为特征预测，而PRNet使用UV</p><p>提出PAC(pose adaptive convolution),在语义一致性位置进行卷积</p><p>loss上分为参数距离（parameter distance cost）和顶点距离（vertex distance cost）,一个最小化参数误差，一个最小化顶点距离，提高3DMM形变能力</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220111111909095.png"></p><p>此外提出对训练数据大角度的增强，构建大姿态人脸库来训练模型</p><p>3DDFA_V2，针对3DDFA进行了提速，主要包括三点：</p><ul><li>landmark-regression regularization 加速拟合</li><li>mata-joint optimization 动态组合loss，加速拟合</li><li>3d aided short-video-synthesis 使用静止图片生成短视频训练数据，提高video上的对齐效果</li></ul><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220111113843858.png"></p><h4 id="DECA"><a href="#DECA" class="headerlink" title="DECA"></a>DECA</h4><p><a href="https://flame.is.tue.mpg.de/">FLAME</a></p><p>DECA模型分为粗糙的人脸重建Ec（resnet50构成）,精细的人脸重建Ed。具体的Ec包括了相机c，反射率ɑ，光照l，形状β，姿态θ，表情Ψ。Ed包括了细节δ。</p><p>粗糙模型的损失包括了人脸关键点的损失 Llmk，眼睛闭合的损失 Leye，基于照片的损失 Lpho，ID损失 Lid，形状连续损失 Lsc，正则化损失 Lreg。</p><p>精细的人脸重建损失，包含了照片细节损失 LphoD， ID-MRF损失 Lmrf，软对称性损失 Lsym，细节正则化损失 LregD。</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220111140747470.png"></p><h4 id="Deep3DFaceRecon"><a href="#Deep3DFaceRecon" class="headerlink" title="Deep3DFaceRecon"></a>Deep3DFaceRecon</h4><p>对R-Net提取的人脸相关系数进行重建，加入identity loss（arcface），引入光度损失（robust photometric loss）和关键点损失（landmark location loss），</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220111141426885.png"></p><hr><h4 id="Detailed3DFace"><a href="#Detailed3DFace" class="headerlink" title="Detailed3DFace"></a>Detailed3DFace</h4><p>首先提供一个<a href="https://facescape.nju.edu.cn/Page_Data/">数据集</a></p><p>包含120G , TU models（938ID*20expression）和bilinear model</p><p>一个生成detail 3D face的demo,没有开源landmark检测器，代码中使用dlib替代</p><p>预测置换贴图（displacement map）使用pix2pixHD结构，使用dynamic details synthesis结合19个关键表情预测细节</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220111143916975.png"></p><p>使用<a href="https://github.com/yanght321/Detailed3DFace">Detailed3DFace</a> 可以获得：</p><p>一份半脸obj，一张UV贴图，一张对应的displacement map，20张其他表情的displacement map，和简单重建结果</p><p>使用zbrush重建结果：</p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220111142851054.png" style="max-width: 30%;" /><hr><h4 id="帝国理工组"><a href="#帝国理工组" class="headerlink" title="帝国理工组"></a>帝国理工组</h4><p><strong>基础</strong></p><p>3D模态（3D modalities） 包括 texture shape normals(法线) expression</p><p>帝国理工的<strong>LSFM</strong> <a href="https://github.com/menpo/lsfm">https://github.com/menpo/lsfm</a> ， 中提到了<strong>MeIn3D</strong>数据集，包含10000张人脸，数据无法下载，参考<a href="https://github.com/menpo/lsfm/issues/27">https://github.com/menpo/lsfm/issues/27</a></p><p><strong>CFHM</strong> Combining 3d morphable models: A large scale face-and-head model 2019  一种人脸和人头大规模模型</p><p><strong>MICC</strong> 53个人头数据 <a href="http://www.micc.unifi.it/vim/3dfaces-dataset/index.html#!prettyPhoto">http://www.micc.unifi.it/vim/3dfaces-dataset/index.html#!prettyPhoto</a></p><h5 id="TBGAN"><a href="#TBGAN" class="headerlink" title="TBGAN"></a>TBGAN</h5><p>创新点： 提出一种trunk-branch architecture(主干分支结构)，生成将texture和geometry耦合在一起的人脸</p><p>使用MeIn3D数据集， 将shape texture normals所有数据在UV平面对齐，以便输入GAN网络，增加一个表情识别网络，以操纵生成人脸的表情，基于CFHM将面部映射到头部</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220112143606102.png"></p><h5 id="GANFit-amp-Fast-GANFit"><a href="#GANFit-amp-Fast-GANFit" class="headerlink" title="GANFit &amp; Fast-GANFit"></a>GANFit &amp; Fast-GANFit</h5><p>已经商业化，不会开源</p><p>其中ps和pe与3DMM一致，pt是由人脸latent提取UV map的网络，也就是shape使用3dmm，texture使用GAN生成，</p><p>加入一些loss保证GAN的生成质量，包括identity loss &#x2F; content loss &#x2F; pixel loss &#x2F; landmark loss</p><p>最终结果使用MICC数据集评价</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220112144643819.png"></p><h5 id="OSTeC"><a href="#OSTeC" class="headerlink" title="OSTeC"></a>OSTeC</h5><p>为了解决3d数据难以采集的问题，用2D生成器生成多角度的2D图片，然后构建3D数据集，用于训练3DMM</p><p>模型开源，需要申请</p><p>图片生成使用stylegan2，loss包括photometric loss(光度损失)，identity loss, perceptual loss(感知损失), landmark loss， 渐进式生成纹理，最终stitching成一个UV map</p><p>能够达到GANFit的水平（10000张真实3d数据）：</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220112144738247.png"></p><h5 id="AvatarMe-amp-AvatarMe"><a href="#AvatarMe-amp-AvatarMe" class="headerlink" title="AvatarMe &amp; AvatarMe++"></a>AvatarMe &amp; AvatarMe++</h5><p>用于实现 accurate facial skin diffuse and specular reflection,  self-occlusion and subsurface scattering approximation  （准确的面部皮肤漫反射和镜面反射、自遮挡和次表面散射近似）</p><p>先使用3dmm推理图片获得shape texture normals，然后进行超分获得高分辨率uv map，使用网络转换为4类漫反射 镜面反射 等贴图，进行光源渲染，然后计算loss</p><p>结果可以很好的使用任意图片进行3d重建，同时生成不同的光源渲染：</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220112144827024.png"></p><h3 id="3D-Human-Digitization"><a href="#3D-Human-Digitization" class="headerlink" title="3D Human Digitization"></a>3D Human Digitization</h3><p><a href="https://github.com/digital-standard/ThreeDPoseTracker">TDPT</a></p><h4 id="Contact-Human-Dynamics"><a href="#Contact-Human-Dynamics" class="headerlink" title="Contact Human Dynamics"></a>Contact Human Dynamics</h4><p>基于openpose和MTC（Monocular Total Capture），分别提2D和3D pose，使用运动估计，对姿态和脚贴地有更好的支持。</p><p>其中运动学优化使用<a href="https://github.com/ethz-adrl/towr">Towr</a></p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220119150733562.png"></p><hr><h4 id="HuMoR"><a href="#HuMoR" class="headerlink" title="HuMoR"></a>HuMoR</h4><p>与contact human dynamics师出同门，第一篇contact human是用towr做运动学优化，第二篇humor提出了CVAE（conditional variational autoencoder）方法，是用编解码器去预测前后帧的运动学参数。</p><p>humor优化分 3 个阶段进行，第 1 和第 2 阶段是使用姿势先验和平滑（即 <a href="https://github.com/nghorbani/human_body_prior">VPoser-t 基线</a>）进行初始化，第 3 阶段是使用 HuMoR 运动先验进行全面优化。</p><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220119151139829.png"></p><hr><h4 id="DeepMotion"><a href="#DeepMotion" class="headerlink" title="DeepMotion"></a>DeepMotion</h4><p>阅读deepmotion的API文档，发现提到<strong>poseEstimation.footLockingMode</strong>，很显然是对脚部锁定增加了额外选项</p><p><a href="https://github.com/DeepMotion/Animate-3D-REST-API">https://github.com/DeepMotion/Animate-3D-REST-API</a></p><p>参考deepmotion官网，deepmotion的运动学计算主要由motion brain完成，在英特尔宣传片中提到motion brain使用英特尔CPU加速技术进行优化，应该是运动学优化，和GPU无关</p><p><a href="https://www.deepmotion.com/ai-motion-brain">https://www.deepmotion.com/ai-motion-brain</a></p><p><a href="https://www.youtube.com/watch?v=3acpP_WfqJY&amp;t=32s">https://www.youtube.com/watch?v=3acpP_WfqJY&amp;t=32s</a></p><p>在deepmotion演示视频中看到pose estimation一样非常抖动</p><p><a href="https://www.youtube.com/watch?v=Edia1conVAY">https://www.youtube.com/watch?v=Edia1conVAY</a></p><p>deepmotion也在做移动端适配工作，提到三步骤：constructs 3D human motion + physically simulates the result + retargets the  motion to a desired character rig</p><p>Optimized for both speed and  footprint on PC and mobile, our industry leading Body Tracking &amp;  Interaction SDK constructs 3D human motion, physically simulates the  result, and retargets the motion to a desired character rig - all at  run-time. Available for Windows, Linux, and mobile platforms.</p><p><a href="https://www.deepmotion.com/3d-body-tracking">https://www.deepmotion.com/3d-body-tracking</a></p><p>查阅发现UE4本身在17年就出现了foot locking插件</p><p><a href="https://www.youtube.com/watch?v=uqsXmH4KBls">https://www.youtube.com/watch?v=uqsXmH4KBls</a></p><p><a href="https://www.unrealengine.com/marketplace/en-US/product/advanced-locomotion-system-v1">https://www.unrealengine.com/marketplace/en-US/product/advanced-locomotion-system-v1</a></p><p>使用locomotion做动画的实践</p><p>[<a href="https://thousun.github.io/2021/07/24/No.%20002%20Advanced%20locomotion%E6%8B%86%E8%A7%A3%E2%80%94P1.ABP/]">https://thousun.github.io/2021/07/24/No.%20002%20Advanced%20locomotion%E6%8B%86%E8%A7%A3%E2%80%94P1.ABP/]</a>(<a href="https://thousun.github.io/2021/07/24/No">https://thousun.github.io/2021/07/24/No</a>. 002 Advanced locomotion拆解—P1.ABP&#x2F;)</p><p>查看最新版本的animate 3D更新日志：</p><ul><li><strong>Improved Ground Motions:</strong> Animation quality will see an improvement for ground motions that involve weight on hands, feet and other joints.</li><li><strong>Improved Ground Contact:</strong> General overall improved animation quality for limb ground contact and anti-tilting.</li><li><strong>Improved Tracking of Slower Movements:</strong> Real-time motions that are slower will see improved tracking.</li></ul><p>通过对手 脚 关节重量的调整，优化了接地动作</p><p>提升身体各部分的接地质量</p><p><a href="https://blog.deepmotion.com/2021/10/22/v34/">https://blog.deepmotion.com/2021/10/22/v34/</a></p><p>猜测deepmotion的离线处理主要由pose estimation + motion brain，motion brain的运动学优化与locomotion类似，需要大量cpu算力，并且无法做到实时</p><p>不排除在这个运动学优化的过程中，deepmotion增加了深度学习替代某些环节</p><p>最新推出的移动端应该进行了优化或者阉割，或者将某些计算步骤上云</p><hr><h4 id="PIFuHD-amp-MonoPort-amp-NeuralBody"><a href="#PIFuHD-amp-MonoPort-amp-NeuralBody" class="headerlink" title="PIFuHD &amp; MonoPort &amp; NeuralBody"></a>PIFuHD &amp; MonoPort &amp; NeuralBody</h4><p>思路很好，但one-shot做人体3D重建，效果太差了。</p><ul><li>之前的pifu最大输入尺寸限制到512<em>512，pifuhd将输入尺寸提高到1024</em>1024</li><li>分为两个level，一个level是1024降采样到512，提取128分辨率的特征；另一个fine level，输入1024，提取512分辨率的特征</li></ul><p><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/image-20220119152835967.png"></p><hr>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Essays</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>confluence安装记录</title>
    <link href="/posts/42935/"/>
    <url>/posts/42935/</url>
    
    <content type="html"><![CDATA[<p>Confluence是世界上最好的wiki。</p><span id="more"></span><h4 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装java</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf openjdk-8u40-b25-linux-x64-10_feb_2015.tar.gz<br>sudo mkdir /usr/lib/jvm<br>sudo mv java-se-8u40-ri /usr/lib/jvm/java-8-oracle<br>sudo ln -sv /usr/lib/jvm/java-8-oracle/jre/bin/java /usr/bin/<br>java -version<br></code></pre></td></tr></table></figure><h4 id="安装confluence"><a href="#安装confluence" class="headerlink" title="安装confluence"></a>安装confluence</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> +x atlassian-confluence-<span class="hljs-number">7</span>.<span class="hljs-number">4</span>.<span class="hljs-number">6</span>-x<span class="hljs-number">64</span>.bin<br><span class="hljs-attribute">sudo</span> ./atlassian-confluence-<span class="hljs-number">7</span>.<span class="hljs-number">4</span>.<span class="hljs-number">6</span>-x<span class="hljs-number">64</span>.bin<br></code></pre></td></tr></table></figure><h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><p>开启confluence服务，访问<a href="http://localhost:8090/">http://localhost:8090</a>, 获取服务器ID</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">java -jar confluence_keygen.jar <span class="hljs-comment"># BTZ0-2B66-GD4Y-BLLJ</span><br><br>sudo mv /opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar atlassian-extras-2.4.jar<br><br><span class="hljs-comment"># 获取授权码后</span><br>sudo mv atlassian-extras-2.4.jar /opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar<br>sudo service confluence restart<br><span class="hljs-comment"># 填写授权码</span><br>tar -zxvf mysql-connector-java-5.1.46.tar.gz<br>sudo mv ./mysql-connector-java-5.1.46/mysql-connector-java-5.1.46-bin.jar /opt/atlassian/confluence/confluence/WEB-INF/lib/mysql-connector-java-5.1.46-bin.jar<br>sudo service confluence restart<br></code></pre></td></tr></table></figure><h4 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h4><p><a href="https://confluence.atlassian.com/doc/database-setup-for-mysql-128747.html">confluence官方</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get update<br>sudo apt-get install mysql-server<br><br>sudo cat /etc/mysql/debian.cnf<br>mysql -udebian-sys-maint -pxxx<br><br><span class="hljs-comment"># 修改密码 </span><br>show databases;<br>use mysql;<br>flush privileges;<br>UPDATE user SET authentication_string=<span class="hljs-string">&quot;&quot;</span> WHERE user=<span class="hljs-string">&quot;root&quot;</span>;<br>flush privileges;<br>ALTER user <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;Ycm@123nihao&#x27;</span>;<br>quit;<br><br><span class="hljs-comment"># 解决localhost root无法登陆的问题</span><br>sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf <span class="hljs-comment"># 加入skip-grant-tables</span><br>mysql -uroot -p<br><span class="hljs-built_in">set</span> host = <span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-built_in">where</span> user = <span class="hljs-string">&#x27;root&#x27;</span>;<br>update user <span class="hljs-built_in">set</span> host = <span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-built_in">where</span> user = <span class="hljs-string">&#x27;root&#x27;</span>;<br><br><br><span class="hljs-comment"># 建表</span><br>mysql&gt; <br>CREATE DATABASE confluence CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;<br>SET GLOBAL tx_isolation=<span class="hljs-string">&#x27;READ-COMMITTED&#x27;</span>;<br><span class="hljs-comment"># mysql8.0创建用户必须分两步</span><br>create user <span class="hljs-string">&#x27;confluence&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br>grant all privileges on *.* to <span class="hljs-string">&#x27;confluence&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> with grant option;<br>FLUSH PRIVILEGES;<br><br><span class="hljs-comment"># error (&#x27;mysql.infoschema&#x27;@&#x27;localhost&#x27;) does not exist</span><br>mysql&gt; <br>DROP USER <span class="hljs-string">&#x27;mysql.infoschema&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br>CREATE USER <span class="hljs-string">&#x27;mysql.infoschema&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;password&#x27;</span>;<br>GRANT SELECT ON *.* TO `mysql.infoschema`@`localhost`;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Confluence</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>numpy的tips合集</title>
    <link href="/posts/32080/"/>
    <url>/posts/32080/</url>
    
    <content type="html"><![CDATA[<p>整理使用numpy遇到的问题，后续可能加入其他科学计算库。</p><span id="more"></span><h4 id="bool与np-bool"><a href="#bool与np-bool" class="headerlink" title="bool与np.bool_"></a>bool与np.bool_</h4><p>在输出json时遇到json不认识numpy的bool_，需要做一个bool的强制转换，此外json中null &#x3D; None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">arr=np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(arr[<span class="hljs-number">1</span>]&gt;arr[<span class="hljs-number">0</span>]))<br><span class="hljs-comment"># numpy.bool_</span><br></code></pre></td></tr></table></figure><h4 id="对img-mask的操作"><a href="#对img-mask的操作" class="headerlink" title="对img mask的操作"></a>对img mask的操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">mask = []<br>mask = np.repeat(mask, <span class="hljs-number">3</span>, axis=<span class="hljs-number">0</span>).transpose((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)).astype(np.uint8)<br>mask = mask * <span class="hljs-number">255</span><br>mask = mask[np.newaxis, :, :]<br>mask = mask[<span class="hljs-literal">None</span>, :, :]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Numpy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自用的代理方案</title>
    <link href="/posts/34787/"/>
    <url>/posts/34787/</url>
    
    <content type="html"><![CDATA[<p>自用的代理方案。</p><span id="more"></span><h4 id="代理爬取及测速："><a href="#代理爬取及测速：" class="headerlink" title="代理爬取及测速："></a>代理爬取及测速：</h4><p><a href="https://github.com/ykk648/TopFreeProxies">TopFreeProxies</a></p><h4 id="代理工具："><a href="#代理工具：" class="headerlink" title="代理工具："></a>代理工具：</h4><table><thead><tr><th>方案</th><th>平台</th></tr></thead><tbody><tr><td><del><a href="https://github.com/v2rayA/v2rayA">v2raya </a></del>+ proxychains4+switchyomege    <a href="https://github.com/Fndroid/clash_for_windows_pkg">CFW</a></td><td>ubuntu</td></tr><tr><td><del><a href="https://github.com/2dust/v2rayN">v2rayn</a></del>+switchyomege  <a href="https://github.com/Fndroid/clash_for_windows_pkg">CFW</a></td><td>windows</td></tr><tr><td><a href="https://github.com/2dust/v2rayN">v2rayn</a></td><td>android</td></tr><tr><td>shadowsocks</td><td>ios</td></tr></tbody></table><p>proxychains4</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install proxychains4<br>sudo vim /etc/proxychains4.conf<br>socks5 127.0.0.1 1081<br><br><span class="hljs-comment"># 为proxychains4添加别名pc4</span><br><span class="hljs-built_in">alias</span> pc4=<span class="hljs-string">&#x27;proxychains4 -q&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="订阅地址："><a href="#订阅地址：" class="headerlink" title="订阅地址："></a>订阅地址：</h4><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><a href="https://bulink.me/sub/pmxce/vm">https://bulink.me/sub/pmxce/vm</a></td><td>★★★</td><td></td></tr><tr><td><a href="https://github.com/ssrsub/ssr/raw/master/ssrsub">https://github.com/ssrsub/ssr/raw/master/ssrsub</a></td><td></td><td></td></tr><tr><td><a href="https://raw.githubusercontent.com/ssrsub/ssr/master/V2Ray">https://raw.githubusercontent.com/ssrsub/ssr/master/V2Ray</a></td><td></td><td></td></tr><tr><td><a href="https://raw.githubusercontent.com/alanbobs999/TopFreeProxies/master/Eternity">https://raw.githubusercontent.com/alanbobs999/TopFreeProxies/master/Eternity</a></td><td></td><td></td></tr><tr><td><a href="https://raw.fastgit.org/freefq/free/master/v2">https://raw.fastgit.org/freefq/free/master/v2</a></td><td>★★</td><td></td></tr><tr><td><a href="https://dllx.tk/GreenFishYYDS">https://dllx.tk/GreenFishYYDS</a></td><td>★★★</td><td></td></tr><tr><td><a href="https://raw.githubusercontent.com/Jsnzkpg/Jsnzkpg/Jsnzkpg/Jsnzkpg">https://raw.githubusercontent.com/Jsnzkpg/Jsnzkpg/Jsnzkpg/Jsnzkpg</a></td><td>★★★</td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My wiki</title>
    <link href="/posts/65245/"/>
    <url>/posts/65245/</url>
    
    <content type="html"><![CDATA[<p>所有wiki整合，便于查找。</p><span id="more"></span><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h4><p>bootable device： <a href="https://www.ventoy.net/cn/index.html">ventoy</a>  <a href="https://github.com/pbatard/rufus">refus</a></p><p><a href="https://docs.cfw.lbyczf.com/">clash for windows</a>    <a href="https://pinyin.sogou.com/linux/help.php">sogou pinyin</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># apt source</span><br>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bcakup<br>sudo gedit /etc/apt/sources.list<br><br><span class="hljs-comment"># wechat  https://github.com/zq1997/deepin-wine</span><br>wget -O- https://deepin-wine.i-m.dev/setup.sh | sh<br>sudo apt-get install com.qq.weixin.deepin<br>sudo apt install libjpeg62:i386<br><br><span class="hljs-comment"># dingding https://alidocs.dingtalk.com/i/p/nb9XJlJ7QbxN8GyA/docs/ROGpvEna5YQWmaPgQ156W4ykmK3zoB27</span><br>wget https://dtapp-pub.dingtalk.com/dingtalk-desktop/xc_dingtalk_update/linux_deb/Release/com.alibabainc.dingtalk_1.4.0.20425_amd64.deb<br>sudo dpkg -i com.alibabainc.dingtalk_1.4.0.20425_amd64.deb<br><br><span class="hljs-comment"># proxychains4</span><br>sudo apt install proxychains4<br>sudo vim /etc/proxychains4.conf<br><span class="hljs-comment"># socks5 127.0.0.1 1081</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;alias pc4=&#x27;proxychains4 -q&#x27;&quot;</span> &gt;&gt; ~/.bash_aliases<br><span class="hljs-built_in">source</span> ~/.bash_aliases<br>pc4 ...<br><br><span class="hljs-comment"># eyeblue网盘 https://tank-doc.eyeblue.cn/basic/install.html</span><br>docker run --name dockermysql -p 13306:3306 -e MYSQL_ROOT_PASSWORD=123456 -e MYSQL_DATABASE=tank -e TZ=Asia/Shanghai -d mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-time_zone=+8:00<br>docker run --name tank -p 6010:6010 --link dockermysql:mysql -v ~/data/dockermatter:/data/build/matter -d eyeblue/tank:3.1.6<br>sudo docker start dockermysql<br>sudo docker start tank<br><br><span class="hljs-comment"># firefox https://www.firefox.com.cn/</span><br>sudo vi /usr/share/applications/firefox.desktop<br><br>[Desktop Entry]<br>Name=firefox<br>Name[zh_CN]=firefox<br>Comment=firefox<br>Exec=/opt/firefox/firefox<br>Icon=/opt/firefox/browser/chrome/icons/default/default128.png<br>Terminal=<span class="hljs-literal">false</span><br>Type=Application<br>Categories=Application;<br>Encoding=UTF-8<br>StartupNotify=<span class="hljs-literal">true</span><br><br><br></code></pre></td></tr></table></figure><h4 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">htop # 查看PID<br>cat /proc/$PID/status | grep PPid # 父进程ID<br>kill -9 $PPid<br><span class="hljs-meta">#</span><span class="bash"> 批量杀死进程</span><br>ps -elf |grep open-mmlab |awk &#x27;&#123;print $4&#125;&#x27;|xargs kill -9<br><span class="hljs-meta">#</span><span class="bash"> 磁盘</span><br>sudo iotop -oP<br><span class="hljs-meta">#</span><span class="bash"> 内存</span><br>htop<br><span class="hljs-meta">#</span><span class="bash"> GPU</span><br>nvidia-smi<br><span class="hljs-meta">#</span><span class="bash"> timezone</span><br>tzselect<br>sudo cp /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime<br>sudo hwclock --systohc<br>date<br></code></pre></td></tr></table></figure><h4 id="Nvidia显卡相关"><a href="#Nvidia显卡相关" class="headerlink" title="Nvidia显卡相关"></a>Nvidia显卡相关</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 指定显卡</span><br>os.environ[&quot;CUDA_VISIBLE_DEVICES&quot;] = &#x27;0&#x27; # python<br>export CUDA_VISIBLE_DEVICES=0 # sh<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 适用内核更新导致，or reinstall cuda dirver</span><br>ls /usr/src | grep nvidia<br>sudo apt install dkms<br>sudo dkms install -m nvidia -v ***.**.**<br></code></pre></td></tr></table></figure><h4 id="小问题合集"><a href="#小问题合集" class="headerlink" title="小问题合集"></a>小问题合集</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># unzip乱码</span><br>unzip -O CP936 filename.zip<br><br><span class="hljs-comment"># 项目打包上传</span><br>python setup.py sdist build<br>twine upload dist/*<br><br><span class="hljs-comment"># #### 百度云网盘劫持html文件打开方式</span><br>gedit ~/.config/mimeapps.list<br><br>text/html=baidunetdisk.desktop<br>text/html=firefox.desktop;org.gnome.gedit.desktop;userapp-Firefox-MEQ910.desktop;<br><br><span class="hljs-comment">#### linux下matplotlib显示中文</span><br>下载字体 [SimHei.ttf](https://www.fontpalace.com/font-download/SimHei/), 移动到 `/site-packages/matplotlib/mpl-data/fonts/ttf`<br>mv SimHei.ttf ../site-packages/matplotlib/mpl-data/fonts/ttf<br><span class="hljs-comment"># 删除缓存</span><br>rm -rf /home/tyler/.cache/matplotlib<br>gedit ../site-packages/matplotlib/mpl-data/matplotlibrc<br><br><span class="hljs-comment"># 修改为：</span><br>font.family         : sans-serif   <br><span class="hljs-comment"># 去掉前面的#     </span><br>font.sans-serif     : SimHei, Bitstream Vera Sans, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif  <br><span class="hljs-comment"># 去掉前面的#，并在冒号后面添加SimHei</span><br>axes.unicode_minus  : False<br><span class="hljs-comment"># 去掉前面的#，并将True改为False</span><br><br><span class="hljs-comment"># 去除设置字体的代码</span><br><br><span class="hljs-comment"># 自用bashrc</span><br><span class="hljs-comment"># .bash_aliases</span><br><span class="hljs-built_in">alias</span> nn=<span class="hljs-string">&#x27;watch -n 1 -d nvidia-smi&#x27;</span><br><span class="hljs-built_in">alias</span> sb=<span class="hljs-string">&#x27;source ~/.bashrc&#x27;</span><br><span class="hljs-built_in">alias</span> cod=<span class="hljs-string">&#x27;conda deactivate&#x27;</span><br><span class="hljs-built_in">alias</span> coa=<span class="hljs-string">&#x27;conda activate&#x27;</span><br><span class="hljs-built_in">alias</span> pc4=<span class="hljs-string">&#x27;proxychains4 -q&#x27;</span><br><span class="hljs-built_in">alias</span> pyserver=<span class="hljs-string">&#x27;python -m http.server 8888&#x27;</span><br><span class="hljs-comment"># alias 84=&#x27;sshpass -p password ssh user@ip&#x27;</span><br><span class="hljs-built_in">alias</span> tar=<span class="hljs-string">&#x27;tar -zxvf&#x27;</span><br><span class="hljs-built_in">alias</span> tarz=<span class="hljs-string">&#x27;tar -zcvf&#x27;</span><br><span class="hljs-built_in">alias</span> hexoss=<span class="hljs-string">&#x27;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&#x27;</span><br></code></pre></td></tr></table></figure><hr><h3 id="Envs"><a href="#Envs" class="headerlink" title="Envs"></a>Envs</h3><h4 id="apt-source"><a href="#apt-source" class="headerlink" title="apt source"></a><strong>apt source</strong></h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bcakup<br>sudo gedit /etc/apt/sources.list<br></code></pre></td></tr></table></figure><p>ref <a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">tsinghua mirror</a></p><h4 id="pip-source"><a href="#pip-source" class="headerlink" title="pip source"></a>pip source</h4><p><code>pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</code></p><ul><li>pypi官方[ <a href="https://pypi.org/simple]">https://pypi.org/simple]</a></li><li>阿里云 [<a href="https://mirrors.aliyun.com/pypi/simple/]">https://mirrors.aliyun.com/pypi/simple/]</a></li><li>中国科技大学 [<a href="https://pypi.mirrors.ustc.edu.cn/simple/]">https://pypi.mirrors.ustc.edu.cn/simple/]</a></li><li>豆瓣(douban) [<a href="https://pypi.douban.com/simple/]">https://pypi.douban.com/simple/]</a></li><li>清华大学 [<a href="https://pypi.tuna.tsinghua.edu.cn/simple/]">https://pypi.tuna.tsinghua.edu.cn/simple/]</a></li><li>中国科学技术大学 [<a href="https://pypi.mirrors.ustc.edu.cn/simple/]">https://pypi.mirrors.ustc.edu.cn/simple/]</a></li></ul><h4 id="conda-source"><a href="#conda-source" class="headerlink" title="conda source"></a>conda source</h4><ul><li><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">清华源</a></p></li><li><p><a href="https://mirrors.bfsu.edu.cn/help/anaconda/">北外源</a>    - recommand</p></li><li><p><a href="http://mirrors.ustc.edu.cn/help/anaconda.html">中科大源（conda停止服务）</a></p></li></ul><h4 id="pytorch"><a href="#pytorch" class="headerlink" title="pytorch"></a>pytorch</h4><p><a href="https://pytorch.org/get-started/locally/">official site</a>,   <a href="https://anaconda.org/pytorch/repo">conda pytorch</a></p><h4 id="opencv-python3-cuda"><a href="#opencv-python3-cuda" class="headerlink" title="opencv python3 cuda"></a>opencv python3 cuda</h4><p><a href="https://cmake.org/download/">更新cmake版本</a>      <a href="https://learnopencv.com/getting-started-opencv-cuda-module/">opencv cuda编程</a></p><p><a href="https://learnopencv.com/opencv-dnn-with-gpu-support/">opencv 编译官方指导</a></p><p>其中<code>FAST_MATH</code>两个都是加速选项， 会一定程度影响精度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs shell">除了文档中的以外：<br>pip install opencv-python<br><br><br>coa base_py38_torch18_tf2<br><br>cmake \<br>      -D CMAKE_BUILD_TYPE=RELEASE \<br>      -D CMAKE_INSTALL_PREFIX=/usr/local \<br>      -D INSTALL_PYTHON_EXAMPLES=OFF \<br>      -D INSTALL_C_EXAMPLES=OFF \<br>      -D OPENCV_ENABLE_NONFREE=ON \<br>      -D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib-4.5.4/modules \<br>      -D BUILD_OPENCV_PYTHON2=OFF \<br>      -D ENABLE_FAST_MATH=ON \<br>      -D CUDA_FAST_MATH=ON \<br>      -D BUILD_OPENCV_PYTHON3=ON \<br>      -D PYTHON_DEFAULT_EXECUTABLE=$(python -c &quot;import sys; print(sys.executable)&quot;) \<br>      -D PYTHON3_EXECUTABLE=$(which python3) \<br>      -D PYTHON_INCLUDE_DIR=$(python3 -c &quot;from distutils.sysconfig import get_python_inc; print(get_python_inc())&quot;) \<br>      -D PYTHON_INCLUDE_DIR2=$(python3 -c &quot;from os.path import dirname; from distutils.sysconfig import get_config_h_filename; print(dirname(get_config_h_filename()))&quot;) \<br>      -D PYTHON_LIBRARY=$(python3 -c &quot;from distutils.sysconfig import get_config_var;from os.path import dirname,join ; print(join(dirname(get_config_var(&#x27;LIBPC&#x27;)),get_config_var(&#x27;LDLIBRARY&#x27;)))&quot;) \<br>      -D PYTHON3_NUMPY_INCLUDE_DIRS=$(python3 -c &quot;import numpy; print(numpy.get_include())&quot;) \<br>      -D PYTHON3_PACKAGES_PATH=$(python3 -c &quot;from distutils.sysconfig import get_python_lib; print(get_python_lib())&quot;) \<br>      -D BUILD_EXAMPLES=OFF \<br>      -D WITH_CUDA=ON \<br>      -D WITH_CUDNN=ON \<br>      -D OPENCV_DNN_CUDA=ON \<br>      -D WITH_CUBLAS=ON \<br>      -D CUDNN_VERSION=8.2 \<br>      -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-11.1 \<br>      -D OpenCL_LIBRARY=/usr/local/cuda-11.1/lib64/libOpenCL.so \<br>      -D OpenCL_INCLUDE_DIR=/usr/local/cuda-11.1/include/ \<br>      ..<br><br>make -j20<br>sudo make install<br>sudo ldconfig<br><br>cd /opt/anaconda3/envs/base_py38_torch18_tf2/lib/python3.8/site-packages/<br>ln -sf /usr/local/lib/python3.8/dist-packages/cv2/cv2.cpython-38-x86_64-linux-gnu.so cv2.so<br></code></pre></td></tr></table></figure><h4 id="conda-base-env"><a href="#conda-base-env" class="headerlink" title="conda base env"></a>conda base env</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># install memba to replace conda</span><br>conda install mamba -n base -c conda-forge<br><br><span class="hljs-comment"># updata 22.02.17</span><br>conda create -n base_py39x_torch1x2 python==3.9.10<br>pip3 install torch==1.10.2+cu113 torchvision==0.11.3+cu113 torchaudio==0.10.2+cu113 -f https://download.pytorch.org/whl/cu113/torch_stable.html<br>pip3 install cv2box<br><br><span class="hljs-comment"># using</span><br>conda create --<span class="hljs-built_in">clone</span> base_py39x_torch1x2 --name poseviz<br><br><span class="hljs-comment"># 还原conda base环境</span><br>conda list --revisions<br>conda install --rev 0<br><br><span class="hljs-comment"># conda bash</span><br><span class="hljs-built_in">source</span> /opt/anaconda3/etc/profile.d/conda.sh<br>conda activate full<br><br><span class="hljs-comment"># opencv support h264(avc1)</span><br>pip uninstall opencv-python opencv-contrib-python<br>memba install -c conda-forge opencv<br></code></pre></td></tr></table></figure><h4 id="cuda-cudnn安装"><a href="#cuda-cudnn安装" class="headerlink" title="cuda cudnn安装"></a>cuda cudnn安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># driver</span><br>sudo nvidia-uninstall<br><br><span class="hljs-comment"># cuda</span><br>sudo chmod +x ./cuda..<br>sudo ./cuda..<br>sudo rm /usr/<span class="hljs-built_in">local</span>/cuda<br>sudo ln -s /usr/<span class="hljs-built_in">local</span>/cuda.. /usr/<span class="hljs-built_in">local</span>/cuda<br><br><span class="hljs-comment"># cudnn</span><br>tar -xzvf cudnn..<br>sudo cp ./include/cudnn*.h /usr/<span class="hljs-built_in">local</span>/cuda/include<br>sudo cp ./lib/libcudnn* /usr/<span class="hljs-built_in">local</span>/cuda/lib64<br>sudo chmod a+r /usr/<span class="hljs-built_in">local</span>/cuda/include/cudnn.h /usr/<span class="hljs-built_in">local</span>/cuda/lib64/libcudnn*<br><br><span class="hljs-comment"># check</span><br>nvcc -V<br></code></pre></td></tr></table></figure><h4 id="onnxruntime-cuda-tensorrt"><a href="#onnxruntime-cuda-tensorrt" class="headerlink" title="onnxruntime + cuda + tensorrt"></a>onnxruntime + cuda + tensorrt</h4><p><a href="https://cmake.org/download/">cmake</a>&#x3D;3.24.0  <a href="https://onnxruntime.ai/docs/build/eps.html">onnxruntime</a>&#x3D;1.13 <a href="https://developer.nvidia.com/cuda-downloads">cuda</a>&#x3D;11.6 <a href="https://developer.nvidia.com/rdp/cudnn-download">cudnn</a>&#x3D;8.4.1.50 <a href="https://developer.nvidia.com/nvidia-tensorrt-8x-download#trt8415">tensorrt</a>&#x3D;8.4.1.5</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Python 3.x</span><br><br><span class="hljs-comment"># cmake</span><br>python3 -m pip install cmake<br><span class="hljs-built_in">which</span> cmake<br><br><span class="hljs-comment"># use proxy</span><br>git <span class="hljs-built_in">clone</span> --recursive https://github.com/microsoft/onnxruntime.git --depth 1 --branch v1.13.1<br><br><span class="hljs-comment"># if you got network issue, update submodule manually</span><br><span class="hljs-comment"># git submodule init</span><br><span class="hljs-comment"># git submodule update</span><br><br><span class="hljs-comment"># three ways to install tensorrt</span><br><span class="hljs-comment"># 1.</span><br><span class="hljs-comment"># mod ~/.bashrc add ./TensorRT-8.4.1.5/lib </span><br><span class="hljs-comment"># 2.</span><br><span class="hljs-comment"># sudo cp ./TensorRT-8.4.1.5/lib/libnvinfer_builder_resource.so.8.4.1 /usr/lib</span><br><span class="hljs-comment"># 3.</span><br>sudo gedit /etc/ld.so.conf<br><span class="hljs-comment"># add ./TensorRT-8.4.1.5/lib </span><br>sudo ldconfig<br><br><span class="hljs-comment"># build</span><br>./build.sh --use_cuda --cudnn_home /usr/<span class="hljs-built_in">local</span>/cuda/lib64 --cuda_home /usr/<span class="hljs-built_in">local</span>/cuda --use_tensorrt --tensorrt_home ./TensorRT-8.4.1.5 --build_wheel --parallel --skip_tests<br>pip install ./build/Linux/Debug/dist/onnxruntime_gpu-1.13.0-cp39-cp39-linux_x86_64.whl<br><br><span class="hljs-comment"># change python version</span><br>pip install -r requirements-dev.txt<br>rm -r ./build<br></code></pre></td></tr></table></figure><h4 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h4><p><a href="https://github.com/microsoft/onnxruntime/tree/main/dockerfiles#tensorrt">onnxruntime</a>  <a href="https://catalog.ngc.nvidia.com/orgs/nvidia/containers/tensorrt">tensorrt</a> <a href="https://docs.nvidia.com/deeplearning/frameworks/support-matrix/index.html">tensorrt matrix</a> <a href="https://gitlab.com/nvidia/container-images/cuda">cuda</a>  <a href="https://hub.docker.com/r/nvidia/cuda/tags">cuda docker hub</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># docker build interrupt</span><br>FROM &#123;none image id&#125; rewrite DOCKERFILE<br><br><span class="hljs-comment"># https://docs.docker.com/engine/reference/commandline/build/#set-build-time-variables---build-arg</span><br>docker build -t onnxruntime-trt -f Dockerfile.tensorrt . --build-arg HTTPS_PROXY=http://xxxx:7890<br></code></pre></td></tr></table></figure><hr><h3 id="Cheat-sheet"><a href="#Cheat-sheet" class="headerlink" title="Cheat sheet"></a>Cheat sheet</h3><h4 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h4><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/tmux.png" style="max-width: 50%;" /><h4 id="pathlib"><a href="#pathlib" class="headerlink" title="pathlib"></a>pathlib</h4><img src="https://blog2021-1252404748.cos.ap-nanjing.myqcloud.com/pathlib.png" style="max-width:50%;" /><hr>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021年新的开始</title>
    <link href="/posts/34024/"/>
    <url>/posts/34024/</url>
    
    <content type="html"><![CDATA[<p>时隔三年，重新捡起了我的blog。</p><span id="more"></span><h3 id="这三年去哪了"><a href="#这三年去哪了" class="headerlink" title="这三年去哪了"></a>这三年去哪了</h3><p>匆忙的日子总是过得很快，这三年犹如白驹过隙，很少有时间能静下来思考自己。</p><p>2018年我应该还在研二没有毕业，在给导师做项目的同时，大量时间准备找工作和毕业论文，对未来充满期待和惶恐，最大的放松可能源自学校对面负一楼的麻辣香锅。</p><p>2019年临近毕业，自己背包去了东南亚四国，与原本相距几千公里外的陌生人交谈，住在这个世界另一个角落的某个家庭当中，生而为人，终于得以看见世界的全貌，算是自我价值的终极实现。</p><p>2019年硕士毕业，选择南京，入职了一份并不完美的工作，薪资尚可，工作压力不大，有了自己9平米的出租屋，开始买吉他、跑马拉松、种菜，日子虽然枯燥却仍然充实。</p><p>2020年遇到疫情，工作上因为口罩人脸识别的项目变得匆忙，生活上又花费大量的时间和精力投资股票、期货，2020年一年的投资收益超过了工资收入，不知道是幸事还是灾祸。</p><p>这一年还认识了小华，在这个孤独的城市中有了一份依靠，开始考虑买房，开始拼命赚钱。</p><p>2021年，经营自己的理财公众号、辞职全职做期货日内交易、摇号买房，似乎人生中很多关键的选择都集中在这一年里，命运也开始给我开密集的玩笑，靠交易实现财富自由的梦想最终败给现实，换了目前的工作，薪资相比北上广仍然微薄，大城市的迁徙只是从一个打工人变成另一个打工人，租的房间变大了，还变成了自如7级会员，但我的身份没变。</p><h3 id="人生体悟"><a href="#人生体悟" class="headerlink" title="人生体悟"></a>人生体悟</h3><p>曾经追求过痛快，以为率性自然才是本性，但对于INTJ来说，或许思考人生的意义就是人生本身。</p><p>过完了27岁生日，我想应该是时候对自己的人生有些规划，不必具象，但应该有个方向，能在社会的汪洋大海里给我一丝指引。</p><p>具体到现实中，这种想法就变成了如何安置好自己的虚拟财产，包括过去几年的照片、零散的代码和项目经历、遍布互联网的账号和数字痕迹，我想，假如有一天我在出租屋死去，那谁来帮我整理，又或者继承我的遗产呢？</p><p>这些东西这么杂乱，他能否替我安置好呢？</p><p>想起喜欢囤积的老人，什么都舍不得扔，最后人死了，一大堆遗物只能留给亲人处理，亲人秉承着对死人的尊敬，全部一烧了之。</p><p>那些生前无比珍重的宝贝，在外人眼里都是负担。</p><p>我开始整理，把密码和财产记录到本子上，把照片按照地方和属性归集到一起，希望同步拷贝在电脑、硬盘、云端上，也翻出来了很多学生时代的工程代码，那些自己曾经熟悉的知识，现在都变得尤其陌生。</p><p>从通信到电子信息到程序员到算法工程师，学习了无尽的知识，我不希望这些东西在我死后一文不值，即使没人看的到，我也不希望我的数字财产永久的消失在世界上。</p><p>是的，物质难以永存，生命长度有限，数字财产才是我们续命的唯一方法。</p><p>我想，应该建立一个自己的域名，应该有一个完全属于自己的blog，只要人类世界还没有灭亡，就可以永久存在于电容和晶体管中，就可以留下我存在的证据。</p><p>我不惧怕死亡，但在我完成所有的人生归档之前，我应该惧怕死亡，我自己的人生应该由我自己来整理，而不是死后的某个人，如果一件东西不能永久保留，我应该在我生命中给它最完美的处置。</p><p>感谢你的阅读。</p>]]></content>
    
    
    <categories>
      
      <category>Essays</category>
      
    </categories>
    
    
    <tags>
      
      <tag>扯淡</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode位运算思路总结</title>
    <link href="/posts/24951/"/>
    <url>/posts/24951/</url>
    
    <content type="html"><![CDATA[<p>leetcode位运算题解和总结，使用Python完成，未来选择性的加入lintcode题解。</p><span id="more"></span><hr><p>Python3题解及刷题完成度详见gayhub：</p><div class="github-widget" data-repo="cloisonne/LeetCode"></div><hr><h3 id="Single-Number："><a href="#Single-Number：" class="headerlink" title="Single Number："></a>Single Number：</h3><p>对数组中的元素一一异或，相同的数异或&#x3D;0。</p><p>实现异或的两种方式：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_xor</span>(<span class="hljs-params">self,a,b</span>):</span><br><span class="hljs-keyword">return</span> a^b<br><span class="hljs-comment"># or</span><br><span class="hljs-keyword">import</span> operator<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><br><span class="hljs-keyword">return</span> reduce(operator.xor, A)<br></code></pre></td></tr></table></figure><hr><h3 id="Single-Number-Ⅱ"><a href="#Single-Number-Ⅱ" class="headerlink" title="Single Number Ⅱ"></a>Single Number Ⅱ</h3><p>其他元素出现3次，使用统计方法或者位运算。<br>位运算解法和其他元素出现4次时的解法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># one 出现一次  two 出现两次  three 出现三次</span><br>one, two = <span class="hljs-number">0</span><br>one, two = (~x &amp; one) | (x &amp; ~one &amp; ~two), (~x &amp; two) | (x &amp; one)<br>one, two, three = (~x &amp; one) | (x &amp; ~one &amp; ~two &amp; ~three), (~x &amp; two) | (x &amp; one), (~x &amp; three) | (x &amp; two)<br></code></pre></td></tr></table></figure><p>使用counter计算：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> collections<br><span class="hljs-keyword">return</span> (collections.Counter(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(nums))*<span class="hljs-number">3</span>) - collections.Counter(nums)).keys()[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><hr><h3 id="Single-Number-Ⅲ"><a href="#Single-Number-Ⅲ" class="headerlink" title="Single Number Ⅲ"></a>Single Number Ⅲ</h3><p>两个元素出现一次，其他元素出现两次<br>全部异或，得到xor，获得bit：</p><pre><code class="hljs">bit = xor &amp; ~xor</code></pre><p>bit是两个数第一个不相同的位</p><pre><code class="hljs">result[bool(i&amp;bit)] ^= i</code></pre><p>其他数异或下来都是0 ， 这两个数异或下来的bool值一个是1 一个是0，成功分到了一个数组中。</p><hr><h3 id="Reverse-Bits"><a href="#Reverse-Bits" class="headerlink" title="Reverse Bits"></a>Reverse Bits</h3><p>二进制翻转，原数右移一位，赋给result，result左移一位：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">result = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>result &lt;&lt;= <span class="hljs-number">1</span><br>result |= n&amp;<span class="hljs-number">1</span> <span class="hljs-comment"># 取右边第一位</span><br>n &gt;&gt;= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>使用zfill（返回指定长度的字符串–右对齐）的一行解：</p><pre><code class="hljs">return int(bin(n)[2:].zfill(32)[::-1], 2) # bin()开头是0b</code></pre><p>Q:<code>如果该方法被大量调用，或者用于处理超大数据（Bulk data）时有什么优化方法？</code></p><p>A:将数字分成8份，每份只能是0-15，记录0-15的翻转值，array或者map：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] reverseHex = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;<span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">12</span>, <span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">6</span>, <span class="hljs-number">14</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">13</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">7</span>, <span class="hljs-number">15</span>&#125;;<br><br><span class="hljs-comment">// you need treat n as an unsigned value</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">reverseBits</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> rev = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n != <span class="hljs-number">0</span>) &#123;<br>        rev = (rev &lt;&lt; <span class="hljs-number">4</span>) + reverseHex[n &amp; <span class="hljs-number">0xF</span>];<br>        n &gt;&gt;&gt;= <span class="hljs-number">4</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> rev;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="Number-of-1-Bits"><a href="#Number-of-1-Bits" class="headerlink" title="Number of 1 Bits"></a>Number of 1 Bits</h3><p>求出二进制数中1的个数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hammingWeight</span>(<span class="hljs-params">self, n</span>):</span><br>result = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> n:<br>n &amp;= n - <span class="hljs-number">1</span><br>result += <span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><p><code>n&amp;(n-1)的妙用</code>:</p><pre><code class="hljs">n与n-1的区别在于,对于n,从右向左数的第一个&quot;1&quot;开始一直到右,和n-1,完全相反n&amp;(n-1)作用：将n的二进制表示中的最低位为1的改为0</code></pre><hr><h3 id="Bitwise-AND-of-Numbers-Range"><a href="#Bitwise-AND-of-Numbers-Range" class="headerlink" title="Bitwise AND of Numbers Range"></a>Bitwise AND of Numbers Range</h3><hr>]]></content>
    
    
    <categories>
      
      <category>Codes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试准备阅读列表</title>
    <link href="/posts/55073/"/>
    <url>/posts/55073/</url>
    
    <content type="html"><![CDATA[<p>习惯了手写笔记，将学习过程阅读的资料记录在这篇文档里，陆续增加。</p><span id="more"></span><hr><h3 id="书目"><a href="#书目" class="headerlink" title="书目"></a>书目</h3><ol><li>《机器学习》周志华 2018.2</li><li>《python高性能编程》 2018.3</li></ol><hr><h3 id="传统机器学习"><a href="#传统机器学习" class="headerlink" title="传统机器学习"></a>传统机器学习</h3><ol><li><a href="https://blog.csdn.net/v_JULY_v/article/details/78121924">BAT机器学习面试1000题系列 </a> 每日刷</li><li><a href="http://blog.csdn.net/zouxy09/article/details/8537620/">从最大似然到EM算法浅解 </a> 2018.3.7</li><li><a href="https://blog.csdn.net/mingtian715/article/details/53488094">机器学习中的PR曲线和ROC曲线  </a> 2018.3.23</li><li><a href="https://blog.csdn.net/yanyanyufei96/article/details/71195063">VotingClassifier 模型聚合——投票</a> 2018.3.25</li><li><a href="https://www.cnblogs.com/waring/p/5890214.html">非平衡数据机器学习</a> 2018.3.25</li><li><a href="http://www.bubuko.com/infodetail-2133893.html">机器学习：概率校准</a> 2018.3.25</li><li><a href="https://blog.csdn.net/u010976453/article/details/78488279">机器学习中的损失函数 （着重比较：hinge loss vs softmax loss</a> 2018.3.25</li><li><a href="https://blog.csdn.net/july_sun/article/details/53088673">机器学习常用的分类器比较</a> 2018.3.25</li><li><a href="https://blog.csdn.net/daunxx/article/details/51881956">线性判别分析（Linear Discriminant Analysis）</a> 2018.3.26</li><li><a href="https://blog.csdn.net/u011001084/article/details/52523897">机器学习常用 35 大算法盘点（附思维导图） </a> 2018.3.26</li><li><a href="https://blog.csdn.net/sinat_27554409/article/details/72823984">机器学习的分类与主要算法对比</a> 2018.3.26</li><li><a href="https://www.cnblogs.com/maybe2030/p/5678387.html">logistic函数和softmax函数</a> 2018.3.27</li><li><a href="https://blog.csdn.net/programmer_wei/article/details/52072939">Logistic Regression（逻辑回归）原理及公式推导</a> 2018.3.27</li><li><a href="https://blog.csdn.net/jiede1/article/details/78245597">机器学习算法—随机森林实现（包括回归和分类） </a> 2018.4.7</li></ol><hr><h3 id="feature-engineering"><a href="#feature-engineering" class="headerlink" title="feature engineering"></a>feature engineering</h3><ol><li><a href="http://www.360doc.com/content/17/0605/12/42308479_660150397.shtml">如何用Python对数据进行差分</a> 2018.4.8</li></ol><hr><h3 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h3><ol><li><a href="http://blog.csdn.net/flyinglittlepig/article/details/71598144">反向传播(BPTT)与循环神经网络(RNN)文本预测</a> 2018.3.21</li><li><a href="http://blog.csdn.net/flyinglittlepig/article/details/72229041">LSTM结构理解与python实现</a> 2018.3.21</li><li><a href="https://blog.csdn.net/hongmaodaxia/article/details/41809341">深度学习BP算法的推导（附加RNN,LSTM的推导说明）</a> 2018.3.23</li><li><a href="http://www.cnblogs.com/iamccme/archive/2013/05/14/3078418.html">《统计学习方法》 梯度下降的两种应用场景）</a> 2018.3.23</li><li><a href="https://blog.csdn.net/u014313009/article/details/51043064">交叉熵代价函数（作用及公式推导）</a> 2018.3.23</li><li><a href="https://blog.csdn.net/v_july_v/article/details/51812459">CNN笔记：通俗理解卷积神经网络</a> 2018.3.23</li><li><a href="https://blog.csdn.net/login_sonata/article/details/77488383">CNN卷积神经网络和反向传播</a> 2018.4.5</li><li><a href="https://blog.csdn.net/dongfang1984/article/details/76974087">pooling层是如何反向传播的？ </a> 2018.4.5</li></ol><hr><h3 id="kaggle、天池"><a href="#kaggle、天池" class="headerlink" title="kaggle、天池"></a>kaggle、天池</h3><ol><li><a href="https://arxiv.org/pdf/1708.05123.pdf">Deep &amp; Cross Network for Ad Click Predictions）</a> 2018.4.4</li></ol><hr><h3 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h3><ol><li><a href="https://zhuanlan.zhihu.com/p/24037830">Spark MLlib 文本特征提取（TF-IDF&#x2F;Word2Vec&#x2F;CountVectorizer）</a> 2018.3.25</li><li><a href="https://blog.csdn.net/mylove0414/article/details/61616617">大白话讲解word2vec到底在做些什么</a> 2018.3.25</li><li><a href="https://www.kaggle.com/marcospinaci/talking-plots-2-adding-grammar">kaggle自然语言处理</a> 2018.3.25</li></ol><hr><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><ol><li><a href="https://blog.csdn.net/sinat_16790541/article/details/43376741">python 模块相互import</a> 2018.4.6</li><li><a href="https://segmentfault.com/a/1190000009398663">简单聊聊Python中的wraps修饰器</a> 2018.4.6</li></ol><hr><h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><ol><li><a href="https://blog.csdn.net/wangyunpeng0319/article/details/78651998">RPC服务和HTTP服务对比</a> 2018.3.25</li></ol><hr><h3 id="其他的收藏"><a href="#其他的收藏" class="headerlink" title="其他的收藏"></a>其他的收藏</h3><ol><li><a href="http://blog.csdn.net/stpeace/article/details/45767245"> 彻底解读剪不断理还乱的\r\n和\n </a> 2018.3.22</li></ol><hr>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MachineLearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>google机器学习速成课程总结</title>
    <link href="/posts/61970/"/>
    <url>/posts/61970/</url>
    
    <content type="html"><![CDATA[<p>Google新出的16小时机器学习速成课程，主要针对TensorFlow，记一些重点。主题不支持MathJax，公式省略。</p>   <span id="more"></span><hr><h2 id="机器学习概念"><a href="#机器学习概念" class="headerlink" title="机器学习概念"></a>机器学习概念</h2><hr><h3 id="机器学习主要术语"><a href="#机器学习主要术语" class="headerlink" title="机器学习主要术语"></a>机器学习主要术语</h3><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><p>   在简单线性回归中，标签是我们要预测的事物，即 y 变量。标签可以是小麦未来的价格、图片中显示的动物品种、音频剪辑的含义或任何事物。</p><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><p>   在简单线性回归中，特征是输入变量，即 x 变量。简单的机器学习项目可能会使用单个特征，而比较复杂的机器学习项目可能会使用数百万个特征，按如下方式指定：</p><p>   在垃圾邮件检测器示例中，特征可能包括：</p><ul><li>电子邮件文本中的字词</li><li>发件人的地址</li><li>发送电子邮件的时段</li><li>电子邮件中包含“一种奇怪的把戏”这样的短语。</li></ul><h4 id="样本"><a href="#样本" class="headerlink" title="样本"></a>样本</h4><p>   样本是指数据的特定实例：x。（我们采用粗体 x 表示它是一个矢量。）我们将样本分为以下两类：</p><ul><li>有标签样本</li><li>无标签样本</li></ul><h4 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h4><p>   模型定义了特征与标签之间的关系。例如，垃圾邮件检测模型可能会将某些特征与“垃圾邮件”紧密联系起来。我们来重点介绍一下模型生命周期的两个阶段：</p><ul><li><p>训练表示创建或学习模型。也就是说，您向模型展示有标签样本，让模型逐渐学习特征与标签之间的关系。</p></li><li><p>推断表示将训练后的模型应用于无标签样本。也就是说，您使用训练后的模型来做出有用的预测 (y’)。</p></li></ul><h4 id="回归与分类"><a href="#回归与分类" class="headerlink" title="回归与分类"></a>回归与分类</h4><ul><li><p>回归模型可预测连续值。例如，回归模型做出的预测可回答如下问题：</p></li><li><p>分类模型可预测离散值。例如，分类模型做出的预测可回答如下问题：</p></li></ul><hr><h3 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h3><p>   过</p><hr><h3 id="训练与损失"><a href="#训练与损失" class="headerlink" title="训练与损失"></a>训练与损失</h3><p>   损失是对糟糕预测的惩罚。也就是说，损失是一个数值，表示对于单个样本而言模型预测的准确程度。如果模型的预测完全准确，则损失为零，否则损失会较大。训练模型的目标是从所有样本中找到一组平均损失“较小”的权重和偏差。</p><ul><li><p>平方损失（又称为 L2 损失）</p></li><li><p>均方误差 (MSE)</p><p>求出各个样本的所有平方损失之和，然后除以样本数量</p></li></ul><hr><h3 id="降低损失-Reducing-Loss"><a href="#降低损失-Reducing-Loss" class="headerlink" title="降低损失(Reducing Loss)"></a>降低损失(Reducing Loss)</h3><ul><li><p>迭代方法</p></li><li><p>梯度下降法</p></li><li><p>学习速率</p></li><li><p>优化学习速率</p></li><li><p>随机梯度下降法（SGD）</p><p>小批量随机梯度下降法（小批量 SGD）是介于全批量迭代与 SGD 之间的折衷方案。小批量通常包含 10-1000 个随机选择的样本。小批量 SGD 可以减少 SGD 中的杂乱样本数量，但仍然比全批量更高效。</p></li></ul><hr><h3 id="使用-TensorFlow-的起始步骤"><a href="#使用-TensorFlow-的起始步骤" class="headerlink" title="使用 TensorFlow 的起始步骤"></a>使用 TensorFlow 的起始步骤</h3><table><thead><tr><th>工具包</th><th>说明</th></tr></thead><tbody><tr><td>Estimator (tf.estimator)</td><td>高级 OOP API</td></tr><tr><td>tf.layers&#x2F;tf.losses&#x2F;tf.metrics</td><td>用于常见模型组件的库</td></tr><tr><td>TensorFlow</td><td>低级 API</td></tr></tbody></table><p>   TensorFlow 由以下两个组件组成：</p><ul><li>图协议缓冲区（Protocol Buffers）</li><li>执行（分布式）图的运行时</li></ul>   <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><br><span class="hljs-comment"># Set up a linear classifier.</span><br>classifier = tf.estimator.LinearClassifier()<br><br><span class="hljs-comment"># Train the model on some example data.</span><br>classifier.train(input_fn=train_input_fn, steps=<span class="hljs-number">2000</span>)<br><br><span class="hljs-comment"># Use it to predict.</span><br>predictions = classifier.predict(input_fn=predict_input_fn)<br></code></pre></td></tr></table></figure><p>   一个例子：<br>       在 TensorFlow 中使用 LinearRegressor 类并基于单个输入特征预测各城市街区的房屋价值中位数<br>       使用均方根误差 (RMSE) 评估模型预测的准确率<br>       通过调整模型的超参数提高模型准确率</p>   <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> math<br><br><span class="hljs-keyword">from</span> IPython <span class="hljs-keyword">import</span> display<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> cm<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> gridspec<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> metrics<br><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">from</span> tensorflow.python.data <span class="hljs-keyword">import</span> Dataset<br><br>tf.logging.set_verbosity(tf.logging.ERROR)<br>pd.options.display.max_rows = <span class="hljs-number">10</span><br>pd.options.display.float_format = <span class="hljs-string">&#x27;&#123;:.1f&#125;&#x27;</span>.<span class="hljs-built_in">format</span><br><br>california_housing_dataframe = pd.read_csv(<span class="hljs-string">&quot;https://storage.googleapis.com/ml_universities/california_housing_train.csv&quot;</span>, sep=<span class="hljs-string">&quot;,&quot;</span>)<br><br><span class="hljs-comment"># 随机化处理</span><br>california_housing_dataframe = california_housing_dataframe.reindex(<br>    np.random.permutation(california_housing_dataframe.index))<br>california_housing_dataframe[<span class="hljs-string">&quot;median_house_value&quot;</span>] /= <span class="hljs-number">1000.0</span><br>california_housing_dataframe<br><br><span class="hljs-comment"># 检查数据</span><br>california_housing_dataframe.describe()<br><br><span class="hljs-comment"># Define the input feature: total_rooms.</span><br>my_feature = california_housing_dataframe[[<span class="hljs-string">&quot;total_rooms&quot;</span>]]<br><br><span class="hljs-comment"># Configure a numeric feature column for total_rooms.</span><br>feature_columns = [tf.feature_column.numeric_column(<span class="hljs-string">&quot;total_rooms&quot;</span>)]<br><br><span class="hljs-comment"># Define the label.</span><br>targets = california_housing_dataframe[<span class="hljs-string">&quot;median_house_value&quot;</span>]<br><br><span class="hljs-comment"># Use gradient descent as the optimizer for training the model.</span><br>my_optimizer=tf.train.GradientDescentOptimizer(learning_rate=<span class="hljs-number">0.0000001</span>)<br><br><span class="hljs-comment"># 梯度裁剪 (gradient clipping)</span><br>my_optimizer = tf.contrib.estimator.clip_gradients_by_norm(my_optimizer, <span class="hljs-number">5.0</span>)<br><br><span class="hljs-comment"># Configure the linear regression model with our feature columns and optimizer.</span><br><span class="hljs-comment"># Set a learning rate of 0.0000001 for Gradient Descent.</span><br>linear_regressor = tf.estimator.LinearRegressor(<br>    feature_columns=feature_columns,<br>    optimizer=my_optimizer<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_input_fn</span>(<span class="hljs-params">features, targets, batch_size=<span class="hljs-number">1</span>, shuffle=<span class="hljs-literal">True</span>, num_epochs=<span class="hljs-literal">None</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;Trains a linear regression model of one feature.</span><br><span class="hljs-string">  </span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">      features: pandas DataFrame of features</span><br><span class="hljs-string">      targets: pandas DataFrame of targets</span><br><span class="hljs-string">      batch_size: Size of batches to be passed to the model</span><br><span class="hljs-string">      shuffle: True or False. Whether to shuffle the data.</span><br><span class="hljs-string">      num_epochs: Number of epochs for which data should be repeated. None = repeat indefinitely</span><br><span class="hljs-string">    Returns:</span><br><span class="hljs-string">      Tuple of (features, labels) for next data batch</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>  <br>    <span class="hljs-comment"># Convert pandas data into a dict of np arrays.</span><br>    features = &#123;key:np.array(value) <span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>(features).items()&#125;                                           <br> <br>    <span class="hljs-comment"># Construct a dataset, and configure batching/repeating</span><br>    ds = Dataset.from_tensor_slices((features,targets)) <span class="hljs-comment"># warning: 2GB limit</span><br>    ds = ds.batch(batch_size).repeat(num_epochs)<br>    <br>    <span class="hljs-comment"># Shuffle the data, if specified</span><br>    <span class="hljs-keyword">if</span> shuffle:<br>      ds = ds.shuffle(buffer_size=<span class="hljs-number">10000</span>)<br>    <br>    <span class="hljs-comment"># Return the next batch of data</span><br>    features, labels = ds.make_one_shot_iterator().get_next()<br>    <span class="hljs-keyword">return</span> features, labels<br><br>_ = linear_regressor.train(<br>    input_fn = <span class="hljs-keyword">lambda</span>:my_input_fn(my_feature, targets),<br>    steps=<span class="hljs-number">100</span><br>)<br><br><span class="hljs-comment"># Create an input function for predictions.</span><br><span class="hljs-comment"># Note: Since we&#x27;re making just one prediction for each example, we don&#x27;t </span><br><span class="hljs-comment"># need to repeat or shuffle the data here.</span><br>prediction_input_fn =<span class="hljs-keyword">lambda</span>: my_input_fn(my_feature, targets, num_epochs=<span class="hljs-number">1</span>, shuffle=<span class="hljs-literal">False</span>)<br><br><span class="hljs-comment"># Call predict() on the linear_regressor to make predictions.</span><br>predictions = linear_regressor.predict(input_fn=prediction_input_fn)<br><br><span class="hljs-comment"># Format predictions as a NumPy array, so we can calculate error metrics.</span><br>predictions = np.array([item[<span class="hljs-string">&#x27;predictions&#x27;</span>][<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> predictions])<br><br><span class="hljs-comment"># Print Mean Squared Error and Root Mean Squared Error.</span><br>mean_squared_error = metrics.mean_squared_error(predictions, targets)<br>root_mean_squared_error = math.sqrt(mean_squared_error)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Mean Squared Error (on training data): %0.3f&quot;</span> % mean_squared_error<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Root Mean Squared Error (on training data): %0.3f&quot;</span> % root_mean_squared_error<br><br><br></code></pre></td></tr></table></figure><p>   写成一个函数：</p>   <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">train_model</span>(<span class="hljs-params">learning_rate, steps, batch_size, input_feature=<span class="hljs-string">&quot;total_rooms&quot;</span></span>):</span><br>  <span class="hljs-string">&quot;&quot;&quot;Trains a linear regression model of one feature.</span><br><span class="hljs-string">  </span><br><span class="hljs-string">  Args:</span><br><span class="hljs-string">    learning_rate: A `float`, the learning rate.</span><br><span class="hljs-string">    steps: A non-zero `int`, the total number of training steps. A training step</span><br><span class="hljs-string">      consists of a forward and backward pass using a single batch.</span><br><span class="hljs-string">    batch_size: A non-zero `int`, the batch size.</span><br><span class="hljs-string">    input_feature: A `string` specifying a column from `california_housing_dataframe`</span><br><span class="hljs-string">      to use as input feature.</span><br><span class="hljs-string">  &quot;&quot;&quot;</span><br>  <br>  periods = <span class="hljs-number">10</span><br>  steps_per_period = steps / periods<br><br>  my_feature = input_feature<br>  my_feature_data = california_housing_dataframe[[my_feature]]<br>  my_label = <span class="hljs-string">&quot;median_house_value&quot;</span><br>  targets = california_housing_dataframe[my_label]<br><br>  <span class="hljs-comment"># Create feature columns</span><br>  feature_columns = [tf.feature_column.numeric_column(my_feature)]<br>  <br>  <span class="hljs-comment"># Create input functions</span><br>  training_input_fn = <span class="hljs-keyword">lambda</span>:my_input_fn(my_feature_data, targets, batch_size=batch_size)<br>  prediction_input_fn = <span class="hljs-keyword">lambda</span>: my_input_fn(my_feature_data, targets, num_epochs=<span class="hljs-number">1</span>, shuffle=<span class="hljs-literal">False</span>)<br>  <br>  <span class="hljs-comment"># Create a linear regressor object.</span><br>  my_optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)<br>  my_optimizer = tf.contrib.estimator.clip_gradients_by_norm(my_optimizer, <span class="hljs-number">5.0</span>)<br>  linear_regressor = tf.estimator.LinearRegressor(<br>      feature_columns=feature_columns,<br>      optimizer=my_optimizer<br>  )<br><br>  <span class="hljs-comment"># Set up to plot the state of our model&#x27;s line each period.</span><br>  plt.figure(figsize=(<span class="hljs-number">15</span>, <span class="hljs-number">6</span>))<br>  plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>  plt.title(<span class="hljs-string">&quot;Learned Line by Period&quot;</span>)<br>  plt.ylabel(my_label)<br>  plt.xlabel(my_feature)<br>  sample = california_housing_dataframe.sample(n=<span class="hljs-number">300</span>)<br>  plt.scatter(sample[my_feature], sample[my_label])<br>  colors = [cm.coolwarm(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> np.linspace(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, periods)]<br><br>  <span class="hljs-comment"># Train the model, but do so inside a loop so that we can periodically assess</span><br>  <span class="hljs-comment"># loss metrics.</span><br>  <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Training model...&quot;</span><br>  <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;RMSE (on training data):&quot;</span><br>  root_mean_squared_errors = []<br>  <span class="hljs-keyword">for</span> period <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">0</span>, periods):<br>    <span class="hljs-comment"># Train the model, starting from the prior state.</span><br>    linear_regressor.train(<br>        input_fn=training_input_fn,<br>        steps=steps_per_period<br>    )<br>    <span class="hljs-comment"># Take a break and compute predictions.</span><br>    predictions = linear_regressor.predict(input_fn=prediction_input_fn)<br>    predictions = np.array([item[<span class="hljs-string">&#x27;predictions&#x27;</span>][<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> predictions])<br>    <br>    <span class="hljs-comment"># Compute loss.</span><br>    root_mean_squared_error = math.sqrt(<br>        metrics.mean_squared_error(predictions, targets))<br>    <span class="hljs-comment"># Occasionally print the current loss.</span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;  period %02d : %0.2f&quot;</span> % (period, root_mean_squared_error)<br>    <span class="hljs-comment"># Add the loss metrics from this period to our list.</span><br>    root_mean_squared_errors.append(root_mean_squared_error)<br>    <span class="hljs-comment"># Finally, track the weights and biases over time.</span><br>    <span class="hljs-comment"># Apply some math to ensure that the data and line are plotted neatly.</span><br>    y_extents = np.array([<span class="hljs-number">0</span>, sample[my_label].<span class="hljs-built_in">max</span>()])<br>    <br>    weight = linear_regressor.get_variable_value(<span class="hljs-string">&#x27;linear/linear_model/%s/weights&#x27;</span> % input_feature)[<span class="hljs-number">0</span>]<br>    bias = linear_regressor.get_variable_value(<span class="hljs-string">&#x27;linear/linear_model/bias_weights&#x27;</span>)<br><br>    x_extents = (y_extents - bias) / weight<br>    x_extents = np.maximum(np.minimum(x_extents,<br>                                      sample[my_feature].<span class="hljs-built_in">max</span>()),<br>                           sample[my_feature].<span class="hljs-built_in">min</span>())<br>    y_extents = weight * x_extents + bias<br>    plt.plot(x_extents, y_extents, color=colors[period]) <br>  <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Model training finished.&quot;</span><br><br>  <span class="hljs-comment"># Output a graph of loss metrics over periods.</span><br>  plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br>  plt.ylabel(<span class="hljs-string">&#x27;RMSE&#x27;</span>)<br>  plt.xlabel(<span class="hljs-string">&#x27;Periods&#x27;</span>)<br>  plt.title(<span class="hljs-string">&quot;Root Mean Squared Error vs. Periods&quot;</span>)<br>  plt.tight_layout()<br>  plt.plot(root_mean_squared_errors)<br><br>  <span class="hljs-comment"># Output a table with calibration data.</span><br>  calibration_data = pd.DataFrame()<br>  calibration_data[<span class="hljs-string">&quot;predictions&quot;</span>] = pd.Series(predictions)<br>  calibration_data[<span class="hljs-string">&quot;targets&quot;</span>] = pd.Series(targets)<br>  display.display(calibration_data.describe())<br><br>  <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Final RMSE (on training data): %0.2f&quot;</span> % root_mean_squared_error<br></code></pre></td></tr></table></figure><p>   <strong>常用超参数</strong></p><ul><li>steps：是指训练迭代的总次数。一步计算一批样本产生的损失，然后使用该值修改模型的权重一次。</li><li>batch size：是指单步的样本数量（随机选择）。例如，SGD 的批量大小为 1。</li></ul><p>   <strong>方便变量</strong></p><pre><code class="hljs">   periods：控制报告的粒度。例如，如果 periods 设为 7 且 steps 设为 70，则练习将每 10 步（或 7 次）输出一次损失值。与超参数不同，我们不希望您修改 periods 的值。请注意，修改 periods 不会更改您的模型所学习的内容。</code></pre><p>   <strong>合成特征和离群值</strong></p><ul><li>合成特征</li><li>识别离群值</li><li>截取离群值<br>离群值设置为相对合理的最小值或最大值来进一步改进模型拟合情况。</li></ul><hr><h3 id="过拟合和泛化"><a href="#过拟合和泛化" class="headerlink" title="过拟合和泛化"></a>过拟合和泛化</h3><p>   以下三项基本假设阐明了泛化：</p><ul><li>我们从分布中随机抽取独立同分布 (i.i.d) 的样本。换言之，样本之间不会互相影响。（另一种解释：i.i.d. 是表示变量随机性的一种方式）。</li><li>分布是平稳的；即分布在数据集内不会发生变化。</li><li>我们从同一分布的数据划分中抽取样本。</li></ul><hr><h3 id="拆分数据"><a href="#拆分数据" class="headerlink" title="拆分数据"></a>拆分数据</h3><ul><li>训练集 - 用于训练模型的子集。</li><li>测试集 - 用于测试训练后模型的子集。</li></ul><hr><h3 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h3><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><ul><li>映射数值</li><li>映射字符串（onehot encoding</li><li>映射分类（枚举）值</li></ul><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>避免很少使用的离散特征值</li><li>最好具有清晰明确的含义</li><li>不要将“神奇”的值与实际数据混为一谈（异常值</li><li>考虑上游不稳定性</li></ul><h4 id="数据清理"><a href="#数据清理" class="headerlink" title="数据清理"></a>数据清理</h4><ol><li>缩放特征值<ul><li>帮助梯度下降法更快速地收敛。</li><li>帮助避免“NaN 陷阱”。在这种陷阱中，模型中的一个数值变成 NaN（例如，当某个值在训练期间超出浮点精确率限制时），并且模型中的所有其他数值最终也会因数学运算而变成 NaN。</li><li>帮助模型为每个特征确定合适的权重。如果没有进行特征缩放，则模型会对范围较大的特征投入过多精力。</li></ul></li><li>处理极端离群值<ul><li>对数缩放</li><li>限制特征值</li></ul></li><li>分箱（划分范围</li><li>清查</li></ol><hr><h3 id="特征组合-Feature-Crosses"><a href="#特征组合-Feature-Crosses" class="headerlink" title="特征组合(Feature Crosses)"></a>特征组合(Feature Crosses)</h3><h4 id="对非线性规律进行编码"><a href="#对非线性规律进行编码" class="headerlink" title="对非线性规律进行编码"></a>对非线性规律进行编码</h4><p>   特征组合是指通过将两个或多个输入特征相乘来对特征空间中的非线性规律进行编码的合成特征。“cross”（组合）这一术语来自 cross product（向量积）。</p><h4 id="组合独热矢量"><a href="#组合独热矢量" class="headerlink" title="组合独热矢量"></a>组合独热矢量</h4><p>   对独热编码进行特征组合，则会得到可解读为逻辑连接的二元特征</p><p>   线性学习器可以很好地扩展到大量数据。对大规模数据集使用特征组合是学习高度复杂模型的一种有效策略。</p><hr><h3 id="简化正则化-Regularization-for-Simplicity-：L₂-正则化"><a href="#简化正则化-Regularization-for-Simplicity-：L₂-正则化" class="headerlink" title="简化正则化 (Regularization for Simplicity)：L₂ 正则化"></a>简化正则化 (Regularization for Simplicity)：L₂ 正则化</h3><p>   通过降低复杂模型的复杂度来防止过拟合，这种原则称为正则化。<br>   以最小化损失和复杂度为目标，这称为<code>结构风险最小化</code>.</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>MachineLearning</tag>
      
      <tag>TensorFlow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Python元类metaclass和在ORM中的应用</title>
    <link href="/posts/29034/"/>
    <url>/posts/29034/</url>
    
    <content type="html"><![CDATA[<p>元类其实并不复杂，即生成类的一个类，type可以动态创建类，同时，可以使用更为强大的metaclass。<br>ORM是这种模式的应用场景，即Object Relational Mapping。此外本文还介绍了协程coroutine和logging模块。</p><span id="more"></span><hr><h2 id="type和metaclass生成类"><a href="#type和metaclass生成类" class="headerlink" title="type和metaclass生成类"></a>type和metaclass生成类</h2><h3 id="type生成类"><a href="#type生成类" class="headerlink" title="type生成类"></a>type生成类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fn</span>(<span class="hljs-params">self, name=<span class="hljs-string">&#x27;world&#x27;</span></span>):</span> <span class="hljs-comment"># 先定义函数</span><br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello, %s.&#x27;</span> % name)<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>Hello = <span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>, (<span class="hljs-built_in">object</span>,), <span class="hljs-built_in">dict</span>(hello=fn)) <span class="hljs-comment"># 创建Hello class</span><br></code></pre></td></tr></table></figure><h3 id="metaclass生成类"><a href="#metaclass生成类" class="headerlink" title="metaclass生成类"></a>metaclass生成类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListMetaclass</span>(<span class="hljs-params"><span class="hljs-built_in">type</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__new__</span>(<span class="hljs-params">cls, name, bases, attrs</span>):</span><br>        attrs[<span class="hljs-string">&#x27;add&#x27;</span>] = <span class="hljs-keyword">lambda</span> self, value: self.append(value)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">type</span>.__new__(cls, name, bases, attrs)<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyList</span>(<span class="hljs-params"><span class="hljs-built_in">list</span>, metaclass=ListMetaclass</span>):</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><hr><h2 id="Google新出的16小时机器学习速成课程，主要针对TensorFlow，记一些重点。主题不支持MathJax，公式省略。"><a href="#Google新出的16小时机器学习速成课程，主要针对TensorFlow，记一些重点。主题不支持MathJax，公式省略。" class="headerlink" title="Google新出的16小时机器学习速成课程，主要针对TensorFlow，记一些重点。主题不支持MathJax，公式省略。"></a>Google新出的16小时机器学习速成课程，主要针对TensorFlow，记一些重点。主题不支持MathJax，公式省略。</h2><h3 id="廖雪峰简单ORM"><a href="#廖雪峰简单ORM" class="headerlink" title="廖雪峰简单ORM"></a>廖雪峰简单ORM</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-comment"># 用metaclass写一个ORM的demo</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Field</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, column_type</span>):</span><br>        self.name = name<br>        self.column_type = column_type<br><br>    <span class="hljs-comment"># 返回对象的字符串表达式</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;%s:%s&gt;&#x27;</span> % (self.__class__.name, self.name)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringField</span>(<span class="hljs-params">Field</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span><br>        <span class="hljs-built_in">super</span>(StringField, self).__init__(name,<span class="hljs-string">&#x27;varchar(100)&#x27;</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntagerField</span>(<span class="hljs-params">Field</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span><br>        <span class="hljs-built_in">super</span>(IntagerField, self).__init__(name, <span class="hljs-string">&#x27;bigint&#x27;</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ModelMetaclass</span>(<span class="hljs-params"><span class="hljs-built_in">type</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__new__</span>(<span class="hljs-params">cls, name, bases, attrs</span>):</span><br>        <span class="hljs-keyword">if</span> name == <span class="hljs-string">&#x27;Model&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">type</span>.__new__(cls,name,bases,attrs)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Found model: %s&#x27;</span> % name)<br>        mappings = <span class="hljs-built_in">dict</span>()<br>        <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> attrs.items():<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(v, Field):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Found mapping: %s ==&gt; %s&#x27;</span> % (k,v))<br>                mappings[k] = v<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> mappings.keys():<br>            attrs.pop()<br>        attrs[<span class="hljs-string">&#x27;__mappings__&#x27;</span>] = mappings<br>        attrs[<span class="hljs-string">&#x27;__table__&#x27;</span>] = name<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">type</span>.__new__(cls, name, bases, attrs)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Model</span>(<span class="hljs-params"><span class="hljs-built_in">dict</span>, metaclass=ModelMetaclass</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, **kw</span>):</span><br>        <span class="hljs-built_in">super</span>(Model, self).__init__(**kw)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getattr__</span>(<span class="hljs-params">self, key</span>):</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> self[key]<br>        <span class="hljs-keyword">except</span> KeyError:<br>            <span class="hljs-keyword">raise</span> AttributeError(<span class="hljs-string">r&quot;&#x27;Model&#x27; object has no attribute &#x27;%s&#x27;&quot;</span> % key)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__setattr__</span>(<span class="hljs-params">self, key, value</span>):</span><br>        self[key] = value<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save</span>(<span class="hljs-params">self</span>):</span><br>        fields = []<br>        params = []<br>        args = []<br>        <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> self.__mappings__.items():<br>            fields.append(v.name)<br>            params.append(<span class="hljs-string">&#x27;?&#x27;</span>)<br>            args.append(<span class="hljs-built_in">getattr</span>(self, k, <span class="hljs-literal">None</span>))<br>        sql = <span class="hljs-string">&#x27;insert into %s (%s) values (%s)&#x27;</span> % (self.__table__, <span class="hljs-string">&#x27;,&#x27;</span>.join(fields), <span class="hljs-string">&#x27;,&#x27;</span>.join(params))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;SQL: %s&#x27;</span> % sql)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ARGS: %s&#x27;</span> % <span class="hljs-built_in">str</span>(args))<br><br><span class="hljs-comment"># 使用方法</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>(<span class="hljs-params">Model</span>):</span><br>    <span class="hljs-built_in">id</span> = IntagerField(<span class="hljs-string">&#x27;id&#x27;</span>)<br>    name = StringField(<span class="hljs-string">&#x27;username&#x27;</span>)<br>    email = StringField(<span class="hljs-string">&#x27;email&#x27;</span>)<br>    password = StringField(<span class="hljs-string">&#x27;password&#x27;</span>)<br><br>u = User(<span class="hljs-built_in">id</span> = <span class="hljs-number">12345</span>, name = <span class="hljs-string">&#x27;Li&#x27;</span>, email = <span class="hljs-string">&#x27;123&#x27;</span>, password = <span class="hljs-string">&#x27;22&#x27;</span>)<br><br>u.save()<br></code></pre></td></tr></table></figure><h3 id="更复杂的一个ORM"><a href="#更复杂的一个ORM" class="headerlink" title="更复杂的一个ORM"></a>更复杂的一个ORM</h3><p>来自<a href="http://www.songluyi.com/python-%e7%bc%96%e5%86%99orm%e6%97%b6%e7%9a%84%e9%87%8d%e9%9a%be%e7%82%b9%e6%8e%8c%e6%8f%a1/">编写orm时的重难点掌握</a></p><p>代码比较复杂：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> logging<br>logging.basicConfig(level=logging.INFO)<br><span class="hljs-comment"># 一次使用异步 处处使用异步</span><br><span class="hljs-keyword">import</span> aiomysql<br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">log</span>(<span class="hljs-params">sql,args=(<span class="hljs-params"></span>)</span>):</span><br>    logging.info(<span class="hljs-string">&#x27;SQL:%s&#x27;</span> %sql)<br><span class="hljs-meta">@asyncio.coroutine</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_pool</span>(<span class="hljs-params">loop, **kw</span>):</span><br>    logging.info(<span class="hljs-string">&#x27; start creating database connection pool&#x27;</span>)<br>    <span class="hljs-keyword">global</span> __pool<br>    <span class="hljs-comment"># 理解这里的yield from 是很重要的</span><br>    __pool=<span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> aiomysql.create_pool(<br>        host=kw.get(<span class="hljs-string">&#x27;host&#x27;</span>,<span class="hljs-string">&#x27;localhost&#x27;</span>),<br>        port=kw.get(<span class="hljs-string">&#x27;port&#x27;</span>,<span class="hljs-number">3306</span>),<br>        user=kw[<span class="hljs-string">&#x27;user&#x27;</span>],<br>        password=kw[<span class="hljs-string">&#x27;password&#x27;</span>],<br>        db=kw[<span class="hljs-string">&#x27;db&#x27;</span>],<br>        charset=kw.get(<span class="hljs-string">&#x27;charset&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>),<br>        autocommit=kw.get(<span class="hljs-string">&#x27;autocommit&#x27;</span>,<span class="hljs-literal">True</span>),<br>        maxsize=kw.get(<span class="hljs-string">&#x27;maxsize&#x27;</span>,<span class="hljs-number">10</span>),<br>        <span class="hljs-comment"># 目前不清楚这个minsize是什么鬼</span><br>        minsize=kw.get(<span class="hljs-string">&#x27;minsize&#x27;</span>,<span class="hljs-number">1</span>),<br>        loop=loop<br>        )<br> <br><span class="hljs-meta">@asyncio.coroutine</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">destroy_pool</span>():</span><br>    <span class="hljs-keyword">global</span> __pool<br>    <span class="hljs-keyword">if</span> __pool <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> :<br>        __pool.close()<br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> __pool.wait_closed()<br> <br><span class="hljs-comment"># 我很好奇为啥不用commit 事务不用提交么</span><br><span class="hljs-meta">@asyncio.coroutine</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">select</span>(<span class="hljs-params">sql, args, size=<span class="hljs-literal">None</span></span>):</span><br>    log(sql,args)<br>    <span class="hljs-keyword">global</span> __pool<br>    <span class="hljs-comment"># 666 建立游标</span><br>    <span class="hljs-comment"># -*- yield from 将会调用一个子协程，并直接返回调用的结果</span><br>    <span class="hljs-comment"># yield from从连接池中返回一个连接</span><br>    <span class="hljs-keyword">with</span> (<span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> __pool)<span class="hljs-keyword">as</span> conn:<br>        cur = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> conn.cursor(aiomysql.DictCursor)<br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> cur.execute(sql.replace(<span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;%s&#x27;</span>), args)<br>        <span class="hljs-keyword">if</span> size:<br>            rs = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> cur.fetchmany(size)<br>        <span class="hljs-keyword">else</span>:<br>            rs = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> cur.fetchall()<br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> cur.close()<br>        logging.info(<span class="hljs-string">&#x27;rows have returned %s&#x27;</span> %<span class="hljs-built_in">len</span>(rs))<br>    <span class="hljs-keyword">return</span> rs<br> <br> <br><span class="hljs-comment"># 封装INSERT, UPDATE, DELETE</span><br><span class="hljs-comment"># 语句操作参数一样，所以定义一个通用的执行函数</span><br><span class="hljs-comment"># 返回操作影响的行号</span><br><span class="hljs-comment"># 我想说的是 知道影响行号有个叼用</span><br> <br><span class="hljs-meta">@asyncio.coroutine</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">execute</span>(<span class="hljs-params">sql,args, autocommit=<span class="hljs-literal">True</span></span>):</span><br>    log(sql)<br>    <span class="hljs-keyword">global</span> __pool<br>    <span class="hljs-keyword">with</span> (<span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> __pool) <span class="hljs-keyword">as</span> conn:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 因为execute类型sql操作返回结果只有行号，不需要dict</span><br>            cur = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> conn.cursor()<br>            <span class="hljs-comment"># 顺便说一下 后面的args 别掉了 掉了是无论如何都插入不了数据的</span><br>            <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> cur.execute(sql.replace(<span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;%s&#x27;</span>), args)<br>            <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> conn.commit()<br>            affected_line=cur.rowcount<br>            <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> cur.close()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;execute : &#x27;</span>, affected_line)<br>        <span class="hljs-keyword">except</span> BaseException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">raise</span><br>        <span class="hljs-keyword">return</span> affected_line<br> <br><span class="hljs-comment"># 这个函数主要是把查询字段计数 替换成sql识别的?</span><br><span class="hljs-comment"># 比如说：insert into  `User` (`password`, `email`, `name`, `id`) values (?,?,?,?)  看到了么 后面这四个问号</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_args_string</span>(<span class="hljs-params">num</span>):</span><br>    lol=[]<br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        lol.append(<span class="hljs-string">&#x27;?&#x27;</span>)<br>    <span class="hljs-keyword">return</span> (<span class="hljs-string">&#x27;,&#x27;</span>.join(lol))<br> <br><span class="hljs-comment"># 定义Field类，负责保存(数据库)表的字段名和字段类型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Field</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-comment"># 表的字段包含名字、类型、是否为表的主键和默认值</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, column_type, primary__key, default</span>):</span><br>        self.name = name<br>        self.column_type=column_type<br>        self.primary_key=primary__key<br>        self.default=default<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-comment"># 返回 表名字 字段名 和字段类型</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&amp;lt;%s , %s , %s&amp;gt;&quot;</span> %(self.__class__.__name__, self.name, self.column_type)<br><span class="hljs-comment"># 定义数据库中五个存储类型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringField</span>(<span class="hljs-params">Field</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name=<span class="hljs-literal">None</span>, primary_key=<span class="hljs-literal">False</span>, default=<span class="hljs-literal">None</span>, ddl=<span class="hljs-string">&#x27;varchar(100)&#x27;</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name,ddl,primary_key,default)<br><span class="hljs-comment"># 布尔类型不可以作为主键</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BooleanField</span>(<span class="hljs-params">Field</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name=<span class="hljs-literal">None</span>, default=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name,<span class="hljs-string">&#x27;Boolean&#x27;</span>,<span class="hljs-literal">False</span>, default)<br><span class="hljs-comment"># 不知道这个column type是否可以自己定义 先自己定义看一下</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntegerField</span>(<span class="hljs-params">Field</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name=<span class="hljs-literal">None</span>, primary_key=<span class="hljs-literal">False</span>, default=<span class="hljs-number">0</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name, <span class="hljs-string">&#x27;int&#x27;</span>, primary_key, default)<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FloatField</span>(<span class="hljs-params">Field</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name=<span class="hljs-literal">None</span>, primary_key=<span class="hljs-literal">False</span>,default=<span class="hljs-number">0.0</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name, <span class="hljs-string">&#x27;float&#x27;</span>, primary_key, default)<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TextField</span>(<span class="hljs-params">Field</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name=<span class="hljs-literal">None</span>, default=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name,<span class="hljs-string">&#x27;text&#x27;</span>,<span class="hljs-literal">False</span>, default)<br><span class="hljs-comment"># class Model(dict,metaclass=ModelMetaclass):</span><br> <br><span class="hljs-comment"># -*-定义Model的元类</span><br> <br><span class="hljs-comment"># 所有的元类都继承自type</span><br><span class="hljs-comment"># ModelMetaclass元类定义了所有Model基类(继承ModelMetaclass)的子类实现的操作</span><br> <br><span class="hljs-comment"># -*-ModelMetaclass的工作主要是为一个数据库表映射成一个封装的类做准备：</span><br><span class="hljs-comment"># ***读取具体子类(user)的映射信息</span><br><span class="hljs-comment"># 创造类的时候，排除对Model类的修改</span><br><span class="hljs-comment"># 在当前类中查找所有的类属性(attrs)，如果找到Field属性，就将其保存到__mappings__的dict中，同时从类属性中删除Field(防止实例属性遮住类的同名属性)</span><br><span class="hljs-comment"># 将数据库表名保存到__table__中</span><br> <br><span class="hljs-comment"># 完成这些工作就可以在Model中定义各种数据库的操作方法</span><br><span class="hljs-comment"># metaclass是类的模板，所以必须从`type`类型派生：</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ModelMetaclass</span>(<span class="hljs-params"><span class="hljs-built_in">type</span></span>):</span><br>    <span class="hljs-comment"># __new__控制__init__的执行，所以在其执行之前</span><br>    <span class="hljs-comment"># cls:代表要__init__的类，此参数在实例化时由Python解释器自动提供(例如下文的User和Model)</span><br>    <span class="hljs-comment"># bases：代表继承父类的集合</span><br>    <span class="hljs-comment"># attrs：类的方法集合</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__new__</span>(<span class="hljs-params">cls, name, bases, attrs</span>):</span><br>        <span class="hljs-comment"># 排除model 是因为要排除对model类的修改</span><br>        <span class="hljs-keyword">if</span> name==<span class="hljs-string">&#x27;Model&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">type</span>.__new__(cls, name, bases, attrs)<br>        <span class="hljs-comment"># 获取table名称 为啥获取table名称 至于在哪里我也是不明白握草</span><br>        table_name=attrs.get(<span class="hljs-string">&#x27;__table__&#x27;</span>, <span class="hljs-literal">None</span>) <span class="hljs-keyword">or</span> name<br>        logging.info(<span class="hljs-string">&#x27;found table: %s (table: %s) &#x27;</span> %(name,table_name ))<br>        <span class="hljs-comment"># 获取Field所有主键名和Field</span><br>        mappings=<span class="hljs-built_in">dict</span>()<br>        fields=[]<br>        primaryKey=<span class="hljs-literal">None</span><br>        <span class="hljs-comment"># 这个k是表示字段名</span><br>        <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> attrs.items():<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(v, Field):<br>                logging.info(<span class="hljs-string">&#x27;Found mapping %s===&amp;gt;%s&#x27;</span> %(k, v))<br>            <span class="hljs-comment"># 注意mapping的用法</span><br>                mappings[k] = v<br>                <span class="hljs-keyword">if</span> v.primary_key:<br>                    logging.info(<span class="hljs-string">&#x27;fond primary key hahaha %s&#x27;</span>%k)<br>                    <span class="hljs-comment"># 这里很有意思 当第一次主键存在primaryKey被赋值 后来如果再出现主键的话就会引发错误</span><br>                    <span class="hljs-keyword">if</span> primaryKey:<br>                        <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&#x27;Duplicated key for field&#x27;</span>)<br>                    primaryKey=k<br>                <span class="hljs-keyword">else</span>:<br>                    fields.append(k)<br> <br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> primaryKey:<br>            <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&#x27;Primary key not found!&#x27;</span>)<br>        <span class="hljs-comment"># w下面位字段从类属性中删除Field 属性</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> mappings.keys():<br>            attrs.pop(k)<br> <br>        <span class="hljs-comment"># 保存除主键外的属性为&#x27;&#x27;列表形式</span><br>        <span class="hljs-comment"># 这一句的lambda表达式没懂</span><br>        escaped_fields=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> f:<span class="hljs-string">&#x27;`%s`&#x27;</span> %f, fields))<br>        <span class="hljs-comment"># 保存属性和列的映射关系</span><br>        attrs[<span class="hljs-string">&#x27;__mappings__&#x27;</span>]=mappings<br>        <span class="hljs-comment"># 保存表名</span><br>        attrs[<span class="hljs-string">&#x27;__table__&#x27;</span>]=table_name<br>        <span class="hljs-comment"># 保存主键名称</span><br>        attrs[<span class="hljs-string">&#x27;__primary_key__&#x27;</span>]=primaryKey<br>        <span class="hljs-comment"># 保存主键外的属性名</span><br>        attrs[<span class="hljs-string">&#x27;__fields__&#x27;</span>]=fields<br>        <span class="hljs-comment"># 构造默认的增删改查 语句</span><br>        attrs[<span class="hljs-string">&#x27;__select__&#x27;</span>]=<span class="hljs-string">&#x27;select `%s`, %s from `%s` &#x27;</span>%(primaryKey,<span class="hljs-string">&#x27;, &#x27;</span>.join(escaped_fields), table_name)<br>        attrs[<span class="hljs-string">&#x27;__insert__&#x27;</span>] = <span class="hljs-string">&#x27;insert into  `%s` (%s, `%s`) values (%s) &#x27;</span> %(table_name, <span class="hljs-string">&#x27;, &#x27;</span>.join(escaped_fields), primaryKey, create_args_string(<span class="hljs-built_in">len</span>(escaped_fields)+<span class="hljs-number">1</span>))<br>        attrs[<span class="hljs-string">&#x27;__update__&#x27;</span>]=<span class="hljs-string">&#x27;update `%s` set %s where `%s` = ?&#x27;</span> %(table_name, <span class="hljs-string">&#x27;, &#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> f:<span class="hljs-string">&#x27;`%s`=?&#x27;</span> % (mappings.get(f).name <span class="hljs-keyword">or</span> f), fields)), primaryKey)<br>        attrs[<span class="hljs-string">&#x27;__delete__&#x27;</span>]=<span class="hljs-string">&#x27;delete `%s` where `%s`=?&#x27;</span> %(table_name, primaryKey)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">type</span>.__new__(cls, name, bases, attrs)<br> <br> <br><span class="hljs-comment"># 定义ORM所有映射的基类：Model</span><br><span class="hljs-comment"># Model类的任意子类可以映射一个数据库表</span><br><span class="hljs-comment"># Model类可以看作是对所有数据库表操作的基本定义的映射</span><br> <br> <br><span class="hljs-comment"># 基于字典查询形式</span><br><span class="hljs-comment"># Model从dict继承，拥有字典的所有功能，同时实现特殊方法__getattr__和__setattr__，能够实现属性操作</span><br><span class="hljs-comment"># 实现数据库操作的所有方法，定义为class方法，所有继承自Model都具有数据库操作方法</span><br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Model</span>(<span class="hljs-params"><span class="hljs-built_in">dict</span>,metaclass=ModelMetaclass</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, **kw</span>):</span><br>        <span class="hljs-built_in">super</span>(Model,self).__init__(**kw)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getattr__</span>(<span class="hljs-params">self, key</span>):</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> self[key]<br>        <span class="hljs-keyword">except</span> KeyError:<br>            <span class="hljs-keyword">raise</span> AttributeError(<span class="hljs-string">&quot;&#x27;Model&#x27; object have no attribution: %s&quot;</span>% key)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__setattr__</span>(<span class="hljs-params">self, key, value</span>):</span><br>        self[key] =value<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getValue</span>(<span class="hljs-params">self, key</span>):</span><br>        <span class="hljs-comment"># 这个是默认内置函数实现的</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(self, key, <span class="hljs-literal">None</span>)<br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getValueOrDefault</span>(<span class="hljs-params">self, key</span>):</span><br>        value=<span class="hljs-built_in">getattr</span>(self, key , <span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">if</span> value <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            field = self.__mappings__[key]<br>            <span class="hljs-keyword">if</span> field.default <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                value = field.default() <span class="hljs-keyword">if</span> <span class="hljs-built_in">callable</span>(field.default) <span class="hljs-keyword">else</span> field.default<br>                logging.info(<span class="hljs-string">&#x27;using default value for %s : %s &#x27;</span> % (key, <span class="hljs-built_in">str</span>(value)))<br>                <span class="hljs-built_in">setattr</span>(self, key, value)<br> <br>        <span class="hljs-keyword">return</span> value<br> <br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-comment"># 类方法有类变量cls传入，从而可以用cls做一些相关的处理。并且有子类继承时，调用该类方法时，传入的类变量cls是子类，而非父类。</span><br><span class="hljs-meta">    @asyncio.coroutine</span><br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_all</span>(<span class="hljs-params">cls, where=<span class="hljs-literal">None</span>, args=<span class="hljs-literal">None</span>, **kw</span>):</span><br>        sql = [cls.__select__]<br>        <span class="hljs-keyword">if</span> where:<br>            sql.append(<span class="hljs-string">&#x27;where&#x27;</span>)<br>            sql.append(where)<br>        <span class="hljs-keyword">if</span> args <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            args = []<br> <br>        orderBy = kw.get(<span class="hljs-string">&#x27;orderBy&#x27;</span>, <span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">if</span> orderBy:<br>            sql.append(<span class="hljs-string">&#x27;order by&#x27;</span>)<br>            sql.append(orderBy)<br>        <span class="hljs-comment"># dict 提供get方法 指定放不存在时候返回后学的东西 比如a.get(&#x27;Fuck&#x27;,None)</span><br>        limit = kw.get(<span class="hljs-string">&#x27;limit&#x27;</span>, <span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">if</span> limit <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            sql.append(<span class="hljs-string">&#x27;limit&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(limit, <span class="hljs-built_in">int</span>):<br>                sql.append(<span class="hljs-string">&#x27;?&#x27;</span>)<br>                args.append(limit)<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(limit, <span class="hljs-built_in">tuple</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(limit) ==<span class="hljs-number">2</span>:<br>                sql.append(<span class="hljs-string">&#x27;?,?&#x27;</span>)<br>                args.extend(limit)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;Invalid limit value : %s &#x27;</span>%<span class="hljs-built_in">str</span>(limit))<br> <br>        rs = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> select(<span class="hljs-string">&#x27; &#x27;</span>.join(sql),args)<br>        <span class="hljs-keyword">return</span> [cls(**r) <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> rs]<br><span class="hljs-meta">    @classmethod</span><br><span class="hljs-meta">    @asyncio.coroutine</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findNumber</span>(<span class="hljs-params">cls, selectField, where=<span class="hljs-literal">None</span>, args=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-string">&#x27;&#x27;&#x27;find number by select and where.&#x27;&#x27;&#x27;</span><br>        sql = [<span class="hljs-string">&#x27;select %s __num__ from `%s`&#x27;</span> %(selectField, cls.__table__)]<br>        <span class="hljs-keyword">if</span> where:<br>            sql.append(<span class="hljs-string">&#x27;where&#x27;</span>)<br>            sql.append(where)<br>        rs = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> select(<span class="hljs-string">&#x27; &#x27;</span>.join(sql), args, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(rs) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> rs[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;__num__&#x27;</span>]<br> <br>    <span class="hljs-comment"># 这个黑魔法我还在研究呢~</span><br><span class="hljs-meta">    @classmethod</span><br><span class="hljs-meta">    @asyncio.coroutine</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find</span>(<span class="hljs-params">cls, primarykey</span>):</span><br>        <span class="hljs-string">&#x27;&#x27;&#x27;find object by primary key&#x27;&#x27;&#x27;</span><br>        rs = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> select(<span class="hljs-string">&#x27;%s where `%s`=?&#x27;</span> %(cls.__select__, cls.__primary_key__), [primarykey], <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(rs) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> cls(**rs[<span class="hljs-number">0</span>])<br> <br><span class="hljs-meta">    @classmethod</span><br><span class="hljs-meta">    @asyncio.coroutine</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findAll</span>(<span class="hljs-params">cls, **kw</span>):</span><br>        rs = []<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(kw) == <span class="hljs-number">0</span>:<br>            rs = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> select(cls.__select__, <span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">else</span>:<br>            args=[]<br>            values=[]<br>            <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> kw.items():<br>                args.append(<span class="hljs-string">&#x27;%s=?&#x27;</span> % k )<br>                values.append(v)<br>            rs = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> select(<span class="hljs-string">&#x27;%s where %s &#x27;</span> % (cls.__select__,  <span class="hljs-string">&#x27; and &#x27;</span>.join(args)), values)<br>        <span class="hljs-keyword">return</span> rs<br>    <br><span class="hljs-meta">    @asyncio.coroutine</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save</span>(<span class="hljs-params">self</span>):</span><br>        args = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(self.getValueOrDefault, self.__fields__))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;save:%s&#x27;</span> % args)<br>        args.append(self.getValueOrDefault(self.__primary_key__))<br>        rows = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> execute(self.__insert__, args)<br>        <span class="hljs-keyword">if</span> rows != <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">print</span>(self.__insert__)<br>            logging.warning(<span class="hljs-string">&#x27;failed to insert record: affected rows: %s&#x27;</span> %rows)<br> <br><span class="hljs-meta">    @asyncio.coroutine</span><br>    <span class="hljs-comment"># 显示方言错误是什么鬼。。。</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span>(<span class="hljs-params">self</span>):</span><br>        args = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(self.getValue, self.__fields__))<br>        args.append(self.getValue(self.__primary_key__))<br>        rows = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> execute(self.__update__, args)<br>        <span class="hljs-keyword">if</span> rows != <span class="hljs-number">1</span>:<br>            logging.warning(<span class="hljs-string">&#x27;failed to update record: affected rows: %s&#x27;</span>%rows)<br> <br><span class="hljs-meta">    @asyncio.coroutine</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove</span>(<span class="hljs-params">self</span>):</span><br>        args = [self.getValue(self.__primary_key__)]<br>        rows = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> execute(self.__updata__, args)<br>        <span class="hljs-keyword">if</span> rows != <span class="hljs-number">1</span>:<br>            logging.warning(<span class="hljs-string">&#x27;failed to remove by primary key: affected rows: %s&#x27;</span> %rows)<br> <br> <br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>(<span class="hljs-params">Model</span>):</span><br>        <span class="hljs-built_in">id</span> = IntegerField(<span class="hljs-string">&#x27;id&#x27;</span>,primary_key=<span class="hljs-literal">True</span>)<br>        name = StringField(<span class="hljs-string">&#x27;username&#x27;</span>)<br>        email = StringField(<span class="hljs-string">&#x27;email&#x27;</span>)<br>        password = StringField(<span class="hljs-string">&#x27;password&#x27;</span>)<br>    <span class="hljs-comment">#创建异步事件的句柄</span><br>    loop = asyncio.get_event_loop()<br> <br>    <span class="hljs-comment">#创建实例</span><br><span class="hljs-meta">    @asyncio.coroutine</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>():</span><br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> create_pool(loop=loop,host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">3308</span>, user=<span class="hljs-string">&#x27;sly&#x27;</span>, password=<span class="hljs-string">&#x27;070801382&#x27;</span>, db=<span class="hljs-string">&#x27;test&#x27;</span>)<br>        user = User(<span class="hljs-built_in">id</span>=<span class="hljs-number">8</span>, name=<span class="hljs-string">&#x27;sly&#x27;</span>, email=<span class="hljs-string">&#x27;slysly759@gmail.com&#x27;</span>, password=<span class="hljs-string">&#x27;fuckblog&#x27;</span>)<br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> user.save()<br>        r = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> User.find(<span class="hljs-string">&#x27;11&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(r)<br>        r = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> User.findAll()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>, r)<br>        r = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> User.findAll(<span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;12&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>, r)<br>        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> destroy_pool()<br> <br>    loop.run_until_complete(test())<br>    loop.close()<br>    <span class="hljs-keyword">if</span> loop.is_closed():<br>        sys.exit(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="知识点学习"><a href="#知识点学习" class="headerlink" title="知识点学习"></a>知识点学习</h2><h3 id="asyncio异步IO库"><a href="#asyncio异步IO库" class="headerlink" title="asyncio异步IO库"></a>asyncio异步IO库</h3><p>廖雪峰中的asyncio异步获取网页例子：</p><p>注意异步操作需要在<code>coroutine</code>中通过<code>yield from</code>完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-meta">@asyncio.coroutine</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wget</span>(<span class="hljs-params">host</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;wget %s...&#x27;</span> % host)<br>    connect = asyncio.open_connection(host, <span class="hljs-number">80</span>)<br>    reader, writer = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> connect<br>    header = <span class="hljs-string">&#x27;GET / HTTP/1.0\r\nHost: %s\r\n\r\n&#x27;</span> % host<br>    writer.write(header.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> writer.drain()<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        line = <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> reader.readline()<br>        <span class="hljs-keyword">if</span> line == <span class="hljs-string">b&#x27;\r\n&#x27;</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s header &gt; %s&#x27;</span> % (host, line.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>).rstrip()))<br>    <span class="hljs-comment"># Ignore the body, close the socket</span><br>    writer.close()<br><br>loop = asyncio.get_event_loop()<br>tasks = [wget(host) <span class="hljs-keyword">for</span> host <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;www.sina.com.cn&#x27;</span>, <span class="hljs-string">&#x27;www.sohu.com&#x27;</span>, <span class="hljs-string">&#x27;www.163.com&#x27;</span>]]<br>loop.run_until_complete(asyncio.wait(tasks))<br>loop.close()<br></code></pre></td></tr></table></figure><h3 id="logging日志库"><a href="#logging日志库" class="headerlink" title="logging日志库"></a>logging日志库</h3><p>知乎上有个问题里拿来的demo:</p><p>问题是为什么pycharm的traceback还有ERROR等打印顺序会发生变化，加了sleep就不会变化了。</p><p>我猜测是pycharm有一些异步执行的步骤，具体也没有在StackOverflow上找到答案。<code>作为TODO吧</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> time<br>logging.basicConfig(level=logging.DEBUG)<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;try&#x27;</span>)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    r = <span class="hljs-number">10</span> / <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;result&#x27;</span>, r)<br><span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:<br>    time.sleep(<span class="hljs-number">2</span>)<br>    logging.exception(e)<br><span class="hljs-keyword">except</span> ZeroDivisionError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;exception&#x27;</span>, e)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;no error&#x27;</span>)<br><span class="hljs-keyword">finally</span>:<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;finally.&#x27;</span>)<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;END**************&#x27;</span>)<br></code></pre></td></tr></table></figure><p>logging的级别：</p><ul><li>DEBUG</li><li>INFO</li><li>WARNING</li><li>ERROR</li><li>CRITICAL</li><li>NOSET</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">logger.debug(<span class="hljs-string">&#x27;debug message&#x27;</span>)<br>logger.info(<span class="hljs-string">&#x27;info message&#x27;</span>)<br>logger.warn(<span class="hljs-string">&#x27;warn message&#x27;</span>)<br>logger.error(<span class="hljs-string">&#x27;error message&#x27;</span>)<br>logger.critical(<span class="hljs-string">&#x27;critical message&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="yield和yield-from"><a href="#yield和yield-from" class="headerlink" title="yield和yield from"></a>yield和yield from</h3><h4 id="三个概念："><a href="#三个概念：" class="headerlink" title="三个概念："></a>三个概念：</h4><ul><li>生成器<br>  一边循环一边计算的机制，称为生成器：generator</li><li>可迭代<br>  可迭代是指一种可以在容器中逐个提取元素的能力。<br>  必须具备<code>__iter__()</code></li><li>迭代器<br>  <code>__iter__()</code><br>  <code>__next__()</code></li></ul><p>yield写斐波那契</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fab_yield</span>(<span class="hljs-params"><span class="hljs-built_in">max</span></span>):</span><br>    n, a, b = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> n&lt;<span class="hljs-built_in">max</span>:<br>        <span class="hljs-keyword">yield</span> b<br>        <span class="hljs-comment"># print b</span><br>        a, b = b, a + b<br>        n = n + <span class="hljs-number">1</span><br>f=fab_yield(<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(f))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f:<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><h4 id="yield-from"><a href="#yield-from" class="headerlink" title="yield from"></a>yield from</h4><blockquote><p>总之大意是原本的yield语句只能将CPU控制权还给直接调用者，当你想要将一个generator或者coroutine里带有yield语句的逻辑重构到另一个generator（原文是subgenerator）里的时候，会非常麻烦，因为外面的generator要负责为里面的generator做消息传递；所以某人有个想法是让python把消息传递封装起来，使其对程序猿透明，于是就有了yield from。</p></blockquote><p>假设A函数中有这样一个语句</p><blockquote><p>yield from B()</p></blockquote><p>B()返回的是一个可迭代（iterable）的对象b，那么A()会返回一个 generator——照我们的命名规范，名字叫a——那么：</p><ol><li>b迭代产生的每个值都直接传递给a的调用者。</li><li>所有通过<code>send</code>方法发送到a的值都被直接传递给b. 如果发送的值是<code>None</code>，则调用b的<code>__next__()</code>方法，否则调用b的<code>send</code>方法。如果对b的方法调用产生<code>StopIteration</code>异常，a会继续执行<code>yield from</code>后面的语句，而其他异常则会传播到a中，导致a在执行<code>yield from</code>的时候抛出异常。</li><li>如果有除<code>GeneratorExit</code>以外的异常被throw到a中的话，该异常会被直接throw到b中。如果b的<code>throw</code>方法抛出<code>StopIteration</code>， a会继续执行；其他异常则会导致a也抛出异常。</li><li>如果一个<code>GeneratorExit</code>异常被throw到a中，或者a的<code>close</code>方法被调用了，并且b也有<code>close</code>方法的话，b的<code>close</code>方法也会被调用。如果b的这个方法抛出了异常，则会导致a也抛出异常。 反之，如果b成功close掉了，a也会抛出异常，但是是特定的<code>GeneratorExit</code>异常。</li><li>a中<code>yield fro</code>m表达式的求值结果是b迭代结束时抛出的<code>StopIteration</code>异常的第一个参数。</li><li>b中的<code>return &lt;expr&gt;</code>语句实际上会抛出<code>StopIteration(&lt;expr&gt;)</code> 异常，所以b中return的值会成为a中<code>yield from</code>表达式的返回值。</li></ol><h4 id="关于协程Coroutine"><a href="#关于协程Coroutine" class="headerlink" title="关于协程Coroutine"></a>关于协程Coroutine</h4><ul><li>不是线程切换，而是由程序自身控制，因此，没有线程切换的开销</li><li>不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。</li></ul><hr>]]></content>
    
    
    <categories>
      
      <category>Codes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SIM模块的串口通信例程</title>
    <link href="/posts/42320/"/>
    <url>/posts/42320/</url>
    
    <content type="html"><![CDATA[<p>项目里写的SIM模块串口通信例程，模块使用SIM7100，支持2G&#x2F;3G&#x2F;4G，交互使用串口中的AT命令实现，采用非阻塞，提高交互效率。</p><span id="more"></span><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>详见gayhub：</p><div class="github-widget" data-repo="cloisonne/SIM7100-Serial-Communication"></div><hr><h3 id="函数分析"><a href="#函数分析" class="headerlink" title="函数分析"></a>函数分析</h3><p>得到的数据使用结构体保存，方便丢给主程序。<br>实现的功能函数如下，主要包括：</p><ol><li><p>串口的设置和打开</p></li><li><p>串口的发送和接受函数</p></li><li><p>获取模块的信号质量</p></li><li><p>获取模块的当前网络制式</p></li><li><p>获取模块的运营商</p></li><li><p>选择模块的网络模式</p></li><li><p>对模块的离线控制</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br><span class="hljs-keyword">int</span> csq;   <span class="hljs-comment">// Signal Quality</span><br><span class="hljs-keyword">int</span> ber;   <span class="hljs-comment">// Bit Error Rate</span><br><span class="hljs-keyword">char</span> provider_name[<span class="hljs-number">30</span>]; <span class="hljs-comment">// Provider Name</span><br><span class="hljs-keyword">char</span> sim_mode[<span class="hljs-number">30</span>];<br>&#125;StateInfo;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">open_port</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">set_opt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fd, <span class="hljs-keyword">int</span> nSpeed, <span class="hljs-keyword">int</span> nBits, <span class="hljs-keyword">char</span> nEvent, <span class="hljs-keyword">int</span> nStop)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">serial_send</span><span class="hljs-params">(<span class="hljs-keyword">int</span> file_descriptor, <span class="hljs-keyword">char</span> *buffer, <span class="hljs-keyword">size_t</span> data_len)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_operator</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fd,StateInfo *stateinfo)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_csq</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fd,StateInfo *stateinfo)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_mod</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fd,StateInfo *stateinfo)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mode_selection</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fd,<span class="hljs-keyword">int</span> mode)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">offline_control</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fd,<span class="hljs-keyword">int</span> isornot)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">csq_detected</span><span class="hljs-params">(<span class="hljs-keyword">int</span> csq)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mod_detected</span><span class="hljs-params">(<span class="hljs-keyword">int</span> mod,StateInfo *stateinfo)</span></span>;<br></code></pre></td></tr></table></figure><hr><h3 id="获取信号质量为例"><a href="#获取信号质量为例" class="headerlink" title="获取信号质量为例"></a>获取信号质量为例</h3><p>主要是通过发送AT命令（非阻塞），并处理接受的数据，来和模块交互。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_csq</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fd,StateInfo *stateinfo)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> nread;<br><span class="hljs-keyword">char</span> buff[SIZE];<br><br><span class="hljs-keyword">char</span> sbuffer[]=<span class="hljs-string">&quot;AT+CSQ\r&quot;</span>;<br>serial_send(fd,sbuffer,<span class="hljs-keyword">sizeof</span>(sbuffer));<br><br><span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>(!flag)<br>&#123;<br><span class="hljs-keyword">while</span>((nread=read(fd,buff,SIZE))&gt;<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">//printf(&quot;\nLen %d\n&quot;,nread);</span><br>buff[nread]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br><span class="hljs-comment">//printf(&quot;\n%s&quot;,buff);</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(buff,<span class="hljs-string">&quot;CSQ&quot;</span>)!=<span class="hljs-literal">NULL</span>)<br>&#123;<br>stateinfo-&gt;ber=<span class="hljs-number">0</span>;<br>stateinfo-&gt;csq=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>(buff[i]!=<span class="hljs-string">&#x27;,&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(buff[i]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;buff[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>&#123;<br>stateinfo-&gt;csq=(stateinfo-&gt;csq)*<span class="hljs-number">10</span>+(buff[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br>i++;<br>&#125;<br><span class="hljs-keyword">while</span>(buff[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(buff[i]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;buff[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>&#123;<br>stateinfo-&gt;ber=(stateinfo-&gt;ber)*<span class="hljs-number">10</span>+(buff[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br>i++;<br>&#125;<br>flag = <span class="hljs-number">1</span>;<br>stateinfo-&gt;csq=csq_detected(stateinfo-&gt;csq);<br>&#125;<br>&#125;<br><span class="hljs-comment">//usleep(5000);</span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d + %d\n&quot;</span>,stateinfo-&gt;csq,stateinfo-&gt;ber);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n--get csq&amp;ber end--\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>Codes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>LTE</tag>
      
      <tag>GSM</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>百万英雄答题辅助(记一次成功的pull request)</title>
    <link href="/posts/18682/"/>
    <url>/posts/18682/</url>
    
    <content type="html"><![CDATA[<p>在gayhub上clone了别人的辅助，由跳一跳改动而来的，效果不太好，自己做了debug和改进并PR到作者。</p><span id="more"></span><hr><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>全部代码见gayhub：</p><div class="github-widget" data-repo="cloisonne/MillionHeroes"></div><h4 id="不同分辨率适配"><a href="#不同分辨率适配" class="headerlink" title="不同分辨率适配"></a>不同分辨率适配</h4><p>config采用json格式，使用起来非常方便。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">open_accordant_config</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    调用配置文件</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    screen_size = _get_screen_size()<br>    <span class="hljs-built_in">print</span>(screen_size)<br>    config_file = <span class="hljs-string">&quot;&#123;path&#125;/config/&#123;screen_size&#125;/config.json&quot;</span>.<span class="hljs-built_in">format</span>(<br>        path=sys.path[<span class="hljs-number">0</span>],<br>        screen_size=screen_size<br>    )<br>    <span class="hljs-keyword">if</span> os.path.exists(config_file):<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(config_file, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Load config file from &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(config_file))<br>            <span class="hljs-keyword">return</span> json.load(f)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;&#123;&#125;/config/default.json&#x27;</span>.<span class="hljs-built_in">format</span>(sys.path[<span class="hljs-number">0</span>]), <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Load default config&quot;</span>)<br>            <span class="hljs-keyword">return</span> json.load(f)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_get_screen_size</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    获取手机屏幕大小</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    size_str = os.popen(<span class="hljs-string">&#x27;adb shell wm size&#x27;</span>).read()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> size_str:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请安装 ADB 及驱动并配置环境变量&#x27;</span>)<br>        sys.exit()<br>    m = re.search(<span class="hljs-string">r&#x27;(\d+)x(\d+)&#x27;</span>, size_str)<br>    <span class="hljs-keyword">if</span> m:<br>        <span class="hljs-comment">#return &quot;&#123;height&#125;x&#123;width&#125;&quot;.format(height=m.group(2), width=m.group(1))</span><br>        <span class="hljs-comment">#print(&quot;&#123;width&#125;x&#123;height&#125;&quot;.format(height=m.group(2), width=m.group(1)))</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;width&#125;x&#123;height&#125;&quot;</span>.<span class="hljs-built_in">format</span>(height=m.group(<span class="hljs-number">2</span>), width=m.group(<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1080x1920&quot;</span><br></code></pre></td></tr></table></figure><h4 id="换用百度OCR"><a href="#换用百度OCR" class="headerlink" title="换用百度OCR"></a>换用百度OCR</h4><p>使用了百度aip</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs py">get_text_from_image = partial(bai_get_text,<br>                              app_id=config[<span class="hljs-string">&#x27;app_id&#x27;</span>],<br>                              app_key=config[<span class="hljs-string">&#x27;app_key&#x27;</span>],<br>                              app_secret=config[<span class="hljs-string">&#x27;app_secret&#x27;</span>],<br>                              api_version=config[<span class="hljs-string">&#x27;api_version&#x27;</span>][<span class="hljs-number">0</span>],<br>                              timeout=<span class="hljs-number">5</span>)<br>  <br>    im = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;./screenshot.png&quot;</span>)<br>    screen_end = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;截图用时：&#x27;</span> + <span class="hljs-built_in">str</span>(screen_end - start) + <span class="hljs-string">&#x27;秒&#x27;</span>)<br><br>    <span class="hljs-comment"># region = im.crop((70,300, 1010,600))    #裁剪的区域 百万超人 手机1080*1920 高度范围300~600 // 芝士超人250-350</span><br>    <span class="hljs-comment"># region = im.crop((70,200,650,400))    #裁剪的区域 百万超人 手机720*1080 高度范围300~600 // 芝士超人250-350</span><br><br>    region = (<span class="hljs-built_in">tuple</span>(region_kind))<br>    region = im.crop(region)<br>    region.save(<span class="hljs-string">&quot;./crop_test1.png&quot;</span>)<br><br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./crop_test1.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>)<br>    img_data = f.read()<br>    f.close()<br><br>    ocr_start =time.time()<br><br>    keyword = get_text_from_image(<br>        image_data=img_data,<br>    )<br>    <span class="hljs-built_in">print</span>(keyword)<br></code></pre></td></tr></table></figure><h4 id="网页抓取流程优化"><a href="#网页抓取流程优化" class="headerlink" title="网页抓取流程优化"></a>网页抓取流程优化</h4><p>省去了不需要的内容，提升速度。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">page</span>(<span class="hljs-params">html</span>):</span><br>    <span class="hljs-comment"># 初始化</span><br>    soup = BeautifulSoup(html, <span class="hljs-string">&#x27;lxml&#x27;</span>)<br>    results = []<br><br>    <span class="hljs-comment"># 获取结果来源</span><br>    result_set = soup.find(<span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;content_left&#x27;</span>)  <span class="hljs-comment"># 结果全显示在页面左边</span><br>    <span class="hljs-keyword">if</span> result_set <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;抓取失败，跳过&quot;</span>)<br>        <span class="hljs-comment">#return</span><br>    <span class="hljs-keyword">else</span>:<br>        result_set = result_set.find_all(<span class="hljs-string">&#x27;div&#x27;</span>, class_=<span class="hljs-string">&#x27;c-container&#x27;</span>)  <span class="hljs-comment"># 结果class固定，其余为硬广</span><br>        <span class="hljs-comment">#print(result_set)</span><br>    <span class="hljs-comment">#c_abstract = None</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(result_set)):  <span class="hljs-comment"># 因为要index所以就用range来</span><br>        result = result_set[i]  <span class="hljs-comment"># 其实就是result_div</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;result-op&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> result[<span class="hljs-string">&#x27;class&#x27;</span>]:  <span class="hljs-comment"># 不是软广</span><br>            r_from = result.find(class_=<span class="hljs-string">&#x27;c-abstract&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> r_from:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">for</span> em <span class="hljs-keyword">in</span> r_from.find_all(<span class="hljs-string">&#x27;em&#x27;</span>):  <span class="hljs-comment"># 移除abstract中的em标签</span><br>                em.unwrap()<br>            c_abstract = r_from.get_text()<br>            <span class="hljs-built_in">print</span>(c_abstract)<br>    <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><h4 id="主程序流程优化"><a href="#主程序流程优化" class="headerlink" title="主程序流程优化"></a>主程序流程优化</h4><p>加入了流程的优化，把load config的时间提前，便于节约时间。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> urllib.request, sys,base64,json,os,time,baiduSearch,screenshot,re<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> common <span class="hljs-keyword">import</span> config<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> partial<br><span class="hljs-keyword">from</span> common.baiduocr <span class="hljs-keyword">import</span> get_text_from_image <span class="hljs-keyword">as</span> bai_get_text<br><br><br>index = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;input: 百万英雄-1 冲顶大会-2 芝士超人-3\n&quot;</span>)<br>config = config.open_accordant_config()<br>region_kind = config[<span class="hljs-string">&#x27;region_million&#x27;</span>]<br><span class="hljs-keyword">if</span> index==<span class="hljs-string">&#x27;1&#x27;</span>:<br>    region_kind = config[<span class="hljs-string">&#x27;region_million&#x27;</span>]<br><span class="hljs-keyword">elif</span> index==<span class="hljs-string">&#x27;2&#x27;</span>:<br>    region_kind = config[<span class="hljs-string">&#x27;region_top&#x27;</span>]<br><span class="hljs-keyword">elif</span> index==<span class="hljs-string">&#x27;3&#x27;</span>:<br>    region_kind = config[<span class="hljs-string">&#x27;region_super&#x27;</span>]<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;输入格式错误&#x27;</span>)<br><br>get_text_from_image = partial(bai_get_text,<br>                              app_id=config[<span class="hljs-string">&#x27;app_id&#x27;</span>],<br>                              app_key=config[<span class="hljs-string">&#x27;app_key&#x27;</span>],<br>                              app_secret=config[<span class="hljs-string">&#x27;app_secret&#x27;</span>],<br>                              api_version=config[<span class="hljs-string">&#x27;api_version&#x27;</span>][<span class="hljs-number">0</span>],<br>                              timeout=<span class="hljs-number">5</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">start_answer</span>():</span><br>    <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;题目出现后按回车：\n&#x27;</span>)<br><br>    start = time.time()<br>    <span class="hljs-comment"># 开始截图</span><br>    <span class="hljs-comment">#screenshot.check_screenshot()</span><br><br>    screenshot.pull_screenshot()<br><br>    im = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;./screenshot.png&quot;</span>)<br>    screen_end = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;截图用时：&#x27;</span> + <span class="hljs-built_in">str</span>(screen_end - start) + <span class="hljs-string">&#x27;秒&#x27;</span>)<br><br>    <span class="hljs-comment"># region = im.crop((70,300, 1010,600))    #裁剪的区域 百万超人 手机1080*1920 高度范围300~600 // 芝士超人250-350</span><br>    <span class="hljs-comment"># region = im.crop((70,200,650,400))    #裁剪的区域 百万超人 手机720*1080 高度范围300~600 // 芝士超人250-350</span><br><br>    region = (<span class="hljs-built_in">tuple</span>(region_kind))<br>    region = im.crop(region)<br>    region.save(<span class="hljs-string">&quot;./crop_test1.png&quot;</span>)<br><br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./crop_test1.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>)<br>    img_data = f.read()<br>    f.close()<br><br>    ocr_start =time.time()<br><br>    keyword = get_text_from_image(<br>        image_data=img_data,<br>    )<br>    <span class="hljs-built_in">print</span>(keyword)<br>    ocr_end = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;OCR用时：&#x27;</span> + <span class="hljs-built_in">str</span>(ocr_end - ocr_start) + <span class="hljs-string">&#x27;秒&#x27;</span>)<br><br>    <span class="hljs-keyword">try</span>:<br>        baiduSearch.search(keyword)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error&#x27;</span>)<br>        <span class="hljs-keyword">pass</span><br><br>    end = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;程序用时：&#x27;</span> + <span class="hljs-built_in">str</span>(end - start) + <span class="hljs-string">&#x27;秒&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(keyword)<br><br><br><span class="hljs-comment">#---- 主程序</span><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>    start_answer()<br><br><br><br></code></pre></td></tr></table></figure><hr><h3 id="PR流程"><a href="#PR流程" class="headerlink" title="PR流程"></a>PR流程</h3><ol><li><p>folk该repository</p></li><li><p>clone该repository</p></li><li><p>加入远程连接</p><p> git remote -v</p><p> git remote add upstream <a href="https://github.com/**/*.git">https://github.com/**/*.git</a></p></li><li><p>建立新的分支</p><p> git checkout -b name</p></li><li><p>修改commit 并push到新分支</p></li><li><p>发起PR  “New pull requests”</p></li><li><p>等待merge</p></li></ol><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="程序可改进的"><a href="#程序可改进的" class="headerlink" title="程序可改进的"></a>程序可改进的</h4><p>加入不同搜索引擎的词频，相关性等值，可以实现自动答题，目前已经有人实现了相关功能。</p><h4 id="程序的复制性"><a href="#程序的复制性" class="headerlink" title="程序的复制性"></a>程序的复制性</h4><p>整个程序复制性很强，pull截图拉到python里处理可以解决大部分手机的问题。</p><hr>]]></content>
    
    
    <categories>
      
      <category>Codes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓄水池抽样证明以及例题</title>
    <link href="/posts/62400/"/>
    <url>/posts/62400/</url>
    
    <content type="html"><![CDATA[<p>蓄水池抽样在kmeans算法中有所应用，诸如Cloudera ML的分布式蓄水池抽样和加权分布式蓄水池抽样。</p><span id="more"></span><hr><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><ol><li>先选取数据流中的前k个元素，保存在集合A中；</li><li>从第j（k + 1 &lt;&#x3D; j &lt;&#x3D; n）个元素开始，每次先以概率p &#x3D; k&#x2F;j选择是否让第j个元素留下。若j被选中，则从A中随机选择一个元素并用该元素j替换它；否则直接淘汰该元素；</li><li>重复步骤2直到结束，最后集合A中剩下的就是保证随机抽取的k个元素。</li></ol><hr><h3 id="两个leetcode例题"><a href="#两个leetcode例题" class="headerlink" title="两个leetcode例题"></a>两个leetcode例题</h3><p>转载自<a href="https://www.jianshu.com/p/63f6cf19923d">这里</a></p><ul><li>Linked List Random Node</li></ul><p>Given a singly linked list, return a random node’s value from the linked list. Each node must have the same probability of being chosen.</p><p>Follow up:<br>What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?</p><p>Example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Init a singly linked list [1,2,3].</span><br>ListNode head = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">1</span>);<br>head.next = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">2</span>);<br>head.next.next = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">3</span>);<br>Solution solution = <span class="hljs-keyword">new</span> Solution(head);<br><br><span class="hljs-comment">// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.</span><br>solution.getRandom();<br></code></pre></td></tr></table></figure><p>Solution:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    Random r;<br>    ListNode head;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Solution</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.r = <span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-keyword">this</span>.head = head;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getRandom</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">1</span>;<br>        ListNode nodeVal = head;<br>        ListNode curr = head;<br>        <span class="hljs-keyword">while</span> (curr != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (r.nextInt(count++) == <span class="hljs-number">0</span>) &#123;<br>                nodeVal = curr;<br>            &#125;<br>            curr = curr.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nodeVal.val;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Random Pick Index</li></ul><p>Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.</p><p>Note:<br>The array size can be very large. Solution that uses too much extra space will not pass the judge.</p><p>Example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>&#125;;<br>Solution solution = <span class="hljs-keyword">new</span> Solution(nums);<br><br><span class="hljs-comment">// pick(3) should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.</span><br>solution.pick(<span class="hljs-number">3</span>);<br><br><span class="hljs-comment">// pick(1) should return 0. Since in the array only nums[0] is equal to 1.</span><br>solution.pick(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>Solution:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] nums;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Solution</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.nums = nums;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pick</span><span class="hljs-params">(<span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> index = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">1</span>;<br>        Random random = <span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] == target) &#123;<br>                <span class="hljs-keyword">if</span> (random.nextInt(count++) == <span class="hljs-number">0</span>) &#123;<br>                    index = i;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="kmeans中的蓄水池抽样"><a href="#kmeans中的蓄水池抽样" class="headerlink" title="kmeans中的蓄水池抽样"></a>kmeans中的蓄水池抽样</h3><p>转载自<a href="http://blog.jobbole.com/42550/">这里</a></p><p><strong>Cloudera ML</strong>： 基于hadoop的ML</p><p>分布式蓄水池抽样是Greg讨论的第一种算法。可以从前面的讨论中发现，基本的蓄水池抽样要求对数据流进行顺序读取。要进行容量为k的分布式蓄水池抽样（前面讨论的容量都为1）我们使用mapreduce 模拟sql中的ORDER BY RAND (随机抽取)。对于集合中的每一个元素，都产生一个0-1的随机数，之后选取随机值最大的前k个元素。这种方法在对大数据集进行分层抽样的时候非常管用。这里每一个分层都都是一些分类变量如性别，年龄，地理信息等的组合。注意如果输入的数据集分布极端的不均匀，那么抽样可能不能覆盖到所有的层级。为了对每种分类的组合进行抽样，cloudera ML 提供了sample命令，它可以操作纯文本或者hive中的表。</p><p>第二个算法更加好玩：加权分布式蓄水池抽样。这里集合中的数据是有权重的，算法希望数据被抽样选中的概率和该数据的权重成比例。实际上这个问题之前并不一定有解，直到2005年pavlos efraimidis和paul spirakis的论文《weighted random sampling with a reservoir》。他们的解法既简单又优雅，基本思想和上面的分布式蓄水池抽样一致：<code>对于每个数据计算一个0-1的值R，并求r的n次方根作为该数据的新的R值。</code>这里的n就是该数据的权重。最终算法返回前k个R值最高的数据然后返回。根据计算规则，权重越大的数据计算所得的R值越接近1，所以越有可能被返回。</p><p>在cloudera ML项目中，为了更好地使用k-means++算法（K-均值++算法），我们会首先使用加权的蓄水池抽样算法对输入数据进行抽样。ksketch命令会为k-means++算法进行初始化–在输入数据上进行迭代操作，选择样本抽样。每次选取过程，数据被选入样本的概率和该数据与当前样本中最短距离节点的距离成比例。通过使用加权的蓄水池抽样算法，只需扫描数据一遍就能决定样本组成（一般方法需要首先遍历一次以计算出聚类的总代价，之后第二次遍历根据第一次的计算结果进行样本选择）。</p>]]></content>
    
    
    <categories>
      
      <category>Codes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于二叉树的算法题</title>
    <link href="/posts/17951/"/>
    <url>/posts/17951/</url>
    
    <content type="html"><![CDATA[<p>关于二叉树的算法题，用java写，包括剑指offer和网上各种。</p><span id="more"></span><hr><h3 id="二叉树的下一个节点"><a href="#二叉树的下一个节点" class="headerlink" title="二叉树的下一个节点"></a>二叉树的下一个节点</h3><p>给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">public class TreeLinkNode &#123;</span><br><span class="hljs-comment">    int val;</span><br><span class="hljs-comment">    TreeLinkNode left = null;</span><br><span class="hljs-comment">    TreeLinkNode right = null;</span><br><span class="hljs-comment">    TreeLinkNode next = null;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    TreeLinkNode(int val) &#123;</span><br><span class="hljs-comment">        this.val = val;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeLinkNode <span class="hljs-title">GetNext</span><span class="hljs-params">(TreeLinkNode pNode)</span></span><br><span class="hljs-function">    </span>&#123;<br>        TreeLinkNode curNode = <span class="hljs-keyword">null</span>;<br><span class="hljs-comment">// 右孩子存在</span><br>        <span class="hljs-keyword">if</span>(pNode.right!=<span class="hljs-keyword">null</span>)&#123;<br>            curNode = pNode.right;<br>            <span class="hljs-keyword">while</span>(curNode.left!=<span class="hljs-keyword">null</span>)curNode=curNode.left;<br>            <span class="hljs-keyword">return</span> curNode;<br>        &#125;<br><span class="hljs-comment">//右孩子不存在 p是左孩子 找父节点</span><br>        <span class="hljs-keyword">if</span>(pNode.next==<span class="hljs-keyword">null</span>)<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span>(pNode==pNode.next.left)&#123;<br>            <span class="hljs-keyword">return</span> pNode.next;<br>        &#125;<br><span class="hljs-comment">//右孩子不存在 p是右孩子 追溯父节点 找是左孩子的那个的父节点</span><br>        curNode=pNode.next;<br>        <span class="hljs-keyword">while</span>(curNode.next!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(curNode==curNode.next.left)<br>                <span class="hljs-keyword">return</span> curNode.next;<br>        curNode=curNode.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="对称的二叉树"><a href="#对称的二叉树" class="headerlink" title="对称的二叉树"></a>对称的二叉树</h3><p>请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">public class TreeNode &#123;</span><br><span class="hljs-comment">    int val = 0;</span><br><span class="hljs-comment">    TreeNode left = null;</span><br><span class="hljs-comment">    TreeNode right = null;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public TreeNode(int val) &#123;</span><br><span class="hljs-comment">        this.val = val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isSymmetrical</span><span class="hljs-params">(TreeNode pRoot)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> isSymmetrical(pRoot, pRoot);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isSymmetrical</span><span class="hljs-params">(TreeNode pRoot1,TreeNode pRoot2)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(pRoot1==<span class="hljs-keyword">null</span>&amp;&amp;pRoot2==<span class="hljs-keyword">null</span>)<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pRoot1==<span class="hljs-keyword">null</span>||pRoot2==<span class="hljs-keyword">null</span>)<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pRoot1.val!=pRoot2.val)<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">return</span> isSymmetrical(pRoot1.left,pRoot2.right)&amp;&amp;isSymmetrical(pRoot2.left,pRoot1.right);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="按之字形顺序打印二叉树"><a href="#按之字形顺序打印二叉树" class="headerlink" title="按之字形顺序打印二叉树"></a>按之字形顺序打印二叉树</h3><p>请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。</p><p><strong>注意</strong>： 偶数行reverse方法效率太低了。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">public class TreeNode &#123;</span><br><span class="hljs-comment">    int val = 0;</span><br><span class="hljs-comment">    TreeNode left = null;</span><br><span class="hljs-comment">    TreeNode right = null;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public TreeNode(int val) &#123;</span><br><span class="hljs-comment">        this.val = val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; Print(TreeNode pRoot) &#123;<br><span class="hljs-keyword">int</span> layer =<span class="hljs-number">1</span>;<br>        Stack&lt;TreeNode&gt; s1 = <span class="hljs-keyword">new</span> Stack&lt;TreeNode&gt;(); <span class="hljs-comment">//存奇数层</span><br>        s1.push(pRoot);<br>        Stack&lt;TreeNode&gt; s2 = <span class="hljs-keyword">new</span> Stack&lt;TreeNode&gt;();<span class="hljs-comment">//存偶数层</span><br>        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();<br>        <br>        <span class="hljs-keyword">while</span>(!s1.empty()||!s2.empty())&#123;<br>            <span class="hljs-keyword">if</span>(layer%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>)&#123;<br>                ArrayList&lt;Integer&gt; temp = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>                <span class="hljs-keyword">while</span>(!s1.empty())&#123;<br>                    TreeNode node = s1.pop();<br>                    <span class="hljs-keyword">if</span>(node!=<span class="hljs-keyword">null</span>)&#123;<br>                        temp.add(node.val);<br>                        System.out.print(node.val+<span class="hljs-string">&#x27; &#x27;</span>);<br>                        s2.push(node.left);<br>                        s2.push(node.right);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(!temp.isEmpty())&#123;<br>                    list.add(temp);<br>                    layer++;<br>                    System.out.println();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                ArrayList&lt;Integer&gt; temp = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>                <span class="hljs-keyword">while</span>(!s2.empty())&#123;<br>                    TreeNode node = s2.pop();<br>                    <span class="hljs-keyword">if</span>(node!=<span class="hljs-keyword">null</span>)&#123;<br>                        temp.add(node.val);<br>                        System.out.print(node.val+<span class="hljs-string">&#x27; &#x27;</span>);<br>                        s1.push(node.right);<br>                        s1.push(node.left);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(!temp.isEmpty())&#123;<br>                    list.add(temp);<br>                    layer++;<br>                    System.out.println();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="把二叉树打印成多行"><a href="#把二叉树打印成多行" class="headerlink" title="把二叉树打印成多行"></a>把二叉树打印成多行</h3><p>从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">public class TreeNode &#123;</span><br><span class="hljs-comment">    int val = 0;</span><br><span class="hljs-comment">    TreeNode left = null;</span><br><span class="hljs-comment">    TreeNode right = null;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public TreeNode(int val) &#123;</span><br><span class="hljs-comment">        this.val = val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; Print(TreeNode pRoot) &#123;<br>    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();<br>        <span class="hljs-keyword">if</span>(pRoot==<span class="hljs-keyword">null</span>)<span class="hljs-keyword">return</span> list;<br>        Queue&lt;TreeNode&gt; layer = <span class="hljs-keyword">new</span> LinkedList&lt;TreeNode&gt;();<br>        ArrayList&lt;Integer&gt; temp = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>        layer.add(pRoot);<br>        <span class="hljs-keyword">int</span> start=<span class="hljs-number">0</span>,end=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(!layer.isEmpty())&#123;<br>            TreeNode cur = layer.remove();<br>            temp.add(cur.val);<br>            start++;<br>            <span class="hljs-keyword">if</span>(cur.left!=<span class="hljs-keyword">null</span>)layer.add(cur.left);<br>            <span class="hljs-keyword">if</span>(cur.right!=<span class="hljs-keyword">null</span>)layer.add(cur.right);<br>            <span class="hljs-keyword">if</span>(start==end)&#123;<br>                end=layer.size();<br>                start=<span class="hljs-number">0</span>;<br>                list.add(temp);<br>                temp=<span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="序列化二叉树"><a href="#序列化二叉树" class="headerlink" title="序列化二叉树"></a>序列化二叉树</h3><p>请实现两个函数，分别用来序列化和反序列化二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">public class TreeNode &#123;</span><br><span class="hljs-comment">    int val = 0;</span><br><span class="hljs-comment">    TreeNode left = null;</span><br><span class="hljs-comment">    TreeNode right = null;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public TreeNode(int val) &#123;</span><br><span class="hljs-comment">        this.val = val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function">String <span class="hljs-title">Serialize</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>)<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        StringBuilder res = <span class="hljs-keyword">new</span> StringBuilder();<br>        Serialize2(root,res);<br>        <span class="hljs-keyword">return</span> res.toString();<br>  &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Serialize2</span><span class="hljs-params">(TreeNode root,StringBuilder res)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>)&#123;<br>            res.append(<span class="hljs-string">&quot;#,&quot;</span>);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        res.append(root.val);<br>        res.append(<span class="hljs-string">&#x27;,&#x27;</span>);<br>        Serialize2(root.left,res);<br>        Serialize2(root.right,res);<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> index=-<span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-function">TreeNode <span class="hljs-title">Deserialize</span><span class="hljs-params">(String str)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(str.length()==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        String[] strs = str.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        <span class="hljs-keyword">return</span> Deserialize2(strs);<br>  &#125;<br><br>    <span class="hljs-function">TreeNode <span class="hljs-title">Deserialize2</span><span class="hljs-params">(String[] strs)</span></span>&#123;<br>        index++;<br>        <span class="hljs-keyword">if</span>(!strs[index].equals(<span class="hljs-string">&quot;#&quot;</span>))&#123;<br>            TreeNode root = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">0</span>);<br>            root.val=Integer.parseInt(strs[index]);<br>            root.left=Deserialize2(strs);<br>            root.right=Deserialize2(strs);<br>            <span class="hljs-keyword">return</span> root;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二叉搜索树的第k个结点"><a href="#二叉搜索树的第k个结点" class="headerlink" title="二叉搜索树的第k个结点"></a>二叉搜索树的第k个结点</h3><p>给定一颗二叉搜索树，请找出其中的第k大的结点。例如， 5 &#x2F; \ 3 7 &#x2F;\ &#x2F;\ 2 4 6 8 中，按结点数值大小顺序第三个结点的值为4。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">public class TreeNode &#123;</span><br><span class="hljs-comment">    int val = 0;</span><br><span class="hljs-comment">    TreeNode left = null;</span><br><span class="hljs-comment">    TreeNode right = null;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public TreeNode(int val) &#123;</span><br><span class="hljs-comment">        this.val = val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>    <span class="hljs-function">TreeNode <span class="hljs-title">KthNode</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> k)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(root!=<span class="hljs-keyword">null</span>&amp;&amp;k&gt;=<span class="hljs-number">1</span>)&#123;<br>            TreeNode node = KthNode(root.left,k);<br>            <span class="hljs-keyword">if</span>(node!=<span class="hljs-keyword">null</span>)<span class="hljs-keyword">return</span> node;<br>            index++;<br>            <span class="hljs-keyword">if</span>(index==k)<span class="hljs-keyword">return</span> root;<br>            node= KthNode(root.right,k);<br>            <span class="hljs-keyword">if</span>(node!=<span class="hljs-keyword">null</span>)<span class="hljs-keyword">return</span> node;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Codes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划的三个例子</title>
    <link href="/posts/55495/"/>
    <url>/posts/55495/</url>
    
    <content type="html"><![CDATA[<p>走楼梯和挖金矿两个例子，解析动态规划的由来和算法结构。然后是剑指offer的剪绳子问题。——其实就是斐波那契和一个2^n-1，用python两行就写完了，但是违背了练习算法的初衷，尽量都用java完成。</p><span id="more"></span><hr><h2 id="走楼梯"><a href="#走楼梯" class="headerlink" title="走楼梯"></a>走楼梯</h2><p><strong>题目</strong>：</p><blockquote><p>有一座高度是10级台阶的楼梯，从下往上走，每跨一步只能向上1级或者2级台阶。要求用程序来求出一共有多少种走法。</p></blockquote><h3 id="贪婪"><a href="#贪婪" class="headerlink" title="贪婪"></a>贪婪</h3><p>排列组合，枚举.   时间复杂度:指数级。</p><h3 id="倒推分析"><a href="#倒推分析" class="headerlink" title="倒推分析"></a>倒推分析</h3><p>先看动态规划的三个概念：</p><ul><li>最优子结构</li><li>边界</li><li>转移公式</li></ul><p>最优子结构为F(9)+F(8)&#x3D;F(10)，边界为F(1) F(2)，转移公式为：<code>F(n)=F(n-1)+F(n-2)</code>。</p><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><p>时间复杂度： 类似二叉树  <code>O(2^n-1)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getClimbingWays</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br><span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n==<span class="hljs-number">2</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">return</span> getClimbingWays(n-<span class="hljs-number">1</span>)+getClimbingWays(n-<span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="备忘录算法"><a href="#备忘录算法" class="headerlink" title="备忘录算法"></a>备忘录算法</h3><p>一个hashmap储存计算过的，时间复杂度O(n)，空间复杂度O(n)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getClimbingWays</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, HashMap&lt;Integer,Integer&gt; map)</span></span>&#123;<br><span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n==<span class="hljs-number">2</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(map.contains(n)<br><span class="hljs-keyword">return</span> map.get(n);<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">int</span> value = getClimbingWays(n-<span class="hljs-number">1</span>) + getClimbingWays(n-<span class="hljs-number">2</span>);<br>map.put(n,value);<br><span class="hljs-keyword">return</span> value;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>保留前两个状态，迭代：</p><p>时间复杂度：O(n)  空间复杂度: O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getClimbingWays</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br><span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n==<span class="hljs-number">2</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">int</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> b=<span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> temp=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">3</span>;i&lt;=n;i++)&#123;<br>temp = a+b;<br>a=b;<br>b=temp;<br>&#125;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="挖金矿问题"><a href="#挖金矿问题" class="headerlink" title="挖金矿问题"></a>挖金矿问题</h2><blockquote><p>有一个国家发现了5座金矿，每座金矿的黄金储量不同，需要参与挖掘的工人数也不同。参与挖矿工人的总数是10人。每座金矿要么全挖，要么不挖，不能派出一半人挖取一半金矿。要求用程序求解出，要想得到尽可能多的黄金，应该选择挖取哪几座金矿？</p></blockquote><h3 id="暴力枚举"><a href="#暴力枚举" class="headerlink" title="暴力枚举"></a>暴力枚举</h3><p>pass</p><hr><h3 id="三要素分析"><a href="#三要素分析" class="headerlink" title="三要素分析"></a>三要素分析</h3><p><img src="http://o7myibfc7.bkt.clouddn.com/%E9%87%91%E7%9F%BF1.jpg" alt="金矿分析1"></p><p><img src="http://o7myibfc7.bkt.clouddn.com/%E9%87%91%E7%9F%BF2.jpg" alt="金矿分析2"></p><ul><li><strong>最优子结构</strong>：挑出一个金矿，挖与不挖，两种子结构</li><li><strong>边界</strong>：只剩一个金矿，挖与不挖</li><li><strong>转移公式</strong>： n金矿数   w工人数 g[]金矿的产量  p[]需要的人数</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">F(<span class="hljs-params">n</span>,<span class="hljs-params">w</span>)</span> = <span class="hljs-number">0</span>    (n&lt;=<span class="hljs-number">1</span>, w&lt;p<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>);<br><span class="hljs-constructor">F(<span class="hljs-params">n</span>,<span class="hljs-params">w</span>)</span> = g<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>     (n==<span class="hljs-number">1</span>, w&gt;=p<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>);<br><span class="hljs-constructor">F(<span class="hljs-params">n</span>,<span class="hljs-params">w</span>)</span> = <span class="hljs-constructor">F(<span class="hljs-params">n</span>-1,<span class="hljs-params">w</span>)</span>    (n&gt;<span class="hljs-number">1</span>, w&lt;p<span class="hljs-literal">[<span class="hljs-identifier">n</span>-<span class="hljs-number">1</span>]</span>)  <br><span class="hljs-constructor">F(<span class="hljs-params">n</span>,<span class="hljs-params">w</span>)</span> = max(<span class="hljs-constructor">F(<span class="hljs-params">n</span>-1,<span class="hljs-params">w</span>)</span>,  <span class="hljs-constructor">F(<span class="hljs-params">n</span>-1,<span class="hljs-params">w</span>-<span class="hljs-params">p</span>[<span class="hljs-params">n</span>-1])</span>+g<span class="hljs-literal">[<span class="hljs-identifier">n</span>-<span class="hljs-number">1</span>]</span>)    (n&gt;<span class="hljs-number">1</span>, w&gt;=p<span class="hljs-literal">[<span class="hljs-identifier">n</span>-<span class="hljs-number">1</span>]</span>)<br></code></pre></td></tr></table></figure><h3 id="动态规划-1"><a href="#动态规划-1" class="headerlink" title="动态规划"></a>动态规划</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getMostGold</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span>[] g,<span class="hljs-keyword">int</span>[] p)</span></span>&#123;<br><span class="hljs-keyword">int</span>[] preRusults = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[p.length];<br><span class="hljs-keyword">int</span>[] results = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[p.length];<br><br><span class="hljs-comment">// loop for n of workers</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=w;i++)&#123;<br><span class="hljs-keyword">if</span>(i&lt;p[<span class="hljs-number">0</span>])<br>preRusults[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span><br>preRusults[i]=g[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-comment">// loop for n of mines</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-comment">// loop for n of workers</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=w;j++)&#123;<br><span class="hljs-keyword">if</span>(j&lt;p[i])<br>results[j]=preRusults[j];<br><span class="hljs-keyword">else</span><br>results[j]=Math.max(preRusults[j],preRusults[j-p[i]]+g[i]);<br>&#125;<br>preRusults=results;<br>&#125;<br><span class="hljs-keyword">return</span> results[w];<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>注意</strong>: 时间复杂度O(n*m),空间复杂度o(m)。  而递归法的时间复杂度O(2^n)，n为二叉树的高度，<code>当w特别大时，递归的时间复杂度要小于动态规划</code>。</p><hr><h2 id="剪绳子（剑指offer）"><a href="#剪绳子（剑指offer）" class="headerlink" title="剪绳子（剑指offer）"></a>剪绳子（剑指offer）</h2><p>给你一根长度为n的绳子，请把绳子剪成m段 (m和n都是整数，n&gt;1并且m&gt;1)每段绳子的长度记为k[0],k[1],…,k[m].请问k[0]<em>k[1]</em>…*k[m]可能的最大乘积是多少？</p><p>例如，当绳子的长度为8时，我们把它剪成长度分别为2,3,3的三段，此时得到的最大乘积是18.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxAfterCutting</span><span class="hljs-params">(<span class="hljs-keyword">int</span> length)</span></span>&#123;<br><span class="hljs-keyword">if</span>(length&lt;<span class="hljs-number">2</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(length==<span class="hljs-number">2</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(length==<span class="hljs-number">3</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">int</span>[] f = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length+<span class="hljs-number">1</span>];<br>f[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;  <span class="hljs-comment">// 初始化动态规划的初始值</span><br>f[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>f[<span class="hljs-number">2</span>]=<span class="hljs-number">2</span>;<br>f[<span class="hljs-number">3</span>]=<span class="hljs-number">3</span>;<br><span class="hljs-keyword">int</span> result =<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">4</span>;i&lt;=length;i++)&#123;<br><span class="hljs-keyword">int</span> max=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;i/<span class="hljs-number">2</span>;j++)&#123;<br><span class="hljs-keyword">int</span> num = f[j]*f[i-j];<br><span class="hljs-keyword">if</span>(max&lt;num)<br>max = num;<br>f[i]=max;<br>&#125;<br>&#125;<br>result=f[length];<br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Codes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>针对Titanic问题的各种分类器stacking和XGBoost解法</title>
    <link href="/posts/32063/"/>
    <url>/posts/32063/</url>
    
    <content type="html"><![CDATA[<p>在典型feature engineering的情况下，使用xgboost和堆叠（仍然有一层xgboost），达到的Public Score都是0.79，相对比较优秀。另有遗传算法，不知道参数如何获得，score 0.88。</p><span id="more"></span><hr><p>使用jupyter notebook，Python3.5，WIN10下Pycharm搭建环境。</p><hr><h2 id="feature-engineering"><a href="#feature-engineering" class="headerlink" title="feature engineering"></a>feature engineering</h2><p>主要包括数据读入，特征选择，数据清洗，特征处理。</p><h3 id="reading-using-Pandas"><a href="#reading-using-Pandas" class="headerlink" title="reading using Pandas"></a>reading using Pandas</h3><p>pandas读入的是DataFrame结构：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">train_df</span> = pd.read_csv(<span class="hljs-string">&#x27;data\\train.csv&#x27;</span>) <span class="hljs-comment"># path from windows</span><br><span class="hljs-attr">test_df</span> = pd.read_csv(<span class="hljs-string">&#x27;data\\test.csv&#x27;</span>)<br><span class="hljs-attr">combine</span> = [train_df, test_df] <span class="hljs-comment"># list</span><br></code></pre></td></tr></table></figure><p>可以直接对其操作：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">train_df</span><span class="hljs-selector-class">.head</span>()<br><span class="hljs-selector-tag">train_df</span><span class="hljs-selector-class">.tail</span>()<br><span class="hljs-selector-tag">train_df</span><span class="hljs-selector-class">.info</span>()<br><span class="hljs-selector-tag">train_df</span><span class="hljs-selector-class">.describe</span>()<br><span class="hljs-selector-tag">train_df</span><span class="hljs-selector-class">.describe</span>(include=[<span class="hljs-string">&#x27;O&#x27;</span>]) # <span class="hljs-selector-tag">object</span><br></code></pre></td></tr></table></figure><h3 id="feature-select"><a href="#feature-select" class="headerlink" title="feature select"></a>feature select</h3><p>使用matplotlib和seaborn进行visualized analyze，包括：</p>]]></content>
    
    
    <categories>
      
      <category>Kaggle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>MachineLearning</tag>
      
      <tag>XGBoost</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫总结（附拉勾网多进程代理池爬虫）</title>
    <link href="/posts/28976/"/>
    <url>/posts/28976/</url>
    
    <content type="html"><![CDATA[<p>一直秉承增量学习的策略，写了一些爬虫，还没有到需要scrapy的地步，爬取拉勾网遇到了瓶颈，因为反爬策略比较强，在此总结。</p><span id="more"></span><hr><h3 id="写过的东西"><a href="#写过的东西" class="headerlink" title="写过的东西"></a>写过的东西</h3><p>最近写的都放在了gayhub上：</p><div class="github-widget" data-repo="cloisonne/Show-me-the-code_Python"></div><p>包括有：<code>获取代理池</code>、<code>爬取bing图片</code>等等。</p><h3 id="拉勾网爬虫"><a href="#拉勾网爬虫" class="headerlink" title="拉勾网爬虫"></a>拉勾网爬虫</h3><p>分为以下步骤：</p><ul><li>获取所有板块url，存入mongoDB</li><li>在所需的url中，爬取所有的工作链接url，存入mongoDB</li><li>断点续传，多进程爬取所有储存的url中的信息，存入mongoDB</li><li>数据分析（待完成）</li></ul><p>其中</p><h4 id="断点续传的实现方式："><a href="#断点续传的实现方式：" class="headerlink" title="断点续传的实现方式："></a>断点续传的实现方式：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">db_url = [i[<span class="hljs-string">&#x27;url&#x27;</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> url_list.find()]<br>recent_url = [j[<span class="hljs-string">&#x27;url&#x27;</span>] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> job_info.find()]<br>x = <span class="hljs-built_in">set</span>(db_url)<br>y = <span class="hljs-built_in">set</span>(recent_url)<br>rest_of_urls = x-y<br></code></pre></td></tr></table></figure><h4 id="多进程使用Pool进程池："><a href="#多进程使用Pool进程池：" class="headerlink" title="多进程使用Pool进程池："></a>多进程使用Pool进程池：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">cookies = login_lagou()<br>pool = Pool(processes=<span class="hljs-number">4</span>)<br>pool.apply_async(get_all_job_info(rest_of_urls,cookies))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(rest_of_urls))<br><span class="hljs-comment"># pool.apply_async(get_all_links_from(channel,cookies))</span><br>pool.close()<br>pool.join()<br></code></pre></td></tr></table></figure><h4 id="代理测试使用telnet方法："><a href="#代理测试使用telnet方法：" class="headerlink" title="代理测试使用telnet方法："></a>代理测试使用telnet方法：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_link</span>(<span class="hljs-params">ip,_port</span>):</span><br>    <span class="hljs-keyword">try</span>:<br>        telnetlib.Telnet(ip, port=_port, timeout=<span class="hljs-number">5</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;connect failed&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;success&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="数据库计数器实时监测："><a href="#数据库计数器实时监测：" class="headerlink" title="数据库计数器实时监测："></a>数据库计数器实时监测：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span>(job_info.find().count())<br>    time.sleep(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><hr><h3 id="高级爬虫技术总结"><a href="#高级爬虫技术总结" class="headerlink" title="高级爬虫技术总结"></a>高级爬虫技术总结</h3><p><strong>高端反爬技巧</strong>：</p><ul><li>校验 User-Agent（没用）</li><li>图片假链（人点不到，爬虫必中）</li><li>阶梯访问量控制</li></ul><blockquote><p>基于访问数量，人类的访问一般集中在短时间内大部分网页，爬虫是线性增长，可设置短期策略和长期策略识别非人类。</p></blockquote><p><strong>常见的反反爬技巧</strong>：</p><ul><li>User-Agent池</li><li>Referer保持</li><li>代理池</li><li>图像识别验证码</li><li>登陆状态cookies保持</li><li>多账号反爬</li><li>分布式爬虫</li><li>selenium</li></ul><hr><h3 id="未来工作"><a href="#未来工作" class="headerlink" title="未来工作"></a>未来工作</h3><p>重心主要在数据分析和机器学习上，爬虫如果再有接触的话，应当写一个自己的fetcher类，糅合代理、多线程、异步IO、断点续传等功能。</p><p>参考<a href="http://outofmemory.cn/code-snippet/1653/python-pachong-zhua-wangye-summary">python爬虫抓网页的总结</a></p>]]></content>
    
    
    <categories>
      
      <category>Codes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>睿思图片爬取实战（附代码）</title>
    <link href="/posts/25357/"/>
    <url>/posts/25357/</url>
    
    <content type="html"><![CDATA[<p>主要使用了Requests加Beautifulsoup，没有用Requests的session，选择了使用原始的get和post方法，爬取了约3.5G的睿思摄影板块图片。</p><span id="more"></span><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>什么是睿思？</p><p>睿思: <a href="http://rs.xidian.edu.cn/forum.php">http://rs.xidian.edu.cn/forum.php</a> 是西电校内最大的PT站，长这样：<br><img src="http://o7myibfc7.bkt.clouddn.com/ruisi_page.jpg?imageView2/3/w/600/h/300/q/90" alt="睿思主页"></p><p>之前学习了<a href="http://docs.python-requests.org/zh_CN/latest/index.html">Requests</a>库和<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#">BeautifulSoup</a>库，已经可以爬取一些简单的网站了，选择睿思是因为不跑校外流量，爬取图片又相对简单易行，对于基本没看过python的我来说，比较现实。<br>最初是想爬取睿思的缘聚睿思板块，但图片太少，最终选择爬取摄影板块，长这样：<br><img src="http://o7myibfc7.bkt.clouddn.com/sheying_page.jpg?imageView2/3/w/600/h/300/q/90" alt="摄影主页"></p><p>乍一看以为是瀑布流，实际分析过后就会发现瀑布最后刷新出来的其实是<code>page=2</code>，也就是说读取不同的page就可以抓取整个板块的照片了。</p><p>为了防止抓到回复中的照片（感觉有点担忧过度，回复带的图片大多是论坛的静态图片），只抓取每个帖子第一楼的照片，然后将其输出到电脑保存。</p><p>爬取结果，共3.5G，去除10K以下的无效图片，有2815张：</p><p><img src="http://o7myibfc7.bkt.clouddn.com/ruisi_pictures.jpg?imageView2/3/w/600/h/300/q/90" alt="爬取结果"></p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>详细代码请看gayhub：</p><div class="github-widget" data-repo="cloisonne/Ruisi_Pic_Download"></div><p><strong>formhash</strong>是后期发帖需要的一个值，这里一并获取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getFormhash</span>(<span class="hljs-params">self,url</span>):</span><br>    <span class="hljs-comment">#formhash_url = config.FORMHASHURL</span><br>    formhash_text = self.getHTMLText(url)<br>    formhash_soup = BeautifulSoup(formhash_text,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br>    formhash_tag = formhash_soup.find(<span class="hljs-string">&#x27;input&#x27;</span>,attrs=&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;formhash&#x27;</span>&#125;)<br>    formhash = formhash_tag(<span class="hljs-string">&#x27;value&#x27;</span>)<br>    <span class="hljs-keyword">return</span> formhash<br></code></pre></td></tr></table></figure><p><strong>cookies</strong>采用cookiejar：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">self.cookie = cookiejar.CookieJar()<br></code></pre></td></tr></table></figure><p>为了保持登陆状态，需要一个全局cookies：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">global</span> cookies<br>cookies = wb_data.cookies<br></code></pre></td></tr></table></figure><p>获取的图片链接有所不同，需要进行选择处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> img_url_list:<br>     <span class="hljs-keyword">if</span> i[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;s&#x27;</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">elif</span> i[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;h&#x27;</span>:<br>        true_list.append(i)<br>    <span class="hljs-keyword">elif</span> i[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;.&#x27;</span>:<br>        true_list.append(config.DOMAIN+i[<span class="hljs-number">2</span>:])<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>由于url中含有非法字符<code>?</code>，图片命名中利用该点特征，使用异常来保证输出图片的正确性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(root):<br>        os.mkdir(root)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path):<br>        r = requests.get(url,headers=self.headers, cookies=cookies)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(r.content)<br>            f.close()<br>            <span class="hljs-built_in">print</span>(path+<span class="hljs-string">&#x27;  succeed&#x27;</span>)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;失败一次&quot;</span>)   <span class="hljs-comment">#有url包含非法字符</span><br></code></pre></td></tr></table></figure><hr><h3 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h3><ul><li><p>最初是对discuz不了解，formhash和cookie比较麻烦，登陆状态的保持不知道如何做。</p></li><li><p>使用Requests的session更简单，不需要cookies和构造复杂header，事实上，get和post方法调用的是requests方法，而requests最终也是调用的session。</p></li><li><p>第一次完整的写python程序，结构有很大问题，总是想结构化，python还是代码越少越好。</p></li><li><p>下面开始学习scarpy，然后进行简单的多线程抓取。</p></li><li><p>对睿思的抓取继续下去的话可以抓发帖时间和发帖对象做用户行为分析。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Codes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬虫第二课-BeautifulSoup</title>
    <link href="/posts/44202/"/>
    <url>/posts/44202/</url>
    
    <content type="html"><![CDATA[<p>主要包括对Beautiful Soup的学习和理解，及一个提取大学排名的实例。</p><span id="more"></span><hr><h2 id="Beautiful-Soup"><a href="#Beautiful-Soup" class="headerlink" title="Beautiful Soup"></a>Beautiful Soup</h2><h3 id="BeautifulSoup的对象"><a href="#BeautifulSoup的对象" class="headerlink" title="BeautifulSoup的对象"></a>BeautifulSoup的对象</h3><p>Tag</p><pre><code class="hljs">soup = BeautifulSoup(&#39;&lt;b class=&quot;boldest&quot;&gt;Extremely bold&lt;/b&gt;&#39;)tag = soup.btype(tag)# &lt;class &#39;bs4.element.Tag&#39;&gt;</code></pre><p>Name</p><pre><code class="hljs">tag.name# u&#39;b&#39;</code></pre><p>Attributes</p><pre><code class="hljs">tag[&#39;class&#39;]tag.attrs</code></pre><p>NavigableString</p><pre><code class="hljs">tag.string</code></pre><p>prettify()方法</p><pre><code class="hljs">soup.prettify()soup.a.prettify()</code></pre><h3 id="BS的遍历"><a href="#BS的遍历" class="headerlink" title="BS的遍历"></a>BS的遍历</h3><p>标签树的下行遍历</p><ul><li>.contents 子节点的列表，将<tag>所有儿子节点存入列表 </li><li>.children子节点的迭代类型，与.contents类似，用于循环遍历儿子节点</li><li>.descendants子孙节点的迭代类型，包含所有子孙节点，用于循环遍历</li></ul><p>标签树的上行遍历</p><ul><li>.parent 节点的父亲标签 </li><li>.parents 节点先辈标签的迭代类型，用于循环遍历先辈节点</li></ul><p>标签树的平行遍历</p><ul><li>.next_sibling 返回按照HTML文本顺序的下一个平行节点标签</li><li>.previous_sibling 返回按照HTML文本顺序的上一个平行节点标签 </li><li>.next_siblings 迭代类型，返回按照HTML文本顺序的后续所有平行节点标签</li><li>.previous_siblings 迭代类型，返回按照HTML文本顺序的前续所有平行节点标签</li></ul><hr><h2 id="信息标记方式和提取"><a href="#信息标记方式和提取" class="headerlink" title="信息标记方式和提取"></a>信息标记方式和提取</h2><h3 id="三种信息标记方式"><a href="#三种信息标记方式" class="headerlink" title="三种信息标记方式"></a>三种信息标记方式</h3><ol><li><p>XML eXtensible Markup Lauguage</p><pre><code class="hljs"> &lt;img src=“china.jpg” size=“10”&gt; … &lt;/img&gt;</code></pre></li><li><p>JSON JavaScript Object Notation</p><p> 有类型的键值对key:value</p></li><li><p>YAML YAML Ain’t Markup Language</p><p> 无类型键值对key:value</p></li></ol><h3 id="HTML提取方式"><a href="#HTML提取方式" class="headerlink" title="HTML提取方式"></a>HTML提取方式</h3><p><strong>例：</strong></p><pre><code class="hljs">from bs4 import BeautifulSoupsoup = BeautifulSoup(demo,&quot;lxml&quot;)for link in soup.find_all(&#39;a&#39;):    print(link.get(&#39;href&#39;))</code></pre><p><strong>find_all</strong>(name, attrs, recursive, string, **kwargs)</p><ul><li>name : 对标签名称的检索字符串</li><li>attrs: 对标签属性值的检索字符串，可标注属性检索</li><li>recursive: 是否对子孙全部检索，默认True</li><li>string: &lt;&gt;…&lt;&#x2F;&gt;中字符串区域的检索字符串</li></ul><p><strong>扩展方法：</strong></p><ul><li>&lt;&gt;.find() 搜索且只返回一个结果，同.find_all()参数 </li><li>&lt;&gt;.find_parents() 在先辈节点中搜索，返回列表类型，同.find_all()参数 </li><li>&lt;&gt;.find_parent() 在先辈节点中返回一个结果，同.find()参数 </li><li>&lt;&gt;.find_next_siblings() 在后续平行节点中搜索，返回列表类型，同.find_all()参数 </li><li>&lt;&gt;.find_next_sibling() 在后续平行节点中返回一个结果，同.find()参数 </li><li>&lt;&gt;.find_previous_siblings() 在前序平行节点中搜索，返回列表类型，同.find_all()参数 </li><li>&lt;&gt;.find_previous_sibling() 在前序平行节点中返回一个结果，同.find()参数</li></ul><hr><h2 id="提取大学排名的例子"><a href="#提取大学排名的例子" class="headerlink" title="提取大学排名的例子"></a>提取大学排名的例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> bs4<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getHTMLText</span>(<span class="hljs-params">url</span>):</span><br>    <span class="hljs-keyword">try</span>:<br>        r = requests.get(url,timeout=<span class="hljs-number">30</span>)<br>        r.raise_for_status()<br>        r.encoding = r.apparent_encoding<br>        <span class="hljs-keyword">return</span> r.text<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fillUnvList</span>(<span class="hljs-params">ulist,html</span>):</span><br>    soup = BeautifulSoup(html,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br>    <span class="hljs-keyword">for</span> tr <span class="hljs-keyword">in</span> soup.find(<span class="hljs-string">&#x27;tbody&#x27;</span>).children:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(tr,bs4.element.Tag):<br>            tds = tr(<span class="hljs-string">&#x27;td&#x27;</span>) <span class="hljs-comment">#tds = tr.find_all(&#x27;td&#x27;)</span><br>            ulist.append([tds[<span class="hljs-number">0</span>].string,tds[<span class="hljs-number">1</span>].string,tds[<span class="hljs-number">3</span>].string])<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printUnvList</span>(<span class="hljs-params">ulist,num</span>):</span><br>    tplt = <span class="hljs-string">&quot;&#123;:^10&#125;\t&#123;:^6&#125;\t&#123;:^10&#125;&quot;</span><br>    <span class="hljs-built_in">print</span>(tplt.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;排名&#x27;</span>,<span class="hljs-string">&#x27;学校&#x27;</span>,<span class="hljs-string">&#x27;总分&#x27;</span>,<span class="hljs-built_in">chr</span>(<span class="hljs-number">12288</span>))) <span class="hljs-comment"># 中文对齐  pycharm失败</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        u = ulist[i]<br>        <span class="hljs-built_in">print</span>(tplt.<span class="hljs-built_in">format</span>(u[<span class="hljs-number">0</span>],u[<span class="hljs-number">1</span>],u[<span class="hljs-number">2</span>],<span class="hljs-built_in">chr</span>(<span class="hljs-number">12288</span>)))<br>    <span class="hljs-comment">#print(&#x27;Suc&#x27; + str(num))</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    uinfo = []<br>    url = <span class="hljs-string">&#x27;http://www.zuihaodaxue.cn/zuihaodaxuepaiming2017.html&#x27;</span><br>    html = getHTMLText(url)<br>    fillUnvList(uinfo,html)<br>    printUnvList(uinfo,<span class="hljs-number">20</span>)<br><br>main()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Codes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬虫第一课-requests库</title>
    <link href="/posts/20316/"/>
    <url>/posts/20316/</url>
    
    <content type="html"><![CDATA[<p>学习python爬虫的第一课，涉及requests库、robots协议，及一个保存网页图片实例。</p><span id="more"></span><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>这里使用pycharm，学生用户可以通过edu邮箱免费使用，安装库都十分方便。</p></blockquote><hr><h2 id="初识requests代码"><a href="#初识requests代码" class="headerlink" title="初识requests代码"></a>初识requests代码</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><br>&gt;&gt;&gt; import requests<br>&gt;&gt;&gt; r = requests.get(&#x27;https://www.baidu.com&#x27;,auth = (&#x27;user&#x27;,&#x27;pass&#x27;))<br>&gt;&gt;&gt; r.status_code<br><span class="hljs-number">200</span><br>&gt;&gt;&gt; r.headers[&#x27;content-type&#x27;]<br>&#x27;text/html&#x27;<br>&gt;&gt;&gt; r.headers<br>&#123;&#x27;Set-Cookie&#x27;: &#x27;BDORZ=<span class="hljs-number">2731</span>5; max-age=<span class="hljs-number">8640</span>0; domain=.baidu.com; path=/&#x27;, &#x27;Transfer-Encoding&#x27;: &#x27;chunked&#x27;, &#x27;Date&#x27;: &#x27;Sat, 28 Oct <span class="hljs-number">2017</span> 10:49:03 GMT&#x27;, &#x27;Server&#x27;: &#x27;bfe/1.0.8.18&#x27;, &#x27;Content-Type&#x27;: &#x27;text/html&#x27;, &#x27;Content-Encoding&#x27;: &#x27;gzip&#x27;, &#x27;Cache-Control&#x27;: &#x27;private, no-cache, no-store, proxy-revalidate, no-transform&#x27;, &#x27;Last-Modified&#x27;: &#x27;Mon, 23 Jan <span class="hljs-number">2017</span> 13:23:55 GMT&#x27;, &#x27;Connection&#x27;: &#x27;Keep-Alive&#x27;, &#x27;Pragma&#x27;: &#x27;no-cache&#x27;&#125;<br>&gt;&gt;&gt; r.encoding <span class="hljs-meta">#根据头部 编码</span><br>&#x27;ISO-<span class="hljs-number">8859</span>-1&#x27;<br>&gt;&gt;&gt; r.text<br>&#x27;&lt;!DOCTYPE html&gt;\r\n&lt;...<br>&gt;&gt;&gt; r.apparent_encoding #根据内容 备选编码<br>&#x27;utf-<span class="hljs-number">8</span>&#x27;<br>&gt;&gt;&gt; r.content  #二进制形式<br></code></pre></td></tr></table></figure><h3 id="requests库异常"><a href="#requests库异常" class="headerlink" title="requests库异常"></a>requests库异常</h3><p>遇到网络问题（如：DNS 查询失败、拒绝连接等）时，Requests 会抛出一个 ConnectionError 异常。<br>如果 HTTP 请求返回了不成功的状态码， Response.raise_for_status() 会抛出一个 HTTPError 异常。<br>若请求超时，则抛出一个 Timeout 异常。<br>若请求超过了设定的最大重定向次数，则会抛出一个 TooManyRedirects 异常。<br>所有Requests显式抛出的异常都继承自 requests.exceptions.RequestException 。</p><h3 id="爬取网页的通用框架"><a href="#爬取网页的通用框架" class="headerlink" title="爬取网页的通用框架"></a>爬取网页的通用框架</h3><pre><code class="hljs">import requestsdef getHTMLText (url) :    try:        kv = &#123;&#39;user-agent&#39;:&#39;Mozilla/5.0&#39;&#125;        r = requests.get(url,timeout=30,headers=kv)        r.raise_for_status()  #检查状态码        r.encoding = r.apparent_encoding        return r.text    except:        return &quot;产生异常&quot;        if __name__ == &quot;__main__&quot;:    url = &quot;http://www.baidu.com&quot;    print(getHTMLText)</code></pre><hr><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><ul><li>GET 请求获取URL位置的资源 </li><li>HEAD 请求获取URL位置资源的响应消息报告，即获得该资源的头部信息 </li><li>POST请求向URL位置的资源后附加新的数据 </li><li>PUT 请求向URL位置存储一个资源，覆盖原URL位置的资源 </li><li>PATCH 请求局部更新URL位置的资源，即改变该处资源的部分内容</li><li>DELETE 请求删除URL位置存储的资源</li></ul><hr><h2 id="robots协议"><a href="#robots协议" class="headerlink" title="robots协议"></a>robots协议</h2><p> Robots Exclusion Standard</p><p> 基本语法：</p><pre><code class="hljs"># 注释，*代表所有，/代表根目录User‐agent: *Disallow: /</code></pre><hr><h2 id="百度-x2F-360搜索代码"><a href="#百度-x2F-360搜索代码" class="headerlink" title="百度&#x2F;360搜索代码"></a>百度&#x2F;360搜索代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-keyword">import</span> requests<br> keyword = <span class="hljs-string">&#x27;Python&#x27;</span><br> <span class="hljs-keyword">try</span>:<br>    kv = &#123;<span class="hljs-string">&#x27;wd&#x27;</span>:keyword&#125;<br>    r = requests.get(<span class="hljs-string">&quot;http://www.baidu.com/s&quot;</span>,params=kv)<br>    <span class="hljs-built_in">print</span>(r.request.url)<br>    r.raise_for_status()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(r.text))<br>expect<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;爬取失败&quot;</span>)<br>    <br> <span class="hljs-keyword">import</span> requests<br> keyword = <span class="hljs-string">&#x27;Python&#x27;</span><br> <span class="hljs-keyword">try</span>:<br>    kv = &#123;<span class="hljs-string">&#x27;q&#x27;</span>:keyword&#125;<br>    r = requests.get(<span class="hljs-string">&quot;http://www.baidu.com/s&quot;</span>,params=kv)<br>    <span class="hljs-built_in">print</span>(r.request.url)<br>    r.raise_for_status()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(r.text))<br>expect<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;爬取失败&quot;</span>)<br>    <br></code></pre></td></tr></table></figure><hr><h2 id="图片爬取"><a href="#图片爬取" class="headerlink" title="图片爬取"></a>图片爬取</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs lua">import requests<br>import <span class="hljs-built_in">os</span><br>url = <span class="hljs-string">&quot;&quot;</span><br>root = <span class="hljs-string">&quot;D://pics//&quot;</span><br><span class="hljs-built_in">path</span> = root+url.split(<span class="hljs-string">&#x27;/&#x27;</span>)[<span class="hljs-number">-1</span>]<br>try:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.exists(root):<br>        <span class="hljs-built_in">os</span>.mkdir(root)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.exists(<span class="hljs-built_in">path</span>):<br>        r = requests.get(url)<br>        with <span class="hljs-built_in">open</span>(<span class="hljs-built_in">path</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) as f:<br>            f.<span class="hljs-built_in">write</span>(r.content)<br>            f.<span class="hljs-built_in">close</span>()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件保存成功&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件已存在&quot;</span>)<br>expect:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;爬取失败&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Codes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个简单的makefile</title>
    <link href="/posts/30483/"/>
    <url>/posts/30483/</url>
    
    <content type="html"><![CDATA[<p>学习了一下makefile的写法，写了一个比较简单的makefile。</p><span id="more"></span><hr><p>学习参考<a href="http://www.cnblogs.com/OpenShiFt/p/4313351.html/">http://www.cnblogs.com/OpenShiFt/p/4313351.html/</a></p><p><code>makefile</code></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs makefile">CC = gcc<br>CFLAGS +=<br>LDFLAGS +=<br>EXEC = main<br>OBJS = main.c function.c<br><br><span class="hljs-section">all: <span class="hljs-variable">$(EXEC)</span></span><br><br><span class="hljs-meta"><span class="hljs-meta-keyword">.PHONY</span>: all</span><br><br><span class="hljs-section">main: <span class="hljs-variable">$(OBJS)</span></span><br><span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(CFLAGS)</span> <span class="hljs-variable">$(LDFLAGS)</span> <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">clean:</span><br>-rm -f <span class="hljs-variable">$(EXEC)</span> *.elf *.gdb *.o *.a<br><br><span class="hljs-meta"><span class="hljs-meta-keyword">.PHONY</span>: clean</span><br></code></pre></td></tr></table></figure><p><code>function.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 5</span><br><br><span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[MAX] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">int</span> n=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;MAX;i++)<br>n+=<span class="hljs-built_in">array</span>[i];<br><span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> max;<br><br>max=<span class="hljs-built_in">array</span>[i];<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;MAX;i++)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">array</span>[i] &gt; max)<br>max = <span class="hljs-built_in">array</span>[i];<br>&#125;<br><br><span class="hljs-keyword">return</span> max;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>include.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> len 5</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[])</span></span>&#123;<br><span class="hljs-keyword">int</span> i;<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len;i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;array[%d] : %d\n&quot;</span>,i,<span class="hljs-built_in">array</span>[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>main.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;include.h&quot;</span></span><br><span class="hljs-comment">//#include &quot;function.c&quot;</span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[];<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;<br><span class="hljs-keyword">int</span> sum_m,max_m;<br>sum_m = sum();<br>max_m = max();<br><span class="hljs-comment">//int len = sizeof(array);</span><br>print(<span class="hljs-built_in">array</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sum: %d , max: %d\n&quot;</span>,sum_m,max_m);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Codes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Makefile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>２个多月的近况</title>
    <link href="/posts/64516/"/>
    <url>/posts/64516/</url>
    
    <content type="html"><![CDATA[<p>又是一次很久没有更新博客，主要是忙于期末复习和期末考试，还有随后项目的进展，做了一些诸如状态机结构体之类的paperwork，在此总结和展望。</p><span id="more"></span><hr><h3 id="期末考试的感想"><a href="#期末考试的感想" class="headerlink" title="期末考试的感想"></a>期末考试的感想</h3><p>期末考试我复习还是很认真的，考的主要有以下几门课：</p><ul><li><strong>计算智能</strong></li><li><strong>人工智能</strong></li><li><strong>机器学习</strong></li><li><strong>算法设计</strong></li></ul><p>几门课相关性很强，范围大抵就是神经网络、深度学习、优化问题等，方向是最前沿的方向，自己也比较喜欢，可能以后有缘再见吧。</p><p>写这篇文的时候是2月12号，喔，补的好晚，2月5号，也就是大年初十就来学校了，这个与文章无关，就不提了。</p><p>上学期的考试成绩都已经出了，几门课虽然复习的很好，但是分数真的差强人意，感觉老师压分严重，并且都患有精神疾病，在这里吐槽一句大概不会有人骂我吧，<code>这个烂学校</code>。</p><p>所以我认真复习了这么久的结果是什么呢，什么也没得到，如果我当初没有考上研究生，肯定就不会放弃出国留学的机会，也许人生就不一样了。哪有这么多可能，接受现实吧孩子。</p><p>项目上，进展缓慢，主要是在做多蜂窝模块的路由和负载均衡，每天看着iptable敲着route命令调试着看似高端其实一点也不友好的开发板，不止一次在内心提醒自己，<code>你千万不能去做运维啊，你爸妈养你可不是让你去考CCIE的</code>，苦笑脸～</p><hr><h3 id="未来要做的工作（技术向）"><a href="#未来要做的工作（技术向）" class="headerlink" title="未来要做的工作（技术向）"></a>未来要做的工作（技术向）</h3><p>关于<code>博客</code>：</p><ul><li>希望把友情链接做成一个单一的界面</li><li>希望能加入集成持续部署</li><li>精力足够的话还是租个服务器能做更多事</li><li>好好维护</li></ul><p>关于<code>技术</code>：</p><p>现在重心还是放在java web，以找工作为导向，刷些算法题，增量学习。其他感兴趣的方向有：</p><ul><li>docker</li><li>js&#x2F;nodejs</li><li>python后端</li><li>爬虫</li></ul><p>关于<code>项目</code>：</p><ul><li>C的串口编程</li><li>C的socket编程</li><li>策略路由</li><li>负载均衡</li><li>IPsec</li></ul><hr><h3 id="未来要做的事（人生向）"><a href="#未来要做的事（人生向）" class="headerlink" title="未来要做的事（人生向）"></a>未来要做的事（人生向）</h3><p>买的雅思4-11明天就能到了，争取在6月份考过雅思吧，目标移民澳洲。</p><p>也不期望第一次考雅思成绩能多好，但至少保证4个6，这样可以做EA的职业评估，拿本科学历通过华盛顿协议来评估一个通信工程师就好。</p><p>如果能考到4个7那更好，但是移民打分还是不够，还差5分（算上州担保了），结婚是不可能了，这5分可以靠naati：</p><p><strong>naati今年要改革，改革完不知道国内还能不能考</strong>。</p><p>还可以等到25岁，但是我24岁就要面临国内的校招，找工作了，冲突。</p><p>最后的方案是考完雅思申请EA认证后刷<code>PTE</code>（EA认证不承认PTE，但是澳洲移民局承认啊），希望能多考几次PTE然后刷到<code>4个79=雅思4个8</code>，这样在研二就能够打够分数申请189的澳洲移民签证了。</p><p>毕业就可以去澳洲找工作，无缝衔接。</p><p>至于，工作好不好找，有没有国内待遇好，还有我国内211的硕士学历就算废了，这些到时候在考虑吧。</p><hr><h3 id="感情问题"><a href="#感情问题" class="headerlink" title="感情问题"></a>感情问题</h3><p>过年的时候，感情出了一些问题。（<code>敲黑板 单身狗就不能有感情问题了吗？</code>）</p><p>到现在也没怎么解决，但是好像已经能接受这样的现实了，就算是备胎也好，我有什么办法呢。</p><p>时间的车轮滚滚向前，真的不能再拿出更多余的精力来放在这上面了，明年面临校招的找工作考验，今年还要着急考雅思考PTE努力移民，孩子，在这种人生的十字路口，每步都要谨慎，不然会粉身碎骨的。</p><p>对于谈恋爱这件事，其实也是挺期待的，如果有了女朋友，大概做什么的动力都能多一些，不会这么孤独的像现在一样每天自己吃饭，一天也说不了几句话。</p><p>但是如果你不是我的，我也不会做过多的期待，单身有单身的好处，我大可出去环游世界，放浪形骸，天地这么大，一个人走也挺好的。</p><p>写了这么多，是不是应该放个图，就晒我的朋友圈吧。</p><p><img src="http://o7myibfc7.bkt.clouddn.com/1691432232.jpg?imageView2/2/h/400/" alt="自己的朋友圈"></p><p>图片是鬼怪，三句话是：</p><pre><code class="hljs">天冷了许多听说冬天之所以这么冷是为了告诉大家，身边的人的温暖有多重要</code></pre>]]></content>
    
    
    <categories>
      
      <category>Essays</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于git命令和博客迁移同步方案</title>
    <link href="/posts/54406/"/>
    <url>/posts/54406/</url>
    
    <content type="html"><![CDATA[<p>Hexo的blog使用自带的deploy插件上传时只会上传网页内容，导致在更换设备时十分麻烦，可以新建repo选择性的备份source或config等。</p><span id="more"></span><hr><p><a href="/2017/01/16/about-git/#%E8%AE%BE%E5%A4%87%E9%97%B4%E5%90%8C%E6%AD%A5%E5%92%8C%E8%BF%81%E7%A7%BB%E6%96%B9%E6%A1%88">我是直接看同步方案的传送门</a></p><h2 id="git常用命令总结"><a href="#git常用命令总结" class="headerlink" title="git常用命令总结"></a>git常用命令总结</h2><p>转载自<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" title="阮一峰的网络日志">常用 Git 命令清单</a></p><h3 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在当前目录新建一个Git代码库</span><br>$ git init<br><br><span class="hljs-comment"># 新建一个目录，将其初始化为Git代码库</span><br>$ git init [project-name]<br><br><span class="hljs-comment"># 下载一个项目和它的整个代码历史</span><br>$ git <span class="hljs-built_in">clone</span> [url]<br></code></pre></td></tr></table></figure><hr><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示当前的Git配置</span><br>$ git config --list<br><br><span class="hljs-comment"># 编辑Git配置文件</span><br>$ git config -e [--global]<br><br><span class="hljs-comment"># 设置提交代码时的用户信息</span><br>$ git config [--global] user.name <span class="hljs-string">&quot;[name]&quot;</span><br>$ git config [--global] user.email <span class="hljs-string">&quot;[email address]&quot;</span><br></code></pre></td></tr></table></figure><hr><h3 id="增加-x2F-删除文件"><a href="#增加-x2F-删除文件" class="headerlink" title="增加&#x2F;删除文件"></a>增加&#x2F;删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加指定文件到暂存区</span><br>$ git add [file1] [file2] ...<br><br><span class="hljs-comment"># 添加指定目录到暂存区，包括子目录</span><br>$ git add [dir]<br><br><span class="hljs-comment"># 添加当前目录的所有文件到暂存区</span><br>$ git add .<br><br><span class="hljs-comment"># 添加每个变化前，都会要求确认</span><br><span class="hljs-comment"># 对于同一个文件的多处变化，可以实现分次提交</span><br>$ git add -p<br><br><span class="hljs-comment"># 删除工作区文件，并且将这次删除放入暂存区</span><br>$ git rm [file1] [file2] ...<br><br><span class="hljs-comment"># 停止追踪指定文件，但该文件会保留在工作区</span><br>$ git rm --cached [file]<br><br><span class="hljs-comment"># 改名文件，并且将这个改名放入暂存区</span><br>$ git mv [file-original] [file-renamed]<br></code></pre></td></tr></table></figure><hr><h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 提交暂存区到仓库区</span><br>$ git commit -m [message]<br><br><span class="hljs-comment"># 提交暂存区的指定文件到仓库区</span><br>$ git commit [file1] [file2] ... -m [message]<br><br><span class="hljs-comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br>$ git commit -a<br><br><span class="hljs-comment"># 提交时显示所有diff信息</span><br>$ git commit -v<br><br><span class="hljs-comment"># 使用一次新的commit，替代上一次提交</span><br><span class="hljs-comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br>$ git commit --amend -m [message]<br><br><span class="hljs-comment"># 重做上一次commit，并包括指定文件的新变化</span><br>$ git commit --amend [file1] [file2] ...<br></code></pre></td></tr></table></figure><hr><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出所有本地分支</span><br>$ git branch<br><br><span class="hljs-comment"># 列出所有远程分支</span><br>$ git branch -r<br><br><span class="hljs-comment"># 列出所有本地分支和远程分支</span><br>$ git branch -a<br><br><span class="hljs-comment"># 新建一个分支，但依然停留在当前分支</span><br>$ git branch [branch-name]<br><br><span class="hljs-comment"># 新建一个分支，并切换到该分支</span><br>$ git checkout -b [branch]<br><br><span class="hljs-comment"># 新建一个分支，指向指定commit</span><br>$ git branch [branch] [commit]<br><br><span class="hljs-comment"># 新建一个分支，与指定的远程分支建立追踪关系</span><br>$ git branch --track [branch] [remote-branch]<br><br><span class="hljs-comment"># 切换到指定分支，并更新工作区</span><br>$ git checkout [branch-name]<br><br><span class="hljs-comment"># 切换到上一个分支</span><br>$ git checkout -<br><br><span class="hljs-comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br>$ git branch --set-upstream [branch] [remote-branch]<br><br><span class="hljs-comment"># 合并指定分支到当前分支</span><br>$ git merge [branch]<br><br><span class="hljs-comment"># 选择一个commit，合并进当前分支</span><br>$ git cherry-pick [commit]<br><br><span class="hljs-comment"># 删除分支</span><br>$ git branch -d [branch-name]<br><br><span class="hljs-comment"># 删除远程分支</span><br>$ git push origin --delete [branch-name]<br>$ git branch -dr [remote/branch]<br></code></pre></td></tr></table></figure><hr><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出所有tag</span><br>$ git tag<br><br><span class="hljs-comment"># 新建一个tag在当前commit</span><br>$ git tag [tag]<br><br><span class="hljs-comment"># 新建一个tag在指定commit</span><br>$ git tag [tag] [commit]<br><br><span class="hljs-comment"># 删除本地tag</span><br>$ git tag -d [tag]<br><br><span class="hljs-comment"># 删除远程tag</span><br>$ git push origin :refs/tags/[tagName]<br><br><span class="hljs-comment"># 查看tag信息</span><br>$ git show [tag]<br><br><span class="hljs-comment"># 提交指定tag</span><br>$ git push [remote] [tag]<br><br><span class="hljs-comment"># 提交所有tag</span><br>$ git push [remote] --tags<br><br><span class="hljs-comment"># 新建一个分支，指向某个tag</span><br>$ git checkout -b [branch] [tag]<br></code></pre></td></tr></table></figure><hr><h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示有变更的文件</span><br>$ git status<br><br><span class="hljs-comment"># 显示当前分支的版本历史</span><br>$ git <span class="hljs-built_in">log</span><br><br><span class="hljs-comment"># 显示commit历史，以及每次commit发生变更的文件</span><br>$ git <span class="hljs-built_in">log</span> --<span class="hljs-built_in">stat</span><br><br><span class="hljs-comment"># 搜索提交历史，根据关键词</span><br>$ git <span class="hljs-built_in">log</span> -S [keyword]<br><br><span class="hljs-comment"># 显示某个commit之后的所有变动，每个commit占据一行</span><br>$ git <span class="hljs-built_in">log</span> [tag] HEAD --pretty=format:%s<br><br><span class="hljs-comment"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br>$ git <span class="hljs-built_in">log</span> [tag] HEAD --grep feature<br><br><span class="hljs-comment"># 显示某个文件的版本历史，包括文件改名</span><br>$ git <span class="hljs-built_in">log</span> --follow [file]<br>$ git whatchanged [file]<br><br><span class="hljs-comment"># 显示指定文件相关的每一次diff</span><br>$ git <span class="hljs-built_in">log</span> -p [file]<br><br><span class="hljs-comment"># 显示过去5次提交</span><br>$ git <span class="hljs-built_in">log</span> -5 --pretty --oneline<br><br><span class="hljs-comment"># 显示所有提交过的用户，按提交次数排序</span><br>$ git shortlog -sn<br><br><span class="hljs-comment"># 显示指定文件是什么人在什么时间修改过</span><br>$ git blame [file]<br><br><span class="hljs-comment"># 显示暂存区和工作区的差异</span><br>$ git diff<br><br><span class="hljs-comment"># 显示暂存区和上一个commit的差异</span><br>$ git diff --cached [file]<br><br><span class="hljs-comment"># 显示工作区与当前分支最新commit之间的差异</span><br>$ git diff HEAD<br><br><span class="hljs-comment"># 显示两次提交之间的差异</span><br>$ git diff [first-branch]...[second-branch]<br><br><span class="hljs-comment"># 显示今天你写了多少行代码</span><br>$ git diff --shortstat <span class="hljs-string">&quot;@&#123;0 day ago&#125;&quot;</span><br><br><span class="hljs-comment"># 显示某次提交的元数据和内容变化</span><br>$ git show [commit]<br><br><span class="hljs-comment"># 显示某次提交发生变化的文件</span><br>$ git show --name-only [commit]<br><br><span class="hljs-comment"># 显示某次提交时，某个文件的内容</span><br>$ git show [commit]:[filename]<br><br><span class="hljs-comment"># 显示当前分支的最近几次提交</span><br>$ git reflog<br></code></pre></td></tr></table></figure><hr><h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载远程仓库的所有变动</span><br>$ git fetch [remote]<br><br><span class="hljs-comment"># 显示所有远程仓库</span><br>$ git remote -v<br><br><span class="hljs-comment"># 显示某个远程仓库的信息</span><br>$ git remote show [remote]<br><br><span class="hljs-comment"># 增加一个新的远程仓库，并命名</span><br>$ git remote add [shortname] [url]<br><br><span class="hljs-comment"># 取回远程仓库的变化，并与本地分支合并</span><br>$ git pull [remote] [branch]<br><br><span class="hljs-comment"># 上传本地指定分支到远程仓库</span><br>$ git push [remote] [branch]<br><br><span class="hljs-comment"># 强行推送当前分支到远程仓库，即使有冲突</span><br>$ git push [remote] --force<br><br><span class="hljs-comment"># 推送所有分支到远程仓库</span><br>$ git push [remote] --all<br><br></code></pre></td></tr></table></figure><hr><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 恢复暂存区的指定文件到工作区</span><br>$ git checkout [file]<br><br><span class="hljs-comment"># 恢复某个commit的指定文件到暂存区和工作区</span><br>$ git checkout [commit] [file]<br><br><span class="hljs-comment"># 恢复暂存区的所有文件到工作区</span><br>$ git checkout .<br><br><span class="hljs-comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br>$ git reset [file]<br><br><span class="hljs-comment"># 重置暂存区与工作区，与上一次commit保持一致</span><br>$ git reset --hard<br><br><span class="hljs-comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br>$ git reset [commit]<br><br><span class="hljs-comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br>$ git reset --hard [commit]<br><br><span class="hljs-comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br>$ git reset --keep [commit]<br><br><span class="hljs-comment"># 新建一个commit，用来撤销指定commit</span><br><span class="hljs-comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br>$ git revert [commit]<br><br><span class="hljs-comment"># 暂时将未提交的变化移除，稍后再移入</span><br>$ git stash<br>$ git stash pop<br></code></pre></td></tr></table></figure><hr><h2 id="设备间同步和迁移方案"><a href="#设备间同步和迁移方案" class="headerlink" title="设备间同步和迁移方案"></a>设备间同步和迁移方案</h2><blockquote><p>　如果不需要修改主题，只是写博客的话，那么需要备份的无非就是<code>source</code>和<code>config</code></p></blockquote><p>方法很简单，在github上新建一个repo备份source即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-built_in">source</span><br>git init<br>git remote add backup git@github.com:cloisonne/Markdown_Backup.git<br>git add .<br>git commit -m <span class="hljs-string">&quot;information&quot;</span><br>git pull backup master<br>git push -u backup master --force<br></code></pre></td></tr></table></figure><p>更换电脑设备时首先pull下source，在写好新的文章后deploy后记得push一下source即可。<br>git作为优秀的版本控制工具，命令实在太多太杂，还是需要长期的使用才能掌握。</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用socket实现路由表和二层帧转发</title>
    <link href="/posts/33500/"/>
    <url>/posts/33500/</url>
    
    <content type="html"><![CDATA[<p>最近研究LInux下的socket编程，这里做一个基础总结和对两份代码的分析。一个是路由表转发，一个是二层帧转发。</p><span id="more"></span><hr><p><a href="/posts/33500/#%E8%B7%AF%E7%94%B1%E8%A1%A8MAC%E8%BD%AC%E5%8F%91%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90">太长不看，直接看代码的传送门</a></p><h3 id="一些基础知识"><a href="#一些基础知识" class="headerlink" title="一些基础知识"></a>一些基础知识</h3><p><img src="http://o7myibfc7.bkt.clouddn.com/0_1301456076yzy7.gif.jpeg?imageView2/2/h/400/" alt="封装过程"></p><p>常用的头结构，这里没包括ICMP头。</p><p><strong>MAC头结构</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*位于/usr/include/net/ethernet.h</span><br><span class="hljs-comment">数据帧定义，头14个字节，尾4个字节*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">MAC_FRAME_HEADER</span></span><br><span class="hljs-class">&#123;</span><br> <span class="hljs-keyword">char</span> m_cDstMacAddress[<span class="hljs-number">6</span>];    <span class="hljs-comment">//目的mac地址</span><br> <span class="hljs-keyword">char</span> m_cSrcMacAddress[<span class="hljs-number">6</span>];    <span class="hljs-comment">//源mac地址</span><br> <span class="hljs-keyword">short</span> m_cType;       　　　　　<span class="hljs-comment">//上一层协议类型，如0x0800代表上一层是IP协议，0x0806为arp</span><br>&#125;__attribute__((packed))MAC_FRAME_HEADER,*PMAC_FRAME_HEADER;<br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">MAC_FRAME_TAIL</span></span><br><span class="hljs-class">&#123;</span><br> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> m_sCheckSum;    <span class="hljs-comment">//数据帧尾校验和</span><br>&#125;__attribute__((packed))MAC_FRAME_TAIL, *PMAC_FRAME_TAIL;<br></code></pre></td></tr></table></figure><p><strong>IP头结构</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 自定义 /netinet/ip.h</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IP_HEADER</span> </span><br><span class="hljs-class">&#123;</span><br> <span class="hljs-keyword">char</span> m_cVersionAndHeaderLen;     　　<span class="hljs-comment">//版本信息(前4位)，头长度(后4位)</span><br> <span class="hljs-keyword">char</span> m_cTypeOfService;      　　　　　 <span class="hljs-comment">// 服务类型8位</span><br> <span class="hljs-keyword">short</span> m_sTotalLenOfPacket;    　　　　<span class="hljs-comment">//数据包长度</span><br> <span class="hljs-keyword">short</span> m_sPacketID;      　　　　　　　 <span class="hljs-comment">//数据包标识</span><br> <span class="hljs-keyword">short</span> m_sSliceinfo;      　　　　　　　  <span class="hljs-comment">//分片使用</span><br> <span class="hljs-keyword">char</span> m_cTTL;        　　　　　　　　　　<span class="hljs-comment">//存活时间</span><br> <span class="hljs-keyword">char</span> m_cTypeOfProtocol;    　　　　　 <span class="hljs-comment">//协议类型</span><br> <span class="hljs-keyword">short</span> m_sCheckSum;      　　　　　　 <span class="hljs-comment">//校验和</span><br> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> m_uiSourIp;     　　　　　<span class="hljs-comment">//源ip</span><br> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> m_uiDestIp;     　　　　　<span class="hljs-comment">//目的ip</span><br>&#125; __attribute__((packed))IP_HEADER, *PIP_HEADER ;<br></code></pre></td></tr></table></figure><p><img src="http://o7myibfc7.bkt.clouddn.com/IPheader.jpg" alt="IP头结构"></p><p><strong>tcp头结构</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">TCP_HEADER</span> </span><br><span class="hljs-class">&#123;</span><br> <span class="hljs-keyword">short</span> m_sSourPort;        　　　　　　<span class="hljs-comment">// 源端口号16bit</span><br> <span class="hljs-keyword">short</span> m_sDestPort;       　　　　　　 <span class="hljs-comment">// 目的端口号16bit</span><br> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> m_uiSequNum;       　　<span class="hljs-comment">// 序列号32bit</span><br> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> m_uiAcknowledgeNum;  <span class="hljs-comment">// 确认号32bit</span><br> <span class="hljs-keyword">short</span> m_sHeaderLenAndFlag;      　　<span class="hljs-comment">// 前4位：TCP头长度；中6位：保留；后6位：标志位</span><br> <span class="hljs-keyword">short</span> m_sWindowSize;       　　　　　<span class="hljs-comment">// 窗口大小16bit</span><br> <span class="hljs-keyword">short</span> m_sCheckSum;        　　　　　 <span class="hljs-comment">// 检验和16bit</span><br> <span class="hljs-keyword">short</span> m_surgentPointer;      　　　　 <span class="hljs-comment">// 紧急数据偏移量16bit</span><br>&#125;__attribute__((packed))TCP_HEADER, *PTCP_HEADER;<br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">TCP_OPTIONS</span></span><br><span class="hljs-class">&#123;</span><br> <span class="hljs-keyword">char</span> m_ckind;<br> <span class="hljs-keyword">char</span> m_cLength;<br> <span class="hljs-keyword">char</span> m_cContext[<span class="hljs-number">32</span>];<br>&#125;__attribute__((packed))TCP_OPTIONS, *PTCP_OPTIONS;<br></code></pre></td></tr></table></figure><p><img src="http://o7myibfc7.bkt.clouddn.com/TCPheader.jpg" alt="TCP头"></p><p><strong>UDP头结构</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">UDP_HEADER</span> </span><br><span class="hljs-class">&#123;</span><br> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> m_usSourPort;    　　　<span class="hljs-comment">// 源端口号16bit</span><br> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> m_usDestPort;    　　　<span class="hljs-comment">// 目的端口号16bit</span><br> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> m_usLength;    　　　　<span class="hljs-comment">// 数据包长度16bit</span><br> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> m_usCheckSum;    　　<span class="hljs-comment">// 校验和16bit</span><br>&#125;__attribute__((packed))UDP_HEADER, *PUDP_HEADER;<br></code></pre></td></tr></table></figure><p><img src="http://o7myibfc7.bkt.clouddn.com/UDPheader.jpg" alt="UDP头"></p><p><strong>原始套接字编程</strong></p><p>原始套接字编程主要是涉及到packet，这里给出packet的man文件：</p><p><a href="http://man7.org/linux/man-pages/man7/packet.7.html">PACKET</a></p><hr><h3 id="路由表MAC转发代码分析"><a href="#路由表MAC转发代码分析" class="headerlink" title="路由表MAC转发代码分析"></a>路由表MAC转发代码分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/if_ether.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;netpacket/packet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;net/ethernet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;define.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;net/if.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;arpa/inet.h&gt;</span><br><span class="hljs-comment">//#include &lt;linux/in.h&gt;</span><br><br><span class="hljs-comment">//extern int errno;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span>errno</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> errno;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-keyword">int</span> sockfd;<br><span class="hljs-keyword">char</span> recvbuf[<span class="hljs-number">2048</span>];<br><span class="hljs-keyword">int</span> R_table_id =<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">int</span> R_table_sum=<span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">RTable</span> <span class="hljs-title">mytable</span>[10];</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ReadFile</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 读取配置文件</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">FindMe</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 查找IP对应的MAC地址</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sends</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 发送给MAC地址</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getvol</span><span class="hljs-params">(<span class="hljs-keyword">char</span> g)</span></span>; <span class="hljs-comment">// 返回ASCII码</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> **argv)</span> </span>&#123;<br>ReadFile();<br><br><span class="hljs-keyword">if</span>((sockfd=socket(PF_PACKET,SOCK_RAW,htons(ETH_P_IP)))&lt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Can Not Create Raw Socket\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">int</span> n_read=recvfrom(sockfd,recvbuf,<span class="hljs-number">2048</span>,<span class="hljs-number">0</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span>(n_read&lt;<span class="hljs-number">42</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error When Receive Message\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">char</span>*p =recvbuf;<br><span class="hljs-keyword">int</span> n=<span class="hljs-number">0xff</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;MAC address:%.2x:%02x:%02x:%02x:%02x:%02x====&gt;%.2x:%02x:%02x:%02x:%02x:%02x\n&quot;</span>,p[<span class="hljs-number">6</span>]&amp;n,p[<span class="hljs-number">7</span>]&amp;n,p[<span class="hljs-number">8</span>]&amp;n,p[<span class="hljs-number">9</span>]&amp;n,p[<span class="hljs-number">10</span>]&amp;n,p[<span class="hljs-number">11</span>]&amp;n,p[<span class="hljs-number">0</span>]&amp;n,p[<span class="hljs-number">1</span>]&amp;n,p[<span class="hljs-number">2</span>]&amp;n,p[<span class="hljs-number">3</span>]&amp;n,p[<span class="hljs-number">4</span>]&amp;n,p[<span class="hljs-number">5</span>]&amp;n);<br>p=recvbuf+<span class="hljs-number">26</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;IP:%d.%d.%d.%d  ===&gt;%d.%d.%d.%d\n&quot;</span>,p[<span class="hljs-number">0</span>]&amp;n,p[<span class="hljs-number">1</span>]&amp;n,p[<span class="hljs-number">2</span>]&amp;n,p[<span class="hljs-number">3</span>]&amp;n,p[<span class="hljs-number">4</span>]&amp;n,p[<span class="hljs-number">5</span>]&amp;n,p[<span class="hljs-number">6</span>]&amp;n,p[<span class="hljs-number">7</span>]&amp;n);<br>R_table_id = FindMe(p+<span class="hljs-number">4</span>);<br><span class="hljs-keyword">if</span>(R_table_id == <span class="hljs-number">-1</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Not Find In Route\n&quot;</span>);<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Find In Route %s\n&quot;</span>,mytable[R_table_id].eth);<br>sends();<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ReadFile</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">// 读取本地配置文件</span><br>FILE *fp = fopen(<span class="hljs-string">&quot;conf.file&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-keyword">if</span>(fp == <span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERROR WHNE READING!\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">char</span> *p;<br><span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>,i=<span class="hljs-number">0</span>,Rt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> n=<span class="hljs-number">0xff</span>;<br><span class="hljs-keyword">char</span> temp[<span class="hljs-number">2048</span>];<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> t[<span class="hljs-number">4</span>];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NOW READING!\n&quot;</span>);<br><span class="hljs-keyword">while</span>(!feof(fp))&#123;<br><span class="hljs-built_in">fscanf</span>(fp,<span class="hljs-string">&quot;%s %s %d.%d.%d.%d\n&quot;</span>,mytable[Rt].eth,temp,&amp;t[<span class="hljs-number">0</span>],&amp;t[<span class="hljs-number">1</span>],&amp;t[<span class="hljs-number">2</span>],&amp;t[<span class="hljs-number">3</span>]);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>,k=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">17</span>;i+=<span class="hljs-number">3</span>)<br>   mytable[Rt].mac[k++] = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>)(<span class="hljs-number">16</span>*getvol(temp[i]) + getvol(temp[i+<span class="hljs-number">1</span>]));<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br><span class="hljs-built_in">memcpy</span>(mytable[Rt].ip+i,&amp;t[i],<span class="hljs-number">1</span>);<br>p = mytable[Rt].mac;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d DST %s MAC: %.2x:%02x:%02x:%02x:%02x:%02x &quot;</span>,R_table_sum,mytable[Rt].eth,p[<span class="hljs-number">0</span>]&amp;n,p[<span class="hljs-number">1</span>]&amp;n,p[<span class="hljs-number">2</span>]&amp;n,p[<span class="hljs-number">3</span>]&amp;n,p[<span class="hljs-number">4</span>]&amp;n,p[<span class="hljs-number">5</span>]&amp;n);<br>p = mytable[Rt].ip;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;IP: %d.%d.%d.%d\n&quot;</span>,p[<span class="hljs-number">0</span>]&amp;n,p[<span class="hljs-number">1</span>]&amp;n,p[<span class="hljs-number">2</span>]&amp;n,p[<span class="hljs-number">3</span>]&amp;n);<br>R_table_sum++;<br>Rt++;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d READING END!\n&quot;</span>,R_table_sum);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">FindMe</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *mp)</span></span>&#123;<span class="hljs-comment">//get the index in router table</span><br>   <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;R_table_sum;i++)<br>   &#123;<br>       <span class="hljs-keyword">if</span>(<span class="hljs-built_in">memcmp</span>(mp,mytable[i].ip,<span class="hljs-number">3</span>) == <span class="hljs-number">0</span>)<br>       <span class="hljs-keyword">return</span> i;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sends</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//int i=0,n=0xff,</span><br><span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_ll</span> <span class="hljs-title">sa</span>;</span><br><span class="hljs-built_in">memset</span>(&amp;sa,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(struct sockaddr_ll));<br>sa.sll_family = AF_PACKET;<br>sa.sll_halen = <span class="hljs-number">6</span>;<br>sa.sll_ifindex = if_nametoindex(mytable[R_table_id].eth);<br>sa.sll_protocol = <span class="hljs-number">0x0800</span>;<br><span class="hljs-built_in">memcpy</span>(&amp;sa.sll_addr,mytable[R_table_id].mac,<span class="hljs-number">6</span>);<br><span class="hljs-built_in">memcpy</span>(recvbuf,mytable[R_table_id].mac,<span class="hljs-number">6</span>);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iphead</span> *<span class="hljs-title">iph</span> =</span> (struct iphead *)(recvbuf+<span class="hljs-number">14</span>); <span class="hljs-comment">// 去掉MAC头 得到IP头</span><br>len = <span class="hljs-number">16</span>*iph-&gt;ip_len[<span class="hljs-number">0</span>] + iph-&gt;ip_len[<span class="hljs-number">1</span>]; <span class="hljs-comment">// 数据报长度</span><br><span class="hljs-keyword">int</span> retval = sendto(sockfd, recvbuf, <span class="hljs-number">14</span>+len, <span class="hljs-number">0</span>, (struct sockaddr*)&amp;sa, <span class="hljs-keyword">sizeof</span>(struct sockaddr_ll));<br><span class="hljs-keyword">if</span>(retval == <span class="hljs-number">-1</span>)&#123;<br>perror(<span class="hljs-string">&quot;Sends Error&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getvol</span><span class="hljs-params">(<span class="hljs-keyword">char</span> g)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">isalpha</span>(g))<br><span class="hljs-keyword">return</span> (<span class="hljs-number">10</span>+g-<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> (g-<span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里的IP头结构为自定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iphead</span>&#123;</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> ip_hl:<span class="hljs-number">4</span>,ip_v:<span class="hljs-number">4</span>;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> ip_tos;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> ip_len[<span class="hljs-number">2</span>];<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> ip_id;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> ip_off;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> ip_ttl;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> ip_p;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> ip_sum;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> ip_src;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> ip_dst;<br>&#125;;<br></code></pre></td></tr></table></figure><p>程序接收完整的一个socket packet，进行包头的分解，然后根据配置文件的IP和MAC对应关系进行转发。</p><hr><h3 id="socket二层帧转发代码分析"><a href="#socket二层帧转发代码分析" class="headerlink" title="socket二层帧转发代码分析"></a>socket二层帧转发代码分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/if_packet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/if_ether.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ioctl.h&gt;</span><span class="hljs-comment">//for netdevice</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/if_arp.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _GNU_SOURCE </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;dirent.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/select.h&gt;</span><span class="hljs-comment">//for select()</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b)) </span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ETH_FRAME_LEN  500</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NICNUM 2<span class="hljs-comment">//要接收的网卡数量为2，默认为eth0和eth1</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RECVDEBUG</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SENDDEBUG</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EthernetInfo</span> &#123;</span><br><span class="hljs-keyword">int</span> dev;<span class="hljs-comment">//是否存在？</span><br><span class="hljs-keyword">int</span> active;<span class="hljs-comment">//是否被激活；</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> mac_local[<span class="hljs-number">8</span>];<span class="hljs-comment">//本地网卡的MAC地址</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> mac_next[<span class="hljs-number">8</span>];<span class="hljs-comment">//下一跳的MAC地址</span><br>&#125; EthernetInfo;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipheader</span> &#123;</span><br> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> ip_hl:<span class="hljs-number">4</span>, ip_v:<span class="hljs-number">4</span>; <span class="hljs-comment">/* this means that each member is 4 bits */</span><br> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> ip_tos;<br> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> ip_len;<br> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> ip_id;<br> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> ip_off;<br> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> ip_ttl;<br> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> ip_p;<br> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> ip_sum;<br> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> ip_src;<br> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> ip_dst;<br>&#125;; <span class="hljs-comment">/* total ip header length: 20 bytes (=160 bits) */</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">itimerval</span> <span class="hljs-title">monitor_interval</span>;</span> <span class="hljs-comment">//系统定时器连续时间间隔</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">monitor_timer</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lookupethdev</span><span class="hljs-params">(EthernetInfo *eif)</span></span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span>&#123;<br><span class="hljs-keyword">int</span> i, m, n, cnt;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_ll</span> <span class="hljs-title">sockadr</span>[2], <span class="hljs-title">adrfrom</span>;</span> <span class="hljs-comment">//数据链路层使用的网络参数结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ifreq</span> <span class="hljs-title">ifst</span>[2];</span><br><span class="hljs-keyword">int</span> sock[<span class="hljs-number">2</span>];<span class="hljs-comment">//两个网卡上接收，这几个参数也得增加</span><br><span class="hljs-keyword">char</span> *devname[] = &#123;<span class="hljs-string">&quot;eth0&quot;</span>,<span class="hljs-string">&quot;eth1&quot;</span>&#125;;<br>EthernetInfo ethinfo[NICNUM];<span class="hljs-comment">//存放本地网卡硬件地址</span><br><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>  *buffer;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipheader</span> *<span class="hljs-title">iphdr</span>;</span><br><br>fd_set rset; <span class="hljs-comment">//for select()</span><br><span class="hljs-keyword">int</span> maxfd;<br><br>lookupethdev(&amp;ethinfo);<br>m = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;In Main ---\n Eth%d&#x27;s MAC  %x:%x:%x:%x:%x:%x\n&quot;</span>, m, ethinfo[m].mac_local[<span class="hljs-number">0</span>], ethinfo[m].mac_local[<span class="hljs-number">1</span>], ethinfo[m].mac_local[<span class="hljs-number">2</span>], ethinfo[m].mac_local[<span class="hljs-number">3</span>], ethinfo[m].mac_local[<span class="hljs-number">4</span>], ethinfo[m].mac_local[<span class="hljs-number">5</span>]);<br>buffer = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(ETH_FRAME_LEN); <span class="hljs-comment">//mem for buffer</span><br>data = buffer + <span class="hljs-number">14</span>; <span class="hljs-comment">//data in the frame</span><br><br><span class="hljs-keyword">for</span>(n=<span class="hljs-number">0</span>; n&lt;NICNUM; n++)&#123; <span class="hljs-comment">// 两个网卡分别socket和bind</span><br><span class="hljs-keyword">if</span> ((sock[n]=socket(AF_PACKET,SOCK_RAW,htons(ETH_P_ALL)))==<span class="hljs-number">-1</span>)&#123;<br>perror(<span class="hljs-string">&quot;When creat raw socket: &quot;</span>);<br><span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-built_in">strcpy</span>(ifst[n].ifr_name,devname[n]);<br>ioctl(sock[n],SIOCGIFINDEX,&amp;ifst[n]);   <span class="hljs-comment">//根据名字获取网卡的index号码</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; Eth%d--&gt; ifst.ifr_ifindex = %d \n&quot;</span>,n,ifst[n].ifr_ifindex);<br><br>sockadr[n].sll_family   = AF_PACKET;<br>sockadr[n].sll_protocol = htons(ETH_P_ALL);<br>sockadr[n].sll_ifindex  = ifst[n].ifr_ifindex;<br><br><span class="hljs-comment">// socket bind</span><br>i = bind(sock[n], &amp;(sockadr[n]), <span class="hljs-keyword">sizeof</span>(struct sockaddr_ll));<br><span class="hljs-keyword">if</span>(i != <span class="hljs-number">0</span>)&#123;<br>perror(<span class="hljs-string">&quot;Binding False: &quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Binding Sock[%d] successfully\n&quot;</span>, n);<br>&#125;<span class="hljs-comment">//--for--</span><br><br>monitor_interval.it_interval.tv_sec = <span class="hljs-number">0</span>;<br>monitor_interval.it_interval.tv_usec = <span class="hljs-number">0</span>;<br>monitor_interval.it_value.tv_sec = <span class="hljs-number">2</span>;<br>monitor_interval.it_value.tv_usec = <span class="hljs-number">0</span>; <span class="hljs-comment">//定时器周期</span><br>signal(SIGALRM,monitor_timer); <span class="hljs-comment">//将定时器到达信号连接到monitor_timer子程序</span><br>setitimer(ITIMER_REAL,&amp;monitor_interval,<span class="hljs-literal">NULL</span>); <span class="hljs-comment">//启动连续的定时器中断</span><br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>cnt++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------cnt = %d------------\n&quot;</span>, cnt);<br>FD_ZERO(&amp;rset);<br>maxfd = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(n=<span class="hljs-number">0</span>; n&lt;NICNUM; n++)&#123;<br>FD_SET(sock[n], &amp;rset);<br>maxfd = max(sock[n], maxfd);<br>&#125;<br>maxfd = maxfd + <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span>(select(maxfd, &amp;rset, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>)  &lt; <span class="hljs-number">1</span>)<br><span class="hljs-keyword">continue</span>;<span class="hljs-comment">//没有期望的接收事件发生，继续等待</span><br><br><span class="hljs-keyword">for</span> (n = <span class="hljs-number">0</span>; n &lt;NICNUM; n++)&#123;<br><span class="hljs-keyword">if</span> (FD_ISSET(sock[n], &amp;rset) == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">continue</span>;<span class="hljs-comment">//判断哪个套接字上发生了事件，没有，继续判断下一个</span><br><br>recvfrom(sock[n], buffer, ETH_FRAME_LEN, <span class="hljs-number">0</span>, (struct sockaddr*)&amp;adrfrom, <span class="hljs-keyword">sizeof</span>(struct sockaddr_ll));<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> RECVDEBUG</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Eth%d-----ProtocAtFrom ＝ %d DestMac: &quot;</span>, n, adrfrom.sll_protocol);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">6</span>; i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%2x-&quot;</span>, buffer[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;   SourceMac: &quot;</span>, adrfrom.sll_protocol);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">6</span>; i&lt;<span class="hljs-number">12</span>; i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%2x-&quot;</span>, buffer[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  FrameType = %2x-%2x\n&quot;</span>,  buffer[<span class="hljs-number">12</span>],  buffer[<span class="hljs-number">13</span>]);<br><span class="hljs-keyword">if</span>(buffer[<span class="hljs-number">12</span>] != <span class="hljs-number">0x08</span> || buffer[<span class="hljs-number">13</span>] != <span class="hljs-number">0x00</span>)<br><span class="hljs-keyword">continue</span>; <span class="hljs-comment">//不是IP帧，不再往下执行，跳回接收</span><br>iphdr =  (struct ipheader *)  (&amp;buffer[<span class="hljs-number">14</span>]);<span class="hljs-comment">//确定IP首部地址</span><br>data = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;(iphdr-&gt;ip_dst);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;S_IP = %8x  %d.%d.%d.%d\n&quot;</span>, iphdr-&gt;ip_dst, data[<span class="hljs-number">0</span>], data[<span class="hljs-number">1</span>], data[<span class="hljs-number">2</span>], data[<span class="hljs-number">3</span>]);<br><span class="hljs-comment">//注意：网络字节顺序（int==0x0b00a8c0 －&gt; 192.168.0.11）</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> RECVDEBUG</span><br><br><span class="hljs-comment">//开始转发－－目的MAC暂且全1－－&gt;数据链路层广播方式－－仅仅对于双网卡方式！</span><br>m = (n + <span class="hljs-number">1</span>) % <span class="hljs-number">1</span>; <span class="hljs-comment">// m=2？？？？？</span><br>sockadr[m].sll_family   = AF_PACKET;<br>sockadr[m].sll_protocol = htons(ETH_P_IP);<br>sockadr[m].sll_ifindex  = ifst[m].ifr_ifindex;<br>sockadr[m].sll_hatype   = ARPHRD_ETHER;<br>sockadr[m].sll_pkttype  = PACKET_OTHERHOST;<br>sockadr[m].sll_halen    = ETH_ALEN;<br><span class="hljs-built_in">memcpy</span>(sockadr[m].sll_addr, ethinfo[m].mac_local, ETH_ALEN);<br><span class="hljs-built_in">memset</span>(buffer, <span class="hljs-number">0xff</span>, ETH_ALEN); <span class="hljs-comment">// Mac全1</span><br><span class="hljs-built_in">memcpy</span>(buffer+ETH_ALEN,  ethinfo[m].mac_local, ETH_ALEN);<br>buffer[<span class="hljs-number">12</span>] = <span class="hljs-number">0x08</span>;<br>buffer[<span class="hljs-number">13</span>] = <span class="hljs-number">0x00</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> SENDDEBUG</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sendto  Eth%d-----ProtocAtFrom ＝ %d DestMac: &quot;</span>, n, adrfrom.sll_protocol);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">6</span>; i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%2x-&quot;</span>, buffer[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;   SourceMac: &quot;</span>, adrfrom.sll_protocol);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">6</span>; i&lt;<span class="hljs-number">12</span>; i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%2x-&quot;</span>, buffer[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  FrameType = %2x-%2x IPSize = 0x%x\n&quot;</span>,  buffer[<span class="hljs-number">12</span>],  buffer[<span class="hljs-number">13</span>], iphdr-&gt;ip_len);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> SENDDEBUG</span><br><br>i = sendto(sock[m],buffer,iphdr-&gt;ip_len + <span class="hljs-number">14</span>,<span class="hljs-number">0</span>,(struct sockaddr*)&amp;sockadr[m],<span class="hljs-keyword">sizeof</span>(struct sockaddr_ll));<br><span class="hljs-keyword">if</span>(i ==<span class="hljs-number">-1</span>)&#123;<br>perror(<span class="hljs-string">&quot;Error --&gt; When sendto: &quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sendto Success eth%d --&gt; eth%d Size = %d\n&quot;</span>, n, m, iphdr-&gt;ip_len);<br>&#125; <span class="hljs-comment">//---for---end---</span><br>&#125;<span class="hljs-comment">//--while--</span><br>&#125;<br><br><span class="hljs-comment">// 查询系统配置文件以获得网卡MAC地址 不适合Ubuntu 用ioctl重写</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lookupethdev</span><span class="hljs-params">(EthernetInfo *eif)</span></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//----------------------------------定时器------------------------------------------</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">monitor_timer</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> i,j,k,l,m,n;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> timer_counter;<br>monitor_interval.it_interval.tv_sec = <span class="hljs-number">0</span>;<br>monitor_interval.it_interval.tv_usec = <span class="hljs-number">0</span>;<br>monitor_interval.it_value.tv_sec = <span class="hljs-number">2</span>;<br>monitor_interval.it_value.tv_usec = <span class="hljs-number">0</span>; <span class="hljs-comment">//定时器周期:100ms</span><br>setitimer(ITIMER_REAL,&amp;monitor_interval,<span class="hljs-literal">NULL</span>); <br>timer_counter++;<br><span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Codes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Socket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式和一些常用文本处理命令</title>
    <link href="/posts/61374/"/>
    <url>/posts/61374/</url>
    
    <content type="html"><![CDATA[<p>一直懒于整理基础的一些东西，比如grep会用就好了，regex写不出可以查一下嘛，前些日子被问到如何在20万数据找到符合要求的数据，sed？egrep？原来我的基础命令水平这么差。</p><span id="more"></span><hr><p>先给出一条有意思的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">history</span> |awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> |sort|uniq -c|sort -rn|head -10<br></code></pre></td></tr></table></figure><p>可以看出最近你在忙什么，这是我的结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">219 sudo<br>151 <span class="hljs-built_in">cd</span><br>113 hexo<br>100 ls<br> 34 cat<br> 24 gcc<br> 21 man<br> 18 whereis<br> 14 ping<br> 14 ./clock<br></code></pre></td></tr></table></figure><p>所以我还是一个权限控，每天sudo输这么多遍也是挺累的。</p><p>还有个命令总是记不住：<code>nautilus</code> ，用来直接打开文件管理器，真想写个alias，还是记单词吧。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs excel">nautilus - Bing dictionary<br>UK[&#x27;<span class="hljs-built_in">n</span>ɔː<span class="hljs-built_in">t</span>ɪləs]<br><br>    n.鹦鹉螺<br>    鹦鹉螺号；鹦鹉螺属；文件管理器<br></code></pre></td></tr></table></figure><hr><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>一张图总结正则表达式，图太大，请点击：</p><p><a href="http://o7myibfc7.bkt.clouddn.com/034d5a7e-058f-328c-b5f4-dfad3725027e.jpg">正则表达式</a></p><p>正则表达式30分钟入门教程（常用正则表达式）：</p><p><a href="http://www.jb51.net/tools/zhengze.html/">外链到jb51网</a></p><hr><h3 id="grep-gawk-sed"><a href="#grep-gawk-sed" class="headerlink" title="grep gawk sed"></a>grep gawk sed</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">GREP(<span class="hljs-number">1</span>)                     General Commands Manual                    GREP(<span class="hljs-number">1</span>)<br><br>NAME<br>       grep, egrep, fgrep, rgrep - print lines <span class="hljs-keyword">matching</span> a pattern<br><br>SYNOPSIS<br>       grep [OPTIONS] PATTERN [FILE...]<br>       grep [OPTIONS] [-e PATTERN]...  [-f FILE]...  [FILE...]<br><br>DESCRIPTION<br>       grep searches the named input FILEs <span class="hljs-keyword">for</span> lines containing a match <span class="hljs-keyword">to</span> the<br>       given PATTERN.  <span class="hljs-keyword">If</span> no files are specified, <span class="hljs-keyword">or</span> <span class="hljs-keyword">if</span> the file “-” <span class="hljs-keyword">is</span> given,<br>       grep  searches  standard  input.   <span class="hljs-keyword">By</span> <span class="hljs-keyword">default</span>, grep prints the <span class="hljs-keyword">matching</span><br>       lines.<br><br>       <span class="hljs-keyword">In</span> addition, the variant programs egrep, fgrep <span class="hljs-keyword">and</span> rgrep are  the  same<br>       <span class="hljs-keyword">as</span>  grep -E,  grep -F,  <span class="hljs-keyword">and</span>  grep -r, respectively.  These variants are<br>       <span class="hljs-keyword">deprecated</span>, but are provided <span class="hljs-keyword">for</span> backward compatibility.<br><br>OPTIONS<br>   Generic Program Information<br>       --help Output a usage message <span class="hljs-keyword">and</span> <span class="hljs-keyword">exit</span>.<br><br>       -V, --version<br>              Output the version number <span class="hljs-keyword">of</span> grep <span class="hljs-keyword">and</span> <span class="hljs-keyword">exit</span>.<br><br>   Matcher Selection<br>       -E, --extended-regexp  <span class="hljs-comment">// 元字符拓展集 egrep</span><br>              Interpret PATTERN <span class="hljs-keyword">as</span> an extended regular  expression  (ERE,  see<br>              below).<br><br>       -F, --fixed-strings <span class="hljs-comment">// 速度更快 简单字符串</span><br>              Interpret PATTERN <span class="hljs-keyword">as</span> a list <span class="hljs-keyword">of</span> fixed strings (instead <span class="hljs-keyword">of</span> regular<br>              expressions), separated <span class="hljs-keyword">by</span> newlines,  any  <span class="hljs-keyword">of</span>  which  <span class="hljs-keyword">is</span>  <span class="hljs-keyword">to</span>  be<br>              matched.<br><br>       -G, --basic-regexp<br>              Interpret  PATTERN  <span class="hljs-keyword">as</span>  a  basic  regular  expression  (BRE, see<br>              below).  This <span class="hljs-keyword">is</span> the <span class="hljs-keyword">default</span>.<br><br>       -P, --perl-regexp<br>              Interpret the pattern <span class="hljs-keyword">as</span> a  Perl-compatible  regular  expression<br>              (PCRE).   This  <span class="hljs-keyword">is</span>  highly  experimental <span class="hljs-keyword">and</span> grep -P may warn <span class="hljs-keyword">of</span><br>              unimplemented features.<br><br>   <span class="hljs-keyword">Matching</span> Control<br>       -e PATTERN, --regexp=PATTERN<br>              Use PATTERN <span class="hljs-keyword">as</span> the pattern.  <span class="hljs-keyword">If</span> this  option  <span class="hljs-keyword">is</span>  used  multiple<br>              times <span class="hljs-keyword">or</span> <span class="hljs-keyword">is</span> combined <span class="hljs-keyword">with</span> the -f (--file) option, search <span class="hljs-keyword">for</span> all<br>              patterns given.  This option can be used <span class="hljs-keyword">to</span>  protect  a  pattern<br>              beginning <span class="hljs-keyword">with</span> “-”.<br><br>       -f FILE, --file=FILE<br>              Obtain patterns <span class="hljs-keyword">from</span> FILE, one per line.  <span class="hljs-keyword">If</span> this option <span class="hljs-keyword">is</span> used<br>              multiple times <span class="hljs-keyword">or</span> <span class="hljs-keyword">is</span> combined <span class="hljs-keyword">with</span>  the  -e  (--regexp)  option,<br>              search  <span class="hljs-keyword">for</span>  all  patterns  given.  The <span class="hljs-keyword">empty</span> file contains zero<br>              patterns, <span class="hljs-keyword">and</span> therefore matches nothing.<br><br>       -i, --ignore-<span class="hljs-keyword">case</span> <span class="hljs-comment">// 忽略大小写</span><br>              Ignore <span class="hljs-keyword">case</span> distinctions <span class="hljs-keyword">in</span>  both  the  PATTERN  <span class="hljs-keyword">and</span>  the  input<br>              files.<br><br>       -v, --invert-match <span class="hljs-comment">// 反检索</span><br>              Invert the sense <span class="hljs-keyword">of</span> <span class="hljs-keyword">matching</span>, <span class="hljs-keyword">to</span> <span class="hljs-keyword">select</span> non-<span class="hljs-keyword">matching</span> lines.<br><br>       -w, --word-regexp<br>              <span class="hljs-keyword">Select</span>  only  those  lines  containing  matches  that form whole<br>              words.  The test <span class="hljs-keyword">is</span> that the <span class="hljs-keyword">matching</span> substring must  either  be<br>              at  the  beginning  <span class="hljs-keyword">of</span>  the  line,  <span class="hljs-keyword">or</span>  preceded  <span class="hljs-keyword">by</span>  a non-word<br>              constituent character.  Similarly, it must be either at the  <span class="hljs-keyword">end</span><br>              <span class="hljs-keyword">of</span>  the  line  <span class="hljs-keyword">or</span>  followed <span class="hljs-keyword">by</span> a non-word constituent character.<br>              Word-constituent  characters  are  letters,  digits,   <span class="hljs-keyword">and</span>   the<br>              underscore.<br><br>       -x, --line-regexp<br>              <span class="hljs-keyword">Select</span>  only  those  matches  that exactly match the whole line.<br>              <span class="hljs-keyword">For</span> a regular expression pattern, this  <span class="hljs-keyword">is</span>  like  parenthesizing<br>              the pattern <span class="hljs-keyword">and</span> <span class="hljs-keyword">then</span> surrounding it <span class="hljs-keyword">with</span> ^ <span class="hljs-keyword">and</span> $.<br><br>       -y     Obsolete synonym <span class="hljs-keyword">for</span> -i.<br><br>   General Output Control<br>       -c, --count<br>              Suppress  normal output; instead print a count <span class="hljs-keyword">of</span> <span class="hljs-keyword">matching</span> lines<br>              <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> input file.  <span class="hljs-keyword">With</span> the -v,  --invert-match  option  (see<br>              below), count non-<span class="hljs-keyword">matching</span> lines.<br><br>       --color[=WHEN], --colour[=WHEN]<br>              Surround   the  matched  (non-<span class="hljs-keyword">empty</span>)  strings,  <span class="hljs-keyword">matching</span>  lines,<br>              context lines, file  names,  line  numbers,  byte  offsets,  <span class="hljs-keyword">and</span><br>              separators  (<span class="hljs-keyword">for</span> fields <span class="hljs-keyword">and</span> groups <span class="hljs-keyword">of</span> context lines) <span class="hljs-keyword">with</span> escape<br>              sequences <span class="hljs-keyword">to</span> display them <span class="hljs-keyword">in</span> color <span class="hljs-keyword">on</span> the terminal.  The  colors<br>              are  defined  <span class="hljs-keyword">by</span>  the  environment  variable  GREP_COLORS.   The<br>              <span class="hljs-keyword">deprecated</span> environment variable GREP_COLOR <span class="hljs-keyword">is</span>  still  supported,<br>              but  its setting does <span class="hljs-keyword">not</span> have priority.  WHEN <span class="hljs-keyword">is</span> never, always,<br>              <span class="hljs-keyword">or</span> auto.<br><br>       -L, --files-without-match<br>              Suppress normal output; instead print the  name  <span class="hljs-keyword">of</span>  <span class="hljs-keyword">each</span>  input<br>              file <span class="hljs-keyword">from</span> which no output would normally have been printed.  The<br>              scanning will stop <span class="hljs-keyword">on</span> the first match.<br><br>       -l, --files-<span class="hljs-keyword">with</span>-matches<br>              Suppress normal output; instead print the  name  <span class="hljs-keyword">of</span>  <span class="hljs-keyword">each</span>  input<br>              file  <span class="hljs-keyword">from</span>  which  output would normally have been printed.  The<br>              scanning will stop <span class="hljs-keyword">on</span> the first match.<br><br>       -m NUM, --max-count=NUM<br>              Stop reading a file after NUM <span class="hljs-keyword">matching</span> lines.  <span class="hljs-keyword">If</span> the  input  <span class="hljs-keyword">is</span><br>              standard  input  <span class="hljs-keyword">from</span> a regular file, <span class="hljs-keyword">and</span> NUM <span class="hljs-keyword">matching</span> lines are<br>              output, grep ensures that the standard input  <span class="hljs-keyword">is</span>  positioned  <span class="hljs-keyword">to</span><br>              just  after the last <span class="hljs-keyword">matching</span> line before exiting, regardless <span class="hljs-keyword">of</span><br>              the presence <span class="hljs-keyword">of</span> trailing context lines.  This enables a  calling<br>              process  <span class="hljs-keyword">to</span> resume a search.  When grep stops after NUM <span class="hljs-keyword">matching</span><br>              lines, it outputs any trailing context lines.  When  the  -c  <span class="hljs-keyword">or</span><br>              --count  option  <span class="hljs-keyword">is</span>  also  used,  grep  does  <span class="hljs-keyword">not</span> output a count<br>              greater than NUM.  When the -v <span class="hljs-keyword">or</span> --invert-match option <span class="hljs-keyword">is</span>  also<br>              used, grep stops after outputting NUM non-<span class="hljs-keyword">matching</span> lines.<br><br>       -o, --only-<span class="hljs-keyword">matching</span><br>              Print  only  the  matched  (non-<span class="hljs-keyword">empty</span>) parts <span class="hljs-keyword">of</span> a <span class="hljs-keyword">matching</span> line,<br>              <span class="hljs-keyword">with</span> <span class="hljs-keyword">each</span> such part <span class="hljs-keyword">on</span> a separate output line.<br><br>       -q, --quiet, --silent<br>              Quiet;  <span class="hljs-keyword">do</span>  <span class="hljs-keyword">not</span>  <span class="hljs-keyword">write</span>  anything  <span class="hljs-keyword">to</span>  standard   output.    <span class="hljs-keyword">Exit</span><br>              immediately  <span class="hljs-keyword">with</span>  zero status <span class="hljs-keyword">if</span> any match <span class="hljs-keyword">is</span> found, even <span class="hljs-keyword">if</span> an<br>              error was detected.  Also see the -s <span class="hljs-keyword">or</span> --no-messages option.<br><br>       -s, --no-messages<br>              Suppress error messages about nonexistent <span class="hljs-keyword">or</span> unreadable files.<br><br>   Output Line Prefix Control<br>       -b, --byte-offset<br>              Print the <span class="hljs-number">0</span>-based byte offset within the input file before  <span class="hljs-keyword">each</span><br>              line <span class="hljs-keyword">of</span> output.  <span class="hljs-keyword">If</span> -o (--only-<span class="hljs-keyword">matching</span>) <span class="hljs-keyword">is</span> specified, print the<br>              offset <span class="hljs-keyword">of</span> the <span class="hljs-keyword">matching</span> part itself.<br><br>       -H, --<span class="hljs-keyword">with</span>-filename<br>              Print the file name <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> match.  This <span class="hljs-keyword">is</span>  the  <span class="hljs-keyword">default</span>  when<br>              there <span class="hljs-keyword">is</span> more than one file <span class="hljs-keyword">to</span> search.<br><br>       -h, --no-filename<br>              Suppress  the  prefixing  <span class="hljs-keyword">of</span>  file names <span class="hljs-keyword">on</span> output.  This <span class="hljs-keyword">is</span> the<br>              <span class="hljs-keyword">default</span> when there <span class="hljs-keyword">is</span> only one file (<span class="hljs-keyword">or</span> only standard input)  <span class="hljs-keyword">to</span><br>              search.<br><br>       --label=LABEL<br>              Display  input  actually  coming  <span class="hljs-keyword">from</span>  standard  input <span class="hljs-keyword">as</span> input<br>              coming  <span class="hljs-keyword">from</span>  file  LABEL.   This  <span class="hljs-keyword">is</span>  especially  useful   when<br>              implementing  tools  like  zgrep,  e.g.,  gzip -cd foo.gz | grep<br>              --label=foo -H something.  See also the -H option.<br><br>       -n, --line-number<br>              Prefix <span class="hljs-keyword">each</span> line <span class="hljs-keyword">of</span> output <span class="hljs-keyword">with</span> the <span class="hljs-number">1</span>-based line  number  within<br>              its input file.<br><br>       -T, --initial-tab<br>              Make  sure  that the first character <span class="hljs-keyword">of</span> actual line content lies<br>              <span class="hljs-keyword">on</span> a tab stop, so that the alignment <span class="hljs-keyword">of</span> tabs looks normal.  This<br>              <span class="hljs-keyword">is</span>  useful  <span class="hljs-keyword">with</span>  options that prefix their output <span class="hljs-keyword">to</span> the actual<br>              content: -H,-n, <span class="hljs-keyword">and</span> -b.  <span class="hljs-keyword">In</span> <span class="hljs-keyword">order</span>  <span class="hljs-keyword">to</span>  improve  the  probability<br>              that lines <span class="hljs-keyword">from</span> a single file will all start at the same column,<br>              this also causes the line number <span class="hljs-keyword">and</span> byte offset (<span class="hljs-keyword">if</span> present) <span class="hljs-keyword">to</span><br>              be printed <span class="hljs-keyword">in</span> a minimum size field width.<br><br>       -u, --unix-byte-offsets<br>              Report  Unix-style  byte  offsets.   This  switch causes grep <span class="hljs-keyword">to</span><br>              report byte offsets <span class="hljs-keyword">as</span> <span class="hljs-keyword">if</span> the file were a Unix-style text  file,<br>              i.e.,  <span class="hljs-keyword">with</span>  CR  characters  stripped  off.   This  will produce<br>              results identical <span class="hljs-keyword">to</span> running  grep  <span class="hljs-keyword">on</span>  a  Unix  machine.   This<br>              option  <span class="hljs-keyword">has</span>  no  effect unless -b option <span class="hljs-keyword">is</span> also used; it <span class="hljs-keyword">has</span> no<br>              effect <span class="hljs-keyword">on</span> platforms other than MS-DOS <span class="hljs-keyword">and</span> MS-Windows.<br><br>       -Z, --null<br>              Output a zero byte (the ASCII  NUL  character)  instead  <span class="hljs-keyword">of</span>  the<br>              character  that normally follows a file name.  <span class="hljs-keyword">For</span> example, grep<br>              -lZ outputs a zero byte after <span class="hljs-keyword">each</span>  file  name  instead  <span class="hljs-keyword">of</span>  the<br>              usual  newline.   This option makes the output unambiguous, even<br>              <span class="hljs-keyword">in</span> the presence <span class="hljs-keyword">of</span> file names containing unusual characters like<br>              newlines.   This  option  can  be  used  <span class="hljs-keyword">with</span> commands like find<br>              -print0, perl -<span class="hljs-number">0</span>, sort -z, <span class="hljs-keyword">and</span> xargs  -<span class="hljs-number">0</span>  <span class="hljs-keyword">to</span>  process  arbitrary<br>              file names, even those that contain newline characters.<br><br>   Context Line Control<br>       -A NUM, --after-context=NUM<br>              Print  NUM  lines  <span class="hljs-keyword">of</span>  trailing  context  after  <span class="hljs-keyword">matching</span> lines.<br>              Places  a  line  containing  a  <span class="hljs-keyword">group</span>  separator  (--)   between<br>              contiguous  groups  <span class="hljs-keyword">of</span>  matches.  <span class="hljs-keyword">With</span> the -o <span class="hljs-keyword">or</span> --only-<span class="hljs-keyword">matching</span><br>              option, this <span class="hljs-keyword">has</span> no effect <span class="hljs-keyword">and</span> a warning <span class="hljs-keyword">is</span> given.<br><br>       -B NUM, --before-context=NUM<br>              Print NUM  lines  <span class="hljs-keyword">of</span>  leading  context  before  <span class="hljs-keyword">matching</span>  lines.<br>              Places   a  line  containing  a  <span class="hljs-keyword">group</span>  separator  (--)  between<br>              contiguous groups <span class="hljs-keyword">of</span> matches.  <span class="hljs-keyword">With</span> the  -o  <span class="hljs-keyword">or</span>  --only-<span class="hljs-keyword">matching</span><br>              option, this <span class="hljs-keyword">has</span> no effect <span class="hljs-keyword">and</span> a warning <span class="hljs-keyword">is</span> given.<br><br>       -C NUM, -NUM, --context=NUM<br>              Print  NUM  lines <span class="hljs-keyword">of</span> output context.  Places a line containing a<br>              <span class="hljs-keyword">group</span> separator (--) between contiguous groups <span class="hljs-keyword">of</span> matches.  <span class="hljs-keyword">With</span><br>              the  -o  <span class="hljs-keyword">or</span>  --only-<span class="hljs-keyword">matching</span>  option,  this  <span class="hljs-keyword">has</span> no effect <span class="hljs-keyword">and</span> a<br>              warning <span class="hljs-keyword">is</span> given.<br><br>   File <span class="hljs-keyword">and</span> Directory Selection<br>       -a, --text<br>              Process a binary file <span class="hljs-keyword">as</span> <span class="hljs-keyword">if</span> it were text; this <span class="hljs-keyword">is</span> equivalent  <span class="hljs-keyword">to</span><br>              the --binary-files=text option.<br><br>       --binary-files=<span class="hljs-keyword">TYPE</span><br>              <span class="hljs-keyword">If</span> the first few bytes <span class="hljs-keyword">of</span> a file indicate that the file contains<br>              binary data, assume that the file <span class="hljs-keyword">is</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">type</span> <span class="hljs-keyword">TYPE</span>.  <span class="hljs-keyword">By</span>  <span class="hljs-keyword">default</span>,<br>              <span class="hljs-keyword">TYPE</span>  <span class="hljs-keyword">is</span>  binary,  <span class="hljs-keyword">and</span>  grep  normally outputs either a one-line<br>              message saying that a binary file  matches,  <span class="hljs-keyword">or</span>  no  message  <span class="hljs-keyword">if</span><br>              there  <span class="hljs-keyword">is</span> no match.  <span class="hljs-keyword">If</span> <span class="hljs-keyword">TYPE</span> <span class="hljs-keyword">is</span> without-match, grep assumes that<br>              a binary file does <span class="hljs-keyword">not</span> match;  this  <span class="hljs-keyword">is</span>  equivalent  <span class="hljs-keyword">to</span>  the  -I<br>              option.   <span class="hljs-keyword">If</span> <span class="hljs-keyword">TYPE</span> <span class="hljs-keyword">is</span> text, grep processes a binary file <span class="hljs-keyword">as</span> <span class="hljs-keyword">if</span> it<br>              were text; this <span class="hljs-keyword">is</span> equivalent <span class="hljs-keyword">to</span> the -a option.  When processing<br>              binary  data, grep may treat non-text bytes <span class="hljs-keyword">as</span> line terminators;<br>              <span class="hljs-keyword">for</span> example, the pattern <span class="hljs-string">&#x27;.&#x27;</span> (period) might  <span class="hljs-keyword">not</span>  match  a  null<br>              byte,  <span class="hljs-keyword">as</span>  the  null byte might be treated <span class="hljs-keyword">as</span> a line terminator.<br>              Warning: grep --binary-files=text might output  binary  garbage,<br>              which  can  have  nasty side effects <span class="hljs-keyword">if</span> the output <span class="hljs-keyword">is</span> a terminal<br>              <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span> the terminal driver interprets some <span class="hljs-keyword">of</span> it <span class="hljs-keyword">as</span> commands.<br><br>       -D ACTION, --devices=ACTION<br>              <span class="hljs-keyword">If</span> an input file <span class="hljs-keyword">is</span> a device, FIFO  <span class="hljs-keyword">or</span>  socket,  use  ACTION  <span class="hljs-keyword">to</span><br>              process  it.   <span class="hljs-keyword">By</span>  <span class="hljs-keyword">default</span>,  ACTION  <span class="hljs-keyword">is</span>  <span class="hljs-keyword">read</span>,  which means that<br>              devices are <span class="hljs-keyword">read</span> just <span class="hljs-keyword">as</span> <span class="hljs-keyword">if</span> they were ordinary files.  <span class="hljs-keyword">If</span> ACTION<br>              <span class="hljs-keyword">is</span> <span class="hljs-keyword">skip</span>, devices are silently skipped.<br><br>       -d ACTION, --directories=ACTION<br>              <span class="hljs-keyword">If</span>  an  input file <span class="hljs-keyword">is</span> a directory, use ACTION <span class="hljs-keyword">to</span> process it.  <span class="hljs-keyword">By</span><br>              <span class="hljs-keyword">default</span>, ACTION <span class="hljs-keyword">is</span> <span class="hljs-keyword">read</span>, i.e., <span class="hljs-keyword">read</span> directories just <span class="hljs-keyword">as</span> <span class="hljs-keyword">if</span>  they<br>              were   ordinary   files.   <span class="hljs-keyword">If</span>  ACTION  <span class="hljs-keyword">is</span>  <span class="hljs-keyword">skip</span>,  silently  <span class="hljs-keyword">skip</span><br>              directories.  <span class="hljs-keyword">If</span> ACTION <span class="hljs-keyword">is</span> recurse, <span class="hljs-keyword">read</span> all  files  under  <span class="hljs-keyword">each</span><br>              directory,  recursively,  following  symbolic links only <span class="hljs-keyword">if</span> they<br>              are <span class="hljs-keyword">on</span> the command line.  This <span class="hljs-keyword">is</span> equivalent <span class="hljs-keyword">to</span> the -r option.<br><br>       --exclude=GLOB<br>              <span class="hljs-keyword">Skip</span>  files  whose  base  name  matches  GLOB  (<span class="hljs-keyword">using</span>   wildcard<br>              <span class="hljs-keyword">matching</span>).   A  file-name  glob  can  use  *,  ?,  <span class="hljs-keyword">and</span> [...]  <span class="hljs-keyword">as</span><br>              wildcards, <span class="hljs-keyword">and</span> \ <span class="hljs-keyword">to</span> quote  a  wildcard  <span class="hljs-keyword">or</span>  backslash  character<br>              literally.<br><br>       --exclude-<span class="hljs-keyword">from</span>=FILE<br>              <span class="hljs-keyword">Skip</span>  files  whose  base name matches any <span class="hljs-keyword">of</span> the file-name globs<br>              <span class="hljs-keyword">read</span> <span class="hljs-keyword">from</span> FILE  (<span class="hljs-keyword">using</span>  wildcard  <span class="hljs-keyword">matching</span>  <span class="hljs-keyword">as</span>  described  under<br>              --exclude).<br><br>       --exclude-dir=DIR<br>              Exclude  directories  <span class="hljs-keyword">matching</span>  the  pattern  DIR <span class="hljs-keyword">from</span> recursive<br>              searches.<br><br>       -I     Process a binary file <span class="hljs-keyword">as</span> <span class="hljs-keyword">if</span> it did <span class="hljs-keyword">not</span>  contain  <span class="hljs-keyword">matching</span>  data;<br>              this <span class="hljs-keyword">is</span> equivalent <span class="hljs-keyword">to</span> the --binary-files=without-match option.<br><br>       --include=GLOB<br>              Search  only  files whose base name matches GLOB (<span class="hljs-keyword">using</span> wildcard<br>              <span class="hljs-keyword">matching</span> <span class="hljs-keyword">as</span> described under --exclude).<br><br>       -r, --recursive<br>              <span class="hljs-keyword">Read</span> all files  under  <span class="hljs-keyword">each</span>  directory,  recursively,  following<br>              symbolic  links only <span class="hljs-keyword">if</span> they are <span class="hljs-keyword">on</span> the command line.  Note that<br>              <span class="hljs-keyword">if</span>  no  file  operand  <span class="hljs-keyword">is</span>  given,  grep  searches  the   working<br>              directory.  This <span class="hljs-keyword">is</span> equivalent <span class="hljs-keyword">to</span> the -d recurse option.<br><br>       -R, --dereference-recursive<br>              <span class="hljs-keyword">Read</span>  all  files  under <span class="hljs-keyword">each</span> directory, recursively.  Follow all<br>              symbolic links, unlike -r.<br><br>   Other Options<br>       --line-buffered<br>              Use line buffering <span class="hljs-keyword">on</span> output.   This  can  cause  a  performance<br>              penalty.<br><br>       -U, --binary<br>              Treat  the  file(s) <span class="hljs-keyword">as</span> binary.  <span class="hljs-keyword">By</span> <span class="hljs-keyword">default</span>, under MS-DOS <span class="hljs-keyword">and</span> MS-<br>              Windows, grep guesses the file <span class="hljs-keyword">type</span> <span class="hljs-keyword">by</span> looking at  the  contents<br>              <span class="hljs-keyword">of</span>  the first <span class="hljs-number">32</span>KB <span class="hljs-keyword">read</span> <span class="hljs-keyword">from</span> the file.  <span class="hljs-keyword">If</span> grep decides the file<br>              <span class="hljs-keyword">is</span> a text file, it strips the CR characters  <span class="hljs-keyword">from</span>  the  original<br>              file  contents  (<span class="hljs-keyword">to</span>  make  regular expressions <span class="hljs-keyword">with</span> ^ <span class="hljs-keyword">and</span> $ work<br>              correctly).  Specifying -U overrules this guesswork, causing all<br>              files  <span class="hljs-keyword">to</span> be <span class="hljs-keyword">read</span> <span class="hljs-keyword">and</span> passed <span class="hljs-keyword">to</span> the <span class="hljs-keyword">matching</span> mechanism verbatim;<br>              <span class="hljs-keyword">if</span> the file <span class="hljs-keyword">is</span> a text file <span class="hljs-keyword">with</span> CR/LF pairs at the <span class="hljs-keyword">end</span>  <span class="hljs-keyword">of</span>  <span class="hljs-keyword">each</span><br>              line,  this  will  cause some regular expressions <span class="hljs-keyword">to</span> fail.  This<br>              option <span class="hljs-keyword">has</span> no effect <span class="hljs-keyword">on</span> platforms  other  than  MS-DOS  <span class="hljs-keyword">and</span>  MS-<br>              Windows.<br><br>       -z, --null-data<br>              Treat  the  input  <span class="hljs-keyword">as</span>  a <span class="hljs-keyword">set</span> <span class="hljs-keyword">of</span> lines, <span class="hljs-keyword">each</span> terminated <span class="hljs-keyword">by</span> a zero<br>              byte (the ASCII NUL character) instead <span class="hljs-keyword">of</span> a newline.   Like  the<br>              -Z  <span class="hljs-keyword">or</span> --null option, this option can be used <span class="hljs-keyword">with</span> commands like<br>              sort -z <span class="hljs-keyword">to</span> process arbitrary file names.<br><br>REGULAR EXPRESSIONS<br>       A regular expression <span class="hljs-keyword">is</span> a pattern that  describes  a  <span class="hljs-keyword">set</span>  <span class="hljs-keyword">of</span>  strings.<br>       Regular   expressions   are   constructed   analogously  <span class="hljs-keyword">to</span>  arithmetic<br>       expressions, <span class="hljs-keyword">by</span> <span class="hljs-keyword">using</span> various operators <span class="hljs-keyword">to</span> combine smaller expressions.<br><br>       grep understands three different versions <span class="hljs-keyword">of</span> regular expression syntax:<br>       “basic”  (BRE), “extended” (ERE) <span class="hljs-keyword">and</span> “perl” (PCRE).  <span class="hljs-keyword">In</span> GNU grep, there<br>       <span class="hljs-keyword">is</span> no difference <span class="hljs-keyword">in</span> available functionality between basic <span class="hljs-keyword">and</span>  extended<br>       syntaxes.  <span class="hljs-keyword">In</span> other implementations, basic regular expressions are less<br>       powerful.   The  following  description  applies  <span class="hljs-keyword">to</span>  extended  regular<br>       expressions;  differences  <span class="hljs-keyword">for</span> basic regular expressions are summarized<br>       afterwards.   Perl-compatible  regular  expressions   give   additional<br>       functionality,  <span class="hljs-keyword">and</span> are documented <span class="hljs-keyword">in</span> pcresyntax(<span class="hljs-number">3</span>) <span class="hljs-keyword">and</span> pcrepattern(<span class="hljs-number">3</span>),<br>       but work only <span class="hljs-keyword">if</span> PCRE <span class="hljs-keyword">is</span> available <span class="hljs-keyword">in</span> the system.<br><br>       The fundamental building blocks are the regular expressions that  match<br>       a single character.  Most characters, including all letters <span class="hljs-keyword">and</span> digits,<br>       are regular expressions that match themselves.  Any meta-character <span class="hljs-keyword">with</span><br>       special meaning may be quoted <span class="hljs-keyword">by</span> preceding it <span class="hljs-keyword">with</span> a backslash.<br><br>       The period . matches any single character.<br><br>   Character Classes <span class="hljs-keyword">and</span> Bracket Expressions<br>       A  bracket  expression <span class="hljs-keyword">is</span> a list <span class="hljs-keyword">of</span> characters enclosed <span class="hljs-keyword">by</span> [ <span class="hljs-keyword">and</span> ].  It<br>       matches any single character <span class="hljs-keyword">in</span> that list; <span class="hljs-keyword">if</span> the  first  character  <span class="hljs-keyword">of</span><br>       the  list <span class="hljs-keyword">is</span> the caret ^ <span class="hljs-keyword">then</span> it matches any character <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> the list.<br>       <span class="hljs-keyword">For</span> example, the regular expression  [<span class="hljs-number">0123456789</span>]  matches  any  single<br>       digit.<br><br>       Within  a  bracket  expression,  a  range  expression  consists  <span class="hljs-keyword">of</span> two<br>       characters separated <span class="hljs-keyword">by</span> a hyphen.  It matches any single character that<br>       sorts  between  the  two  characters,  inclusive,  <span class="hljs-keyword">using</span>  the  locale<span class="hljs-string">&#x27;s</span><br><span class="hljs-string">       collating sequence and character set.  For example, in  the  default  C</span><br><span class="hljs-string">       locale, [a-d] is equivalent to [abcd].  Many locales sort characters in</span><br><span class="hljs-string">       dictionary  order,  and  in  these  locales  [a-d]  is  typically   not</span><br><span class="hljs-string">       equivalent to [abcd]; it might be equivalent to [aBbCcDd], for example.</span><br><span class="hljs-string">       To obtain the traditional interpretation of  bracket  expressions,  you</span><br><span class="hljs-string">       can  use the C locale by setting the LC_ALL environment variable to the</span><br><span class="hljs-string">       value C.</span><br><span class="hljs-string"></span><br><span class="hljs-string">       Finally, certain named classes  of  characters  are  predefined  within</span><br><span class="hljs-string">       bracket expressions, as follows.  Their names are self explanatory, and</span><br><span class="hljs-string">       they  are  [:alnum:],  [:alpha:],  [:cntrl:],   [:digit:],   [:graph:],</span><br><span class="hljs-string">       [:lower:],  [:print:], [:punct:], [:space:], [:upper:], and [:xdigit:].</span><br><span class="hljs-string">       For example, [[:alnum:]] means  the  character  class  of  numbers  and</span><br><span class="hljs-string">       letters  in the current locale. In the C locale and ASCII character set</span><br><span class="hljs-string">       encoding, this is the same as [0-9A-Za-z].  (Note that the brackets  in</span><br><span class="hljs-string">       these  class names are part of the symbolic names, and must be included</span><br><span class="hljs-string">       in addition to the brackets delimiting the bracket  expression.)   Most</span><br><span class="hljs-string">       meta-characters  lose their special meaning inside bracket expressions.</span><br><span class="hljs-string">       To include a literal ] place it  first  in  the  list.   Similarly,  to</span><br><span class="hljs-string">       include a literal ^ place it anywhere but first.  Finally, to include a</span><br><span class="hljs-string">       literal - place it last.</span><br><span class="hljs-string"></span><br><span class="hljs-string">   Anchoring</span><br><span class="hljs-string">       The caret ^ and the dollar sign $ are meta-characters that respectively</span><br><span class="hljs-string">       match the empty string at the beginning and end of a line.</span><br><span class="hljs-string"></span><br><span class="hljs-string">   The Backslash Character and Special Expressions</span><br><span class="hljs-string">       The  symbols  \&lt;  and  \&gt;  respectively  match  the empty string at the</span><br><span class="hljs-string">       beginning and end of a word.  The symbol \b matches the empty string at</span><br><span class="hljs-string">       the  edge  of a word, and \B matches the empty string provided it&#x27;</span>s <span class="hljs-keyword">not</span><br>       at the edge <span class="hljs-keyword">of</span> a word.  The symbol \w <span class="hljs-keyword">is</span> a synonym <span class="hljs-keyword">for</span> [_[:alnum:]] <span class="hljs-keyword">and</span><br>       \W <span class="hljs-keyword">is</span> a synonym <span class="hljs-keyword">for</span> [^_[:alnum:]].<br><br>   Repetition<br>       A  regular  expression  may  be  followed  <span class="hljs-keyword">by</span> one <span class="hljs-keyword">of</span> several repetition<br>       operators:<br>       ?      The preceding item <span class="hljs-keyword">is</span> optional <span class="hljs-keyword">and</span> matched at most once.<br>       *      The preceding item will be matched zero <span class="hljs-keyword">or</span> more times.<br>       +      The preceding item will be matched one <span class="hljs-keyword">or</span> more times.<br>       <span class="hljs-comment">&#123;n&#125;</span>    The preceding item <span class="hljs-keyword">is</span> matched exactly n times.<br>       <span class="hljs-comment">&#123;n,&#125;</span>   The preceding item <span class="hljs-keyword">is</span> matched n <span class="hljs-keyword">or</span> more times.<br>       <span class="hljs-comment">&#123;,m&#125;</span>   The preceding item <span class="hljs-keyword">is</span> matched at most m times.  This  <span class="hljs-keyword">is</span>  a  GNU<br>              <span class="hljs-keyword">extension</span>.<br>       <span class="hljs-comment">&#123;n,m&#125;</span>  The  preceding  item  <span class="hljs-keyword">is</span>  matched at least n times, but <span class="hljs-keyword">not</span> more<br>              than m times.<br><br>   Concatenation<br>       Two regular expressions may  be  concatenated;  the  resulting  regular<br>       expression  matches  any  string formed <span class="hljs-keyword">by</span> concatenating two substrings<br>       that respectively match the concatenated expressions.<br><br>   Alternation<br>       Two regular expressions may be joined <span class="hljs-keyword">by</span>  the  infix  <span class="hljs-keyword">operator</span>  |;  the<br>       resulting   regular  expression  matches  any  string  <span class="hljs-keyword">matching</span>  either<br>       alternate expression.<br><br>   Precedence<br>       Repetition takes precedence over concatenation,  which  <span class="hljs-keyword">in</span>  turn  takes<br>       precedence  over  alternation.   A  whole expression may be enclosed <span class="hljs-keyword">in</span><br>       parentheses  <span class="hljs-keyword">to</span>  <span class="hljs-keyword">override</span>   these   precedence   rules   <span class="hljs-keyword">and</span>   form   a<br>       subexpression.<br><br>   Back References <span class="hljs-keyword">and</span> Subexpressions<br>       The back-<span class="hljs-keyword">reference</span> \n, <span class="hljs-keyword">where</span> n <span class="hljs-keyword">is</span> a single digit, matches the substring<br>       previously matched  <span class="hljs-keyword">by</span>  the  nth  parenthesized  subexpression  <span class="hljs-keyword">of</span>  the<br>       regular expression.<br><br>   Basic vs Extended Regular Expressions<br>       <span class="hljs-keyword">In</span>  basic  regular expressions the meta-characters ?, +, <span class="hljs-comment">&#123;, |, (, and )</span><br><span class="hljs-comment">       lose their special meaning; instead use the  backslashed  versions  \?,</span><br><span class="hljs-comment">       \+, \&#123;, \|, \(, and \).</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">ENVIRONMENT VARIABLES</span><br><span class="hljs-comment">       The   behavior  of  grep  is  affected  by  the  following  environment</span><br><span class="hljs-comment">       variables.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       The locale for category LC_foo is  specified  by  examining  the  three</span><br><span class="hljs-comment">       environment  variables  LC_ALL, LC_foo, LANG, in that order.  The first</span><br><span class="hljs-comment">       of these variables that is set specifies the locale.  For  example,  if</span><br><span class="hljs-comment">       LC_ALL  is not set, but LC_MESSAGES is set to pt_BR, then the Brazilian</span><br><span class="hljs-comment">       Portuguese locale is used for the LC_MESSAGES category.  The  C  locale</span><br><span class="hljs-comment">       is  used  if none of these environment variables are set, if the locale</span><br><span class="hljs-comment">       catalog is not installed, or if grep was  not  compiled  with  national</span><br><span class="hljs-comment">       language support (NLS).</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       GREP_OPTIONS</span><br><span class="hljs-comment">              This variable specifies default options to be placed in front of</span><br><span class="hljs-comment">              any explicit options.  As  this  causes  problems  when  writing</span><br><span class="hljs-comment">              portable  scripts,  this  feature  will  be  removed in a future</span><br><span class="hljs-comment">              release of grep, and grep warns if it is used.   Please  use  an</span><br><span class="hljs-comment">              alias or script instead.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       GREP_COLOR</span><br><span class="hljs-comment">              This  variable  specifies  the  color  used to highlight matched</span><br><span class="hljs-comment">              (non-empty) text.  It is deprecated in favor of GREP_COLORS, but</span><br><span class="hljs-comment">              still supported.  The mt, ms, and mc capabilities of GREP_COLORS</span><br><span class="hljs-comment">              have priority over it.  It can only specify the  color  used  to</span><br><span class="hljs-comment">              highlight  the  matching  non-empty text in any matching line (a</span><br><span class="hljs-comment">              selected line when the -v command-line option is omitted,  or  a</span><br><span class="hljs-comment">              context line when -v is specified).  The default is 01;31, which</span><br><span class="hljs-comment">              means a bold red  foreground  text  on  the  terminal&#x27;s  default</span><br><span class="hljs-comment">              background.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       GREP_COLORS</span><br><span class="hljs-comment">              Specifies  the  colors  and  other  attributes used to highlight</span><br><span class="hljs-comment">              various parts of the output.  Its  value  is  a  colon-separated</span><br><span class="hljs-comment">              list       of       capabilities      that      defaults      to</span><br><span class="hljs-comment">              ms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36  with  the  rv</span><br><span class="hljs-comment">              and  ne  boolean  capabilities omitted (i.e., false).  Supported</span><br><span class="hljs-comment">              capabilities are as follows.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">              sl=    SGR substring for whole selected  lines  (i.e.,  matching</span><br><span class="hljs-comment">                     lines when the -v command-line option is omitted, or non-</span><br><span class="hljs-comment">                     matching lines when -v is  specified).   If  however  the</span><br><span class="hljs-comment">                     boolean  rv capability and the -v command-line option are</span><br><span class="hljs-comment">                     both specified, it  applies  to  context  matching  lines</span><br><span class="hljs-comment">                     instead.   The  default  is  empty  (i.e., the terminal&#x27;s</span><br><span class="hljs-comment">                     default color pair).</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">              cx=    SGR substring for whole context lines (i.e., non-matching</span><br><span class="hljs-comment">                     lines  when  the  -v  command-line  option is omitted, or</span><br><span class="hljs-comment">                     matching lines when -v is  specified).   If  however  the</span><br><span class="hljs-comment">                     boolean  rv capability and the -v command-line option are</span><br><span class="hljs-comment">                     both specified, it applies to selected non-matching lines</span><br><span class="hljs-comment">                     instead.   The  default  is  empty  (i.e., the terminal&#x27;s</span><br><span class="hljs-comment">                     default color pair).</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">              rv     Boolean value that reverses (swaps) the meanings  of  the</span><br><span class="hljs-comment">                     sl=  and cx= capabilities when the -v command-line option</span><br><span class="hljs-comment">                     is specified.  The default is false (i.e., the capability</span><br><span class="hljs-comment">                     is omitted).</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">              mt=01;31</span><br><span class="hljs-comment">                     SGR substring for matching non-empty text in any matching</span><br><span class="hljs-comment">                     line (i.e., a selected  line  when  the  -v  command-line</span><br><span class="hljs-comment">                     option   is  omitted,  or  a  context  line  when  -v  is</span><br><span class="hljs-comment">                     specified).  Setting this is equivalent to  setting  both</span><br><span class="hljs-comment">                     ms=  and mc= at once to the same value.  The default is a</span><br><span class="hljs-comment">                     bold  red  text  foreground   over   the   current   line</span><br><span class="hljs-comment">                     background.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">              ms=01;31</span><br><span class="hljs-comment">                     SGR  substring  for matching non-empty text in a selected</span><br><span class="hljs-comment">                     line.  (This is only used when the -v command-line option</span><br><span class="hljs-comment">                     is  omitted.)   The  effect  of  the  sl=  (or cx= if rv)</span><br><span class="hljs-comment">                     capability  remains  active  when  this  kicks  in.   The</span><br><span class="hljs-comment">                     default  is  a  bold red text foreground over the current</span><br><span class="hljs-comment">                     line background.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">              mc=01;31</span><br><span class="hljs-comment">                     SGR substring for matching non-empty text  in  a  context</span><br><span class="hljs-comment">                     line.  (This is only used when the -v command-line option</span><br><span class="hljs-comment">                     is specified.)  The effect of the  cx=  (or  sl=  if  rv)</span><br><span class="hljs-comment">                     capability  remains  active  when  this  kicks  in.   The</span><br><span class="hljs-comment">                     default is a bold red text foreground  over  the  current</span><br><span class="hljs-comment">                     line background.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">              fn=35  SGR  substring for file names prefixing any content line.</span><br><span class="hljs-comment">                     The  default  is  a  magenta  text  foreground  over  the</span><br><span class="hljs-comment">                     terminal&#x27;s default background.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">              ln=32  SGR  substring  for  line  numbers  prefixing any content</span><br><span class="hljs-comment">                     line.  The default is a green text  foreground  over  the</span><br><span class="hljs-comment">                     terminal&#x27;s default background.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">              bn=32  SGR  substring  for  byte  offsets  prefixing any content</span><br><span class="hljs-comment">                     line.  The default is a green text  foreground  over  the</span><br><span class="hljs-comment">                     terminal&#x27;s default background.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">              se=36  SGR  substring  for  separators that are inserted between</span><br><span class="hljs-comment">                     selected line fields (:), between  context  line  fields,</span><br><span class="hljs-comment">                     (-),  and  between  groups of adjacent lines when nonzero</span><br><span class="hljs-comment">                     context is specified (--).  The default is  a  cyan  text</span><br><span class="hljs-comment">                     foreground over the terminal&#x27;s default background.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">              ne     Boolean  value  that prevents clearing to the end of line</span><br><span class="hljs-comment">                     using Erase in Line (EL) to Right  (\33[K)  each  time  a</span><br><span class="hljs-comment">                     colorized  item  ends.   This  is  needed on terminals on</span><br><span class="hljs-comment">                     which EL is not supported.  It  is  otherwise  useful  on</span><br><span class="hljs-comment">                     terminals  for  which  the back_color_erase (bce) boolean</span><br><span class="hljs-comment">                     terminfo capability  does  not  apply,  when  the  chosen</span><br><span class="hljs-comment">                     highlight colors do not affect the background, or when EL</span><br><span class="hljs-comment">                     is too slow or causes too much flicker.  The  default  is</span><br><span class="hljs-comment">                     false (i.e., the capability is omitted).</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">              Note  that  boolean  capabilities  have no =...  part.  They are</span><br><span class="hljs-comment">              omitted (i.e., false) by default and become true when specified.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">              See  the  Select  Graphic  Rendition  (SGR)   section   in   the</span><br><span class="hljs-comment">              documentation  of  the  text terminal that is used for permitted</span><br><span class="hljs-comment">              values  and  their  meaning  as  character  attributes.    These</span><br><span class="hljs-comment">              substring  values are integers in decimal representation and can</span><br><span class="hljs-comment">              be concatenated with semicolons.  grep takes care of  assembling</span><br><span class="hljs-comment">              the  result  into  a  complete  SGR sequence (\33[...m).  Common</span><br><span class="hljs-comment">              values to concatenate include 1 for bold, 4 for underline, 5 for</span><br><span class="hljs-comment">              blink,  7 for inverse, 39 for default foreground color, 30 to 37</span><br><span class="hljs-comment">              for foreground colors, 90 to 97  for  16-color  mode  foreground</span><br><span class="hljs-comment">              colors,  38;5;0  to  38;5;255  for  88-color and 256-color modes</span><br><span class="hljs-comment">              foreground colors, 49 for default background color, 40 to 47 for</span><br><span class="hljs-comment">              background  colors,  100  to  107  for  16-color mode background</span><br><span class="hljs-comment">              colors, and 48;5;0 to 48;5;255 for 88-color and 256-color  modes</span><br><span class="hljs-comment">              background colors.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       LC_ALL, LC_COLLATE, LANG</span><br><span class="hljs-comment">              These  variables specify the locale for the LC_COLLATE category,</span><br><span class="hljs-comment">              which determines the collating sequence used to interpret  range</span><br><span class="hljs-comment">              expressions like [a-z].</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       LC_ALL, LC_CTYPE, LANG</span><br><span class="hljs-comment">              These  variables  specify  the locale for the LC_CTYPE category,</span><br><span class="hljs-comment">              which determines the type of characters, e.g., which  characters</span><br><span class="hljs-comment">              are whitespace.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       LC_ALL, LC_MESSAGES, LANG</span><br><span class="hljs-comment">              These variables specify the locale for the LC_MESSAGES category,</span><br><span class="hljs-comment">              which determines the language that grep uses for messages.   The</span><br><span class="hljs-comment">              default C locale uses American English messages.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       POSIXLY_CORRECT</span><br><span class="hljs-comment">              If  set, grep behaves as POSIX requires; otherwise, grep behaves</span><br><span class="hljs-comment">              more like other GNU programs.  POSIX requires that options  that</span><br><span class="hljs-comment">              follow  file  names  must  be treated as file names; by default,</span><br><span class="hljs-comment">              such options are permuted to the front of the operand  list  and</span><br><span class="hljs-comment">              are  treated as options.  Also, POSIX requires that unrecognized</span><br><span class="hljs-comment">              options be diagnosed as “illegal”, but since they are not really</span><br><span class="hljs-comment">              against  the  law  the default is to diagnose them as “invalid”.</span><br><span class="hljs-comment">              POSIXLY_CORRECT  also   disables   _N_GNU_nonoption_argv_flags_,</span><br><span class="hljs-comment">              described below.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       _N_GNU_nonoption_argv_flags_</span><br><span class="hljs-comment">              (Here  N is grep&#x27;s numeric process ID.)  If the ith character of</span><br><span class="hljs-comment">              this environment variable&#x27;s value is 1, do not consider the  ith</span><br><span class="hljs-comment">              operand  of  grep to be an option, even if it appears to be one.</span><br><span class="hljs-comment">              A shell can put  this  variable  in  the  environment  for  each</span><br><span class="hljs-comment">              command  it  runs,  specifying which operands are the results of</span><br><span class="hljs-comment">              file name wildcard expansion and therefore should not be treated</span><br><span class="hljs-comment">              as  options.   This  behavior  is  available only with the GNU C</span><br><span class="hljs-comment">              library, and only when POSIXLY_CORRECT is not set.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">EXIT STATUS</span><br><span class="hljs-comment">       Normally the exit status is 0 if a line is selected, 1 if no lines were</span><br><span class="hljs-comment">       selected, and 2 if an error occurred.  However, if the -q or --quiet or</span><br><span class="hljs-comment">       --silent is used and a line is selected, the exit status is 0  even  if</span><br><span class="hljs-comment">       an error occurred.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">COPYRIGHT</span><br><span class="hljs-comment">       Copyright 1998-2000, 2002, 2005-2016 Free Software Foundation, Inc.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       This is free software; see the source for copying conditions.  There is</span><br><span class="hljs-comment">       NO warranty; not even for MERCHANTABILITY or FITNESS FOR  A  PARTICULAR</span><br><span class="hljs-comment">       PURPOSE.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">BUGS</span><br><span class="hljs-comment">   Reporting Bugs</span><br><span class="hljs-comment">       Email bug reports to the bug-reporting address ⟨bug-grep@gnu.org⟩.  An</span><br><span class="hljs-comment">       email archive ⟨http://lists.gnu.org/mailman/listinfo/bug-grep⟩ and a</span><br><span class="hljs-comment">       bug tracker ⟨http://debbugs.gnu.org/cgi/pkgreport.cgi?package=grep⟩ are</span><br><span class="hljs-comment">       available.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   Known Bugs</span><br><span class="hljs-comment">       Large repetition counts in the &#123;n,m&#125;</span> construct may cause  grep  <span class="hljs-keyword">to</span>  use<br>       lots <span class="hljs-keyword">of</span> memory.  <span class="hljs-keyword">In</span> addition, certain other obscure regular expressions<br>       <span class="hljs-keyword">require</span> exponential time <span class="hljs-keyword">and</span> space, <span class="hljs-keyword">and</span> may cause grep <span class="hljs-keyword">to</span>  run  <span class="hljs-keyword">out</span>  <span class="hljs-keyword">of</span><br>       memory.<br><br>       Back-references are very slow, <span class="hljs-keyword">and</span> may <span class="hljs-keyword">require</span> exponential time.<br><br>SEE ALSO<br>   Regular Manual Pages<br>       awk(<span class="hljs-number">1</span>),  cmp(<span class="hljs-number">1</span>),  diff(<span class="hljs-number">1</span>),  find(<span class="hljs-number">1</span>), gzip(<span class="hljs-number">1</span>), perl(<span class="hljs-number">1</span>), sed(<span class="hljs-number">1</span>), sort(<span class="hljs-number">1</span>),<br>       xargs(<span class="hljs-number">1</span>), zgrep(<span class="hljs-number">1</span>), <span class="hljs-keyword">read</span>(<span class="hljs-number">2</span>),  pcre(<span class="hljs-number">3</span>),  pcresyntax(<span class="hljs-number">3</span>),  pcrepattern(<span class="hljs-number">3</span>),<br>       terminfo(<span class="hljs-number">5</span>), glob(<span class="hljs-number">7</span>), regex(<span class="hljs-number">7</span>).<br><br>   POSIX Programmer<span class="hljs-string">&#x27;s Manual Page</span><br><span class="hljs-string">       grep(1p).</span><br><span class="hljs-string"></span><br><span class="hljs-string">   Full Documentation</span><br><span class="hljs-string">       A   complete   manual   ⟨http://www.gnu.org/software/grep/manual/⟩   is</span><br><span class="hljs-string">       available.  If the info and grep programs  are  properly  installed  at</span><br><span class="hljs-string">       your site, the command</span><br><span class="hljs-string"></span><br><span class="hljs-string">              info grep</span><br><span class="hljs-string"></span><br><span class="hljs-string">       should give you access to the complete manual.</span><br><span class="hljs-string"></span><br><span class="hljs-string">NOTES</span><br><span class="hljs-string">       This  man  page  is maintained only fitfully; the full documentation is</span><br><span class="hljs-string">       often more up-to-date.</span><br><span class="hljs-string"></span><br><span class="hljs-string">User Commands                    GNU grep 2.25                         GREP(1)</span><br></code></pre></td></tr></table></figure><hr><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br><span class="line">1786</span><br><span class="line">1787</span><br><span class="line">1788</span><br><span class="line">1789</span><br><span class="line">1790</span><br><span class="line">1791</span><br><span class="line">1792</span><br><span class="line">1793</span><br><span class="line">1794</span><br><span class="line">1795</span><br><span class="line">1796</span><br><span class="line">1797</span><br><span class="line">1798</span><br><span class="line">1799</span><br><span class="line">1800</span><br><span class="line">1801</span><br><span class="line">1802</span><br><span class="line">1803</span><br><span class="line">1804</span><br><span class="line">1805</span><br><span class="line">1806</span><br><span class="line">1807</span><br><span class="line">1808</span><br><span class="line">1809</span><br><span class="line">1810</span><br><span class="line">1811</span><br><span class="line">1812</span><br><span class="line">1813</span><br><span class="line">1814</span><br><span class="line">1815</span><br><span class="line">1816</span><br><span class="line">1817</span><br><span class="line">1818</span><br><span class="line">1819</span><br><span class="line">1820</span><br><span class="line">1821</span><br><span class="line">1822</span><br><span class="line">1823</span><br><span class="line">1824</span><br><span class="line">1825</span><br><span class="line">1826</span><br><span class="line">1827</span><br><span class="line">1828</span><br><span class="line">1829</span><br><span class="line">1830</span><br><span class="line">1831</span><br><span class="line">1832</span><br><span class="line">1833</span><br><span class="line">1834</span><br><span class="line">1835</span><br><span class="line">1836</span><br><span class="line">1837</span><br><span class="line">1838</span><br><span class="line">1839</span><br><span class="line">1840</span><br><span class="line">1841</span><br><span class="line">1842</span><br><span class="line">1843</span><br><span class="line">1844</span><br><span class="line">1845</span><br><span class="line">1846</span><br><span class="line">1847</span><br><span class="line">1848</span><br><span class="line">1849</span><br><span class="line">1850</span><br><span class="line">1851</span><br><span class="line">1852</span><br><span class="line">1853</span><br><span class="line">1854</span><br><span class="line">1855</span><br><span class="line">1856</span><br><span class="line">1857</span><br><span class="line">1858</span><br><span class="line">1859</span><br><span class="line">1860</span><br><span class="line">1861</span><br><span class="line">1862</span><br><span class="line">1863</span><br><span class="line">1864</span><br><span class="line">1865</span><br><span class="line">1866</span><br><span class="line">1867</span><br><span class="line">1868</span><br><span class="line">1869</span><br><span class="line">1870</span><br><span class="line">1871</span><br><span class="line">1872</span><br><span class="line">1873</span><br><span class="line">1874</span><br><span class="line">1875</span><br><span class="line">1876</span><br><span class="line">1877</span><br><span class="line">1878</span><br><span class="line">1879</span><br><span class="line">1880</span><br><span class="line">1881</span><br><span class="line">1882</span><br><span class="line">1883</span><br><span class="line">1884</span><br><span class="line">1885</span><br><span class="line">1886</span><br><span class="line">1887</span><br><span class="line">1888</span><br><span class="line">1889</span><br><span class="line">1890</span><br><span class="line">1891</span><br><span class="line">1892</span><br><span class="line">1893</span><br><span class="line">1894</span><br><span class="line">1895</span><br><span class="line">1896</span><br><span class="line">1897</span><br><span class="line">1898</span><br><span class="line">1899</span><br><span class="line">1900</span><br><span class="line">1901</span><br><span class="line">1902</span><br><span class="line">1903</span><br><span class="line">1904</span><br><span class="line">1905</span><br><span class="line">1906</span><br><span class="line">1907</span><br><span class="line">1908</span><br><span class="line">1909</span><br><span class="line">1910</span><br><span class="line">1911</span><br><span class="line">1912</span><br><span class="line">1913</span><br><span class="line">1914</span><br><span class="line">1915</span><br><span class="line">1916</span><br><span class="line">1917</span><br><span class="line">1918</span><br><span class="line">1919</span><br><span class="line">1920</span><br><span class="line">1921</span><br><span class="line">1922</span><br><span class="line">1923</span><br><span class="line">1924</span><br><span class="line">1925</span><br><span class="line">1926</span><br><span class="line">1927</span><br><span class="line">1928</span><br><span class="line">1929</span><br><span class="line">1930</span><br><span class="line">1931</span><br><span class="line">1932</span><br><span class="line">1933</span><br><span class="line">1934</span><br><span class="line">1935</span><br><span class="line">1936</span><br><span class="line">1937</span><br><span class="line">1938</span><br><span class="line">1939</span><br><span class="line">1940</span><br><span class="line">1941</span><br><span class="line">1942</span><br><span class="line">1943</span><br><span class="line">1944</span><br><span class="line">1945</span><br><span class="line">1946</span><br><span class="line">1947</span><br><span class="line">1948</span><br><span class="line">1949</span><br><span class="line">1950</span><br><span class="line">1951</span><br><span class="line">1952</span><br><span class="line">1953</span><br><span class="line">1954</span><br><span class="line">1955</span><br><span class="line">1956</span><br><span class="line">1957</span><br><span class="line">1958</span><br><span class="line">1959</span><br><span class="line">1960</span><br><span class="line">1961</span><br><span class="line">1962</span><br><span class="line">1963</span><br><span class="line">1964</span><br><span class="line">1965</span><br><span class="line">1966</span><br><span class="line">1967</span><br><span class="line">1968</span><br><span class="line">1969</span><br><span class="line">1970</span><br><span class="line">1971</span><br><span class="line">1972</span><br><span class="line">1973</span><br><span class="line">1974</span><br><span class="line">1975</span><br><span class="line">1976</span><br><span class="line">1977</span><br><span class="line">1978</span><br><span class="line">1979</span><br><span class="line">1980</span><br><span class="line">1981</span><br><span class="line">1982</span><br><span class="line">1983</span><br><span class="line">1984</span><br><span class="line">1985</span><br><span class="line">1986</span><br><span class="line">1987</span><br><span class="line">1988</span><br><span class="line">1989</span><br><span class="line">1990</span><br><span class="line">1991</span><br><span class="line">1992</span><br><span class="line">1993</span><br><span class="line">1994</span><br><span class="line">1995</span><br><span class="line">1996</span><br><span class="line">1997</span><br><span class="line">1998</span><br><span class="line">1999</span><br><span class="line">2000</span><br><span class="line">2001</span><br><span class="line">2002</span><br><span class="line">2003</span><br><span class="line">2004</span><br><span class="line">2005</span><br><span class="line">2006</span><br><span class="line">2007</span><br><span class="line">2008</span><br><span class="line">2009</span><br><span class="line">2010</span><br><span class="line">2011</span><br><span class="line">2012</span><br><span class="line">2013</span><br><span class="line">2014</span><br><span class="line">2015</span><br><span class="line">2016</span><br><span class="line">2017</span><br><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br><span class="line">2021</span><br><span class="line">2022</span><br><span class="line">2023</span><br><span class="line">2024</span><br><span class="line">2025</span><br><span class="line">2026</span><br><span class="line">2027</span><br><span class="line">2028</span><br><span class="line">2029</span><br></pre></td><td class="code"><pre><code class="hljs stata">GAWK(1)                        Utility Commands                        GAWK(1)<br><br>NAME<br>       gawk - pattern scanning and processing language<br><br>SYNOPSIS<br>       gawk [ POSIX or GNU style options ] -f <span class="hljs-keyword">program</span>-<span class="hljs-keyword">file</span> [ -- ] <span class="hljs-keyword">file</span> ...<br>       gawk [ POSIX or GNU style options ] [ -- ] <span class="hljs-keyword">program</span>-text <span class="hljs-keyword">file</span> ...<br><br>DESCRIPTION<br>       Gawk  is  the  GNU Project&#x27;s implementation of the AWK programming lan‐<br>       guage.  It conforms to the definition of  the  language  <span class="hljs-keyword">in</span>  the  POSIX<br>       1003.1  Standard.   This <span class="hljs-keyword">version</span> <span class="hljs-keyword">in</span> turn is based <span class="hljs-keyword">on</span> the description <span class="hljs-keyword">in</span><br>       The AWK Programming Language, <span class="hljs-keyword">by</span> Aho, Kernighan, and Weinberger.   Gawk<br>       provides  the additional features found <span class="hljs-keyword">in</span> the current <span class="hljs-keyword">version</span> of Brian<br>       Kernighan&#x27;s awk and a number of GNU-specific extensions.<br><br>       The command <span class="hljs-keyword">line</span> consists of options to gawk itself,  the  AWK  <span class="hljs-keyword">program</span><br>       text  (<span class="hljs-keyword">if</span>  not supplied via the -f or --<span class="hljs-keyword">file</span> options), and values to be<br>       made available <span class="hljs-keyword">in</span> the ARGC and ARGV pre-defined AWK variables.<br><br>       When gawk is invoked with the --profile  option,  it  starts  gathering<br>       profiling statistics from the execution of the <span class="hljs-keyword">program</span>.  Gawk runs <span class="hljs-keyword">more</span><br>       slowly <span class="hljs-keyword">in</span> this mode, and automatically produces <span class="hljs-keyword">an</span> execution profile <span class="hljs-keyword">in</span><br>       the <span class="hljs-keyword">file</span> awkprof.<span class="hljs-keyword">out</span> when done.  See the --profile option, below.<br><br>       Gawk  also has <span class="hljs-keyword">an</span> integrated debugger. <span class="hljs-keyword">An</span> interactive debugging session<br>       can be started <span class="hljs-keyword">by</span> supplying the --debug option to the command <span class="hljs-keyword">line</span>.  <span class="hljs-keyword">In</span><br>       this mode of execution, gawk loads the AWK source code and then prompts<br>       <span class="hljs-keyword">for</span> debugging commands.  Gawk can only debug AWK  <span class="hljs-keyword">program</span>  source  <span class="hljs-keyword">pro</span>‐<br>       vided  with  the -f option.  The debugger is documented <span class="hljs-keyword">in</span> GAWK: Effec‐<br>       tive AWK Programming.<br><br>OPTION <span class="hljs-keyword">FORMAT</span><br>       Gawk options may be either traditional POSIX-style <span class="hljs-keyword">one</span> letter  options,<br>       or  GNU-style  long  options.   POSIX  options start with a single “-”,<br>       <span class="hljs-keyword">while</span> long options start with “--”.  Long options are provided <span class="hljs-keyword">for</span> both<br>       GNU-specific features and <span class="hljs-keyword">for</span> POSIX-mandated features.<br><br>       Gawk-specific  options  are  typically used <span class="hljs-keyword">in</span> long-option <span class="hljs-keyword">form</span>.  Argu‐<br>       ments to long options are either joined with the option <span class="hljs-keyword">by</span> <span class="hljs-keyword">an</span>  =  sign,<br>       with <span class="hljs-keyword">no</span> intervening spaces, or they may be provided <span class="hljs-keyword">in</span> the next command<br>       <span class="hljs-keyword">line</span> argument.  Long options may be abbreviated, <span class="hljs-keyword">as</span> long <span class="hljs-keyword">as</span> the  abbre‐<br>       viation remains unique.<br><br>       Additionally,  every  long  option has a corresponding short option, <span class="hljs-keyword">so</span><br>       that the option&#x27;s functionality may be used from within #!   executable<br>       scripts.<br><br>OPTIONS<br>       Gawk accepts the following options.  Standard options are listed first,<br>       followed <span class="hljs-keyword">by</span> options <span class="hljs-keyword">for</span> gawk extensions, listed alphabetically <span class="hljs-keyword">by</span> short<br>       option.<br><br>       -f <span class="hljs-keyword">program</span>-<span class="hljs-keyword">file</span><br>       --<span class="hljs-keyword">file</span> <span class="hljs-keyword">program</span>-<span class="hljs-keyword">file</span><br>              <span class="hljs-keyword">Read</span>  the AWK <span class="hljs-keyword">program</span> source from the <span class="hljs-keyword">file</span> <span class="hljs-keyword">program</span>-<span class="hljs-keyword">file</span>, instead<br>              of from the  first  command  <span class="hljs-keyword">line</span>  argument.   Multiple  -f  (or<br>              --<span class="hljs-keyword">file</span>) options may be used.<br><br>       -F fs<br>       --field-separator fs<br>              <span class="hljs-keyword">Use</span> fs <span class="hljs-keyword">for</span> the <span class="hljs-keyword">input</span> field separator (the value of the FS prede‐<br>              fined variable).<br><br>       -v <span class="hljs-keyword">var</span>=val<br>       --assign <span class="hljs-keyword">var</span>=val<br>              Assign the value val to the variable <span class="hljs-keyword">var</span>,  before  execution  of<br>              the  <span class="hljs-keyword">program</span>  begins.  Such variable values are available to the<br>              BEGIN rule of <span class="hljs-keyword">an</span> AWK <span class="hljs-keyword">program</span>.<br><br>       -b<br>       --characters-<span class="hljs-keyword">as</span>-bytes<br>              Treat all <span class="hljs-keyword">input</span> data <span class="hljs-keyword">as</span> single-byte characters. <span class="hljs-keyword">In</span> other  words,<br>              don&#x27;t  pay any attention to the locale information when attempt‐<br>              ing to process strings <span class="hljs-keyword">as</span>  multibyte  characters.   The  --posix<br>              option overrides this <span class="hljs-keyword">one</span>.<br><br>       -c<br>       --traditional<br>              <span class="hljs-keyword">Run</span>  <span class="hljs-keyword">in</span> compatibility mode.  <span class="hljs-keyword">In</span> compatibility mode, gawk behaves<br>              identically to Brian Kernighan&#x27;s awk; none of  the  GNU-specific<br>              extensions  are recognized.  See GNU EXTENSIONS, below, <span class="hljs-keyword">for</span> <span class="hljs-keyword">more</span><br>              information.<br><br>       -C<br>       --<span class="hljs-keyword">copyright</span><br>              <span class="hljs-keyword">Print</span> the short <span class="hljs-keyword">version</span> of the GNU <span class="hljs-keyword">copyright</span> information message<br>              <span class="hljs-keyword">on</span> the standard output and <span class="hljs-keyword">exit</span> successfully.<br><br>       -<span class="hljs-keyword">d</span>[<span class="hljs-keyword">file</span>]<br>       --dump-variables[=<span class="hljs-keyword">file</span>]<br>              <span class="hljs-keyword">Print</span>  a  sorted <span class="hljs-keyword">list</span> of <span class="hljs-keyword">global</span> variables, their types and final<br>              values to <span class="hljs-keyword">file</span>.  <span class="hljs-keyword">If</span> <span class="hljs-keyword">no</span> <span class="hljs-keyword">file</span> is provided, gawk uses a <span class="hljs-keyword">file</span>  named<br>              awkvars.<span class="hljs-keyword">out</span> <span class="hljs-keyword">in</span> the current directory.<br>              Having  a <span class="hljs-keyword">list</span> of all the <span class="hljs-keyword">global</span> variables is a good way to look<br>              <span class="hljs-keyword">for</span> typographical errors <span class="hljs-keyword">in</span> your programs.  You would  also  <span class="hljs-keyword">use</span><br>              this option <span class="hljs-keyword">if</span> you have a large <span class="hljs-keyword">program</span> with a lot of functions,<br>              and you want to be sure that your functions don&#x27;t  inadvertently<br>              <span class="hljs-keyword">use</span>  <span class="hljs-keyword">global</span>  variables  that  you meant to be <span class="hljs-keyword">local</span>.  (This is a<br>              particularly easy mistake to make  with  simple  variable  names<br>              like i, j, and <span class="hljs-keyword">so</span> <span class="hljs-keyword">on</span>.)<br><br>       -<span class="hljs-keyword">D</span>[<span class="hljs-keyword">file</span>]<br>       --debug[=<span class="hljs-keyword">file</span>]<br>              Enable  debugging  of  AWK  programs.   <span class="hljs-keyword">By</span> default, the debugger<br>              reads commands interactively from the keyboard (standard <span class="hljs-keyword">input</span>).<br>              The  optional <span class="hljs-keyword">file</span> argument specifies a <span class="hljs-keyword">file</span> with a <span class="hljs-keyword">list</span> of com‐<br>              mands <span class="hljs-keyword">for</span> the debugger to execute non-interactively.<br><br>       -<span class="hljs-keyword">e</span> <span class="hljs-keyword">program</span>-text<br>       --source <span class="hljs-keyword">program</span>-text<br>              <span class="hljs-keyword">Use</span> <span class="hljs-keyword">program</span>-text <span class="hljs-keyword">as</span> AWK <span class="hljs-keyword">program</span> source code.  This option allows<br>              the  easy  intermixing of library functions (used via the -f and<br>              --<span class="hljs-keyword">file</span> options) with source code entered <span class="hljs-keyword">on</span>  the  command  <span class="hljs-keyword">line</span>.<br>              It  is  intended primarily <span class="hljs-keyword">for</span> medium to large AWK programs used<br>              <span class="hljs-keyword">in</span> <span class="hljs-keyword">shell</span> scripts.<br><br>       -<span class="hljs-keyword">E</span> <span class="hljs-keyword">file</span><br>       --exec <span class="hljs-keyword">file</span><br>              Similar to -f, however, this is option  is  the  last  <span class="hljs-keyword">one</span>  <span class="hljs-keyword">pro</span>‐<br>              cessed.   This should be used with #!  scripts, particularly <span class="hljs-keyword">for</span><br>              CGI applications, to avoid passing <span class="hljs-keyword">in</span> options or source code (!)<br>              <span class="hljs-keyword">on</span>  the  command <span class="hljs-keyword">line</span> from a URL.  This option disables command-<br>              <span class="hljs-keyword">line</span> variable assignments.<br><br>       -<span class="hljs-keyword">g</span><br>       --<span class="hljs-keyword">gen</span>-pot<br>              Scan and <span class="hljs-keyword">parse</span> the AWK <span class="hljs-keyword">program</span>, and <span class="hljs-keyword">generate</span> a GNU .pot  (Porta‐<br>              ble Object Template) <span class="hljs-keyword">format</span> <span class="hljs-keyword">file</span> <span class="hljs-keyword">on</span> standard output with entries<br>              <span class="hljs-keyword">for</span> all localizable strings <span class="hljs-keyword">in</span> the <span class="hljs-keyword">program</span>.  The <span class="hljs-keyword">program</span>  itself<br>              is  not  executed.   See  the  GNU gettext distribution <span class="hljs-keyword">for</span> <span class="hljs-keyword">more</span><br>              information <span class="hljs-keyword">on</span> .pot files.<br><br>       -<span class="hljs-keyword">h</span><br>       --<span class="hljs-keyword">help</span> <span class="hljs-keyword">Print</span> a relatively short summary of the available options <span class="hljs-keyword">on</span> the<br>              standard  output.   (Per the GNU Coding Standards, these options<br>              cause <span class="hljs-keyword">an</span> immediate, successful <span class="hljs-keyword">exit</span>.)<br><br>       -i <span class="hljs-keyword">include</span>-<span class="hljs-keyword">file</span><br>       --<span class="hljs-keyword">include</span> <span class="hljs-keyword">include</span>-<span class="hljs-keyword">file</span><br>              Load <span class="hljs-keyword">an</span> awk source library.  This searches <span class="hljs-keyword">for</span> the library using<br>              the  AWKPATH environment variable.  <span class="hljs-keyword">If</span> the initial <span class="hljs-keyword">search</span> fails,<br>              another attempt will be made after appending  the  .awk  suffix.<br>              The  <span class="hljs-keyword">file</span>  will be loaded only once (i.<span class="hljs-keyword">e</span>., <span class="hljs-keyword">duplicates</span> are elimi‐<br>              nated), and the  code  does  not  constitute  the  main  <span class="hljs-keyword">program</span><br>              source.<br><br>       -<span class="hljs-keyword">l</span> lib<br>       --load lib<br>              Load  a shared library lib.  This searches <span class="hljs-keyword">for</span> the library using<br>              the AWKLIBPATH environment  variable.   <span class="hljs-keyword">If</span>  the  initial  <span class="hljs-keyword">search</span><br>              fails,  another attempt will be made after appending the default<br>              shared library suffix <span class="hljs-keyword">for</span> the platform.  The library initializa‐<br>              tion routine is expected to be named dl_load().<br><br>       -<span class="hljs-keyword">L</span> [value]<br>       --lint[=value]<br>              Provide warnings <span class="hljs-keyword">about</span> constructs that are dubious or non-porta‐<br>              ble to other AWK implementations.  With <span class="hljs-keyword">an</span> optional argument  of<br>              fatal,  lint warnings become fatal errors.  This may be drastic,<br>              but its <span class="hljs-keyword">use</span> will certainly encourage the development of  cleaner<br>              AWK  programs.  With <span class="hljs-keyword">an</span> optional argument of invalid, only warn‐<br>              ings <span class="hljs-keyword">about</span> things that are actually invalid are issued. (This is<br>              not fully implemented yet.)<br><br>       -<span class="hljs-keyword">M</span><br>       --bignum<br>              Force arbitrary precision arithmetic <span class="hljs-keyword">on</span> numbers. This option has<br>              <span class="hljs-keyword">no</span> effect <span class="hljs-keyword">if</span> gawk is not compiled to <span class="hljs-keyword">use</span> the  GNU  MPFR  and  MP<br>              libraries.<br><br>       -<span class="hljs-keyword">n</span><br>       --non-decimal-data<br>              Recognize  octal and hexadecimal values <span class="hljs-keyword">in</span> <span class="hljs-keyword">input</span> data.  <span class="hljs-keyword">Use</span> this<br>              option with great caution!<br><br>       -<span class="hljs-keyword">N</span><br>       --<span class="hljs-keyword">use</span>-lc-numeric<br>              This forces gawk to <span class="hljs-keyword">use</span> the  locale&#x27;s  decimal  point  character<br>              when  parsing  <span class="hljs-keyword">input</span> data.  Although the POSIX standard requires<br>              this behavior, and gawk does <span class="hljs-keyword">so</span> when --posix is <span class="hljs-keyword">in</span>  effect,  the<br>              default  is  to  follow traditional behavior and <span class="hljs-keyword">use</span> a period <span class="hljs-keyword">as</span><br>              the decimal point, even <span class="hljs-keyword">in</span> locales where the period is  not  the<br>              decimal  point  character.   This  option  overrides the default<br>              behavior, without the full draconian strictness of  the  --posix<br>              option.<br><br>       -o[<span class="hljs-keyword">file</span>]<br>       --pretty-<span class="hljs-keyword">print</span>[=<span class="hljs-keyword">file</span>]<br>              Output  a  pretty printed <span class="hljs-keyword">version</span> of the <span class="hljs-keyword">program</span> to <span class="hljs-keyword">file</span>.  <span class="hljs-keyword">If</span> <span class="hljs-keyword">no</span><br>              <span class="hljs-keyword">file</span> is provided, gawk uses a <span class="hljs-keyword">file</span> named awkprof.<span class="hljs-keyword">out</span> <span class="hljs-keyword">in</span> the cur‐<br>              rent directory.<br><br>       -O<br>       --optimize<br>              Enable  optimizations  upon  the  internal representation of the<br>              <span class="hljs-keyword">program</span>.  Currently, this includes simple constant-folding,  and<br>              tail  call  elimination  <span class="hljs-keyword">for</span> recursive functions. The gawk main‐<br>              tainer hopes to add additional optimizations over time.<br><br>       -p[prof-<span class="hljs-keyword">file</span>]<br>       --profile[=prof-<span class="hljs-keyword">file</span>]<br>              Start a profiling session, and send the profiling data to  prof-<br>              <span class="hljs-keyword">file</span>.   The default is awkprof.<span class="hljs-keyword">out</span>.  The profile contains execu‐<br>              tion counts of each statement <span class="hljs-keyword">in</span> the <span class="hljs-keyword">program</span> <span class="hljs-keyword">in</span> the left  margin<br>              and function call counts <span class="hljs-keyword">for</span> each user-defined function.<br><br>       -P<br>       --posix<br>              This  turns <span class="hljs-keyword">on</span> compatibility mode, with the following additional<br>              restrictions:<br><br>              · \x escape sequences are not recognized.<br><br>              · Only space and <span class="hljs-keyword">tab</span> act <span class="hljs-keyword">as</span> field separators when FS is <span class="hljs-keyword">set</span> to a<br>                single space, newline does not.<br><br>              · You cannot <span class="hljs-keyword">continue</span> lines after ?  and :.<br><br>              · The synonym func <span class="hljs-keyword">for</span> the keyword function is not recognized.<br><br>              · The operators ** and **= cannot be used <span class="hljs-keyword">in</span> place of ^ and ^=.<br><br>       -r<br>       --re-interval<br>              Enable  the  <span class="hljs-keyword">use</span>  of  interval expressions <span class="hljs-keyword">in</span> regular expression<br>              matching (see Regular Expressions, below).  Interval expressions<br>              were not traditionally available <span class="hljs-keyword">in</span> the AWK language.  The POSIX<br>              standard added them, to make awk and egrep consistent with  each<br>              other.  They are enabled <span class="hljs-keyword">by</span> default, but this option remains <span class="hljs-keyword">for</span><br>              <span class="hljs-keyword">use</span> with --traditional.<br><br>       -S<br>       --sandbox<br>              Runs gawk <span class="hljs-keyword">in</span> sandbox  mode,  disabling  the  system()  function,<br>              <span class="hljs-keyword">input</span>  redirection  with  getline, output redirection with <span class="hljs-keyword">print</span><br>              and printf, and loading dynamic extensions.   Command  execution<br>              (through pipelines) is also disabled.  This effectively blocks a<br>              script from accessing <span class="hljs-keyword">local</span>  resources  (except  <span class="hljs-keyword">for</span>  the  files<br>              specified <span class="hljs-keyword">on</span> the command <span class="hljs-keyword">line</span>).<br><br>       -t<br>       --lint-old<br>              Provide  warnings  <span class="hljs-keyword">about</span> constructs that are not portable to the<br>              original <span class="hljs-keyword">version</span> of UNIX awk.<br><br>       -V<br>       --<span class="hljs-keyword">version</span><br>              <span class="hljs-keyword">Print</span> <span class="hljs-keyword">version</span> information <span class="hljs-keyword">for</span> this particular <span class="hljs-keyword">copy</span>  of  gawk  <span class="hljs-keyword">on</span><br>              the  standard  output.  This is useful mainly <span class="hljs-keyword">for</span> knowing <span class="hljs-keyword">if</span> the<br>              current <span class="hljs-keyword">copy</span> of gawk <span class="hljs-keyword">on</span> your system is up to date  with  respect<br>              to  whatever the Free Software Foundation is distributing.  This<br>              is also useful when reporting bugs.  (Per the GNU  Coding  Stan‐<br>              dards, these options cause <span class="hljs-keyword">an</span> immediate, successful <span class="hljs-keyword">exit</span>.)<br><br>       --     Signal the end of options. This is useful to allow further argu‐<br>              ments to the AWK <span class="hljs-keyword">program</span> itself to start with a “-”.  This  <span class="hljs-keyword">pro</span>‐<br>              vides  consistency  with the argument parsing convention used <span class="hljs-keyword">by</span><br>              most other POSIX programs.<br><br>       <span class="hljs-keyword">In</span> compatibility mode, any other options are flagged  <span class="hljs-keyword">as</span>  invalid,  but<br>       are  otherwise  ignored.   <span class="hljs-keyword">In</span> normal operation, <span class="hljs-keyword">as</span> long <span class="hljs-keyword">as</span> <span class="hljs-keyword">program</span> text<br>       has been supplied, unknown options are passed <span class="hljs-keyword">on</span> to the AWK <span class="hljs-keyword">program</span>  <span class="hljs-keyword">in</span><br>       the ARGV array <span class="hljs-keyword">for</span> processing.  This is particularly useful <span class="hljs-keyword">for</span> running<br>       AWK programs via the “#!” executable interpreter mechanism.<br><br>       <span class="hljs-keyword">For</span> POSIX compatibility, the -W option may be  used,  followed  <span class="hljs-keyword">by</span>  the<br>       name of a long option.<br><br>AWK <span class="hljs-keyword">PROGRAM</span> EXECUTION<br>       <span class="hljs-keyword">An</span>  AWK <span class="hljs-keyword">program</span> consists of a sequence of pattern-action statements and<br>       optional function definitions.<br><br>              @<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;filename&quot;</span><br>              @load <span class="hljs-string">&quot;filename&quot;</span><br>              pattern   &#123; action statements &#125;<br>              function name(parameter <span class="hljs-keyword">list</span>) &#123; statements &#125;<br><br>       Gawk first reads the <span class="hljs-keyword">program</span> source from the <span class="hljs-keyword">program</span>-<span class="hljs-keyword">file</span>(s) <span class="hljs-keyword">if</span>  speci‐<br>       fied, from arguments to --source, or from the first non-option argument<br>       <span class="hljs-keyword">on</span> the command <span class="hljs-keyword">line</span>.  The -f and --source options may be used  multiple<br>       times  <span class="hljs-keyword">on</span>  the command <span class="hljs-keyword">line</span>.  Gawk reads the <span class="hljs-keyword">program</span> text <span class="hljs-keyword">as</span> <span class="hljs-keyword">if</span> all the<br>       <span class="hljs-keyword">program</span>-files and command  <span class="hljs-keyword">line</span>  source  texts  had  been  concatenated<br>       together.   This  is  useful  <span class="hljs-keyword">for</span>  building libraries of AWK functions,<br>       without having to <span class="hljs-keyword">include</span> them <span class="hljs-keyword">in</span> each new AWK <span class="hljs-keyword">program</span> that uses  them.<br>       It also provides the ability to mix library functions with command <span class="hljs-keyword">line</span><br>       programs.<br><br>       <span class="hljs-keyword">In</span> addition, lines beginning with @<span class="hljs-keyword">include</span> may be used to <span class="hljs-keyword">include</span> other<br>       source  files  into your <span class="hljs-keyword">program</span>, making library <span class="hljs-keyword">use</span> even easier.  This<br>       is equivalent to using the -i option.<br><br>       Lines beginning with @load may be used to load  shared  libraries  into<br>       your <span class="hljs-keyword">program</span>.  This is equivalent to using the -<span class="hljs-keyword">l</span> option.<br><br>       The  environment  variable  AWKPATH specifies a <span class="hljs-keyword">search</span> path to <span class="hljs-keyword">use</span> when<br>       finding source files named with the -f and -i options.  <span class="hljs-keyword">If</span>  this  vari‐<br>       able  does  not  exist,  the  default path is <span class="hljs-string">&quot;.:/usr/local/share/awk&quot;</span>.<br>       (The actual directory may vary, depending upon how gawk was  built  and<br>       installed.)  <span class="hljs-keyword">If</span> a <span class="hljs-keyword">file</span> name given to the -f option contains a “/” <span class="hljs-keyword">char</span>‐<br>       acter, <span class="hljs-keyword">no</span> path <span class="hljs-keyword">search</span> is performed.<br><br>       The environment variable AWKLIBPATH specifies a <span class="hljs-keyword">search</span> path to <span class="hljs-keyword">use</span> when<br>       finding  source  files named with the -<span class="hljs-keyword">l</span> option.  <span class="hljs-keyword">If</span> this variable does<br>       not exist, the default  path  is  <span class="hljs-string">&quot;/usr/local/lib/gawk&quot;</span>.   (The  actual<br>       directory may vary, depending upon how gawk was built and installed.)<br><br>       Gawk executes AWK programs <span class="hljs-keyword">in</span> the following <span class="hljs-keyword">order</span>.  First, all variable<br>       assignments specified via the -v option are performed.  Next, gawk com‐<br>       piles  the <span class="hljs-keyword">program</span> into <span class="hljs-keyword">an</span> internal <span class="hljs-keyword">form</span>.  Then, gawk executes the code<br>       <span class="hljs-keyword">in</span> the BEGIN rule(s) (<span class="hljs-keyword">if</span> any), and then  proceeds  to  <span class="hljs-keyword">read</span>  each  <span class="hljs-keyword">file</span><br>       named  <span class="hljs-keyword">in</span>  the  ARGV  array  (up to ARGV[ARGC]).  <span class="hljs-keyword">If</span> there are <span class="hljs-keyword">no</span> files<br>       named <span class="hljs-keyword">on</span> the command <span class="hljs-keyword">line</span>, gawk reads the standard <span class="hljs-keyword">input</span>.<br><br>       <span class="hljs-keyword">If</span> a filename <span class="hljs-keyword">on</span> the command <span class="hljs-keyword">line</span> has the <span class="hljs-keyword">form</span> <span class="hljs-keyword">var</span>=val it is treated <span class="hljs-keyword">as</span><br>       a  variable  assignment.   The  variable <span class="hljs-keyword">var</span> will be assigned the value<br>       val.  (This happens after any BEGIN rule(s) have  been  <span class="hljs-keyword">run</span>.)   Command<br>       <span class="hljs-keyword">line</span>  variable assignment is most useful <span class="hljs-keyword">for</span> dynamically assigning val‐<br>       ues to the variables AWK uses to  control  how  <span class="hljs-keyword">input</span>  is  broken  into<br>       fields  and records.  It is also useful <span class="hljs-keyword">for</span> controlling state <span class="hljs-keyword">if</span> multi‐<br>       ple passes are needed over a single data <span class="hljs-keyword">file</span>.<br><br>       <span class="hljs-keyword">If</span> the value of a particular element of ARGV is empty (<span class="hljs-string">&quot;&quot;</span>), gawk  skips<br>       over it.<br><br>       <span class="hljs-keyword">For</span>  each  <span class="hljs-keyword">input</span>  <span class="hljs-keyword">file</span>,  <span class="hljs-keyword">if</span>  a BEGINFILE rule exists, gawk executes the<br>       associated code before processing the contents of the <span class="hljs-keyword">file</span>.  Similarly,<br>       gawk  executes  the  code  associated with ENDFILE after processing the<br>       <span class="hljs-keyword">file</span>.<br><br>       <span class="hljs-keyword">For</span> each record <span class="hljs-keyword">in</span> the <span class="hljs-keyword">input</span>, gawk tests to see <span class="hljs-keyword">if</span> it matches any  pat‐<br>       tern  <span class="hljs-keyword">in</span>  the  AWK  <span class="hljs-keyword">program</span>.  <span class="hljs-keyword">For</span> each pattern that the record matches,<br>       gawk executes the associated action.  The patterns are  tested  <span class="hljs-keyword">in</span>  the<br>       <span class="hljs-keyword">order</span> they occur <span class="hljs-keyword">in</span> the <span class="hljs-keyword">program</span>.<br><br>       Finally,  after  all  the <span class="hljs-keyword">input</span> is exhausted, gawk executes the code <span class="hljs-keyword">in</span><br>       the END rule(s) (<span class="hljs-keyword">if</span> any).<br><br>   Command <span class="hljs-keyword">Line</span> Directories<br>       According to POSIX, files named <span class="hljs-keyword">on</span> the awk command <span class="hljs-keyword">line</span>  must  be  text<br>       files.   The  behavior is `<span class="hljs-symbol">`undefined&#x27;</span>&#x27; <span class="hljs-keyword">if</span> they are not.  Most versions<br>       of awk treat a directory <span class="hljs-keyword">on</span> the command <span class="hljs-keyword">line</span> <span class="hljs-keyword">as</span> a fatal <span class="hljs-keyword">error</span>.<br><br>       Starting with <span class="hljs-keyword">version</span> 4.0 of gawk, a directory <span class="hljs-keyword">on</span> the command <span class="hljs-keyword">line</span> <span class="hljs-keyword">pro</span>‐<br>       duces a warning, but is otherwise skipped.  <span class="hljs-keyword">If</span> either of the --posix or<br>       --traditional options is given, then gawk reverts to treating  directo‐<br>       ries <span class="hljs-keyword">on</span> the command <span class="hljs-keyword">line</span> <span class="hljs-keyword">as</span> a fatal <span class="hljs-keyword">error</span>.<br><br>VARIABLES, RECORDS AND FIELDS<br>       AWK variables are dynamic; they come into existence when they are first<br>       used.  Their values are either floating-point numbers  or  strings,  or<br>       both,  depending  upon how they are used.  AWK also has <span class="hljs-keyword">one</span> dimensional<br>       arrays; arrays with multiple dimensions may be  simulated.   Gawk  <span class="hljs-keyword">pro</span>‐<br>       vides  true  arrays  of arrays; see Arrays, below.  Several pre-defined<br>       variables are <span class="hljs-keyword">set</span> <span class="hljs-keyword">as</span> a <span class="hljs-keyword">program</span> runs; these are described <span class="hljs-keyword">as</span> needed  and<br>       summarized below.<br><br>   Records<br>       Normally, records are separated <span class="hljs-keyword">by</span> newline characters.  You can control<br>       how records are separated <span class="hljs-keyword">by</span> assigning values to the built-<span class="hljs-keyword">in</span>  variable<br>       RS.   <span class="hljs-keyword">If</span>  RS is any single character, that character separates records.<br>       Otherwise, RS is a regular expression.  Text <span class="hljs-keyword">in</span> the <span class="hljs-keyword">input</span> that  matches<br>       this  regular expression separates the record.  However, <span class="hljs-keyword">in</span> compatibil‐<br>       ity mode, only the first character of its string value is used <span class="hljs-keyword">for</span> sep‐<br>       arating  records.   <span class="hljs-keyword">If</span>  RS  is <span class="hljs-keyword">set</span> to the null string, then records are<br>       separated <span class="hljs-keyword">by</span> blank lines.  When RS is <span class="hljs-keyword">set</span> to the null string, the  new‐<br>       <span class="hljs-keyword">line</span>  character  always acts <span class="hljs-keyword">as</span> a field separator, <span class="hljs-keyword">in</span> addition to what‐<br>       ever value FS may have.<br><br>   Fields<br>       <span class="hljs-keyword">As</span> each <span class="hljs-keyword">input</span> record is <span class="hljs-keyword">read</span>, gawk splits the record into fields, using<br>       the value of the FS variable <span class="hljs-keyword">as</span> the field separator.  <span class="hljs-keyword">If</span> FS is a single<br>       character, fields are separated <span class="hljs-keyword">by</span> that character.  <span class="hljs-keyword">If</span> FS is  the  null<br>       string,  then each individual character becomes a <span class="hljs-keyword">separate</span> field.  Oth‐<br>       erwise, FS is expected to be a full regular expression.  <span class="hljs-keyword">In</span> the special<br>       case  that FS is a single space, fields are separated <span class="hljs-keyword">by</span> runs of spaces<br>       and/or tabs and/or newlines.  (But see the section POSIX COMPATIBILITY,<br>       below).   <span class="hljs-keyword">NOTE</span>:  The  value  of IGNORECASE (see below) also affects how<br>       fields are <span class="hljs-keyword">split</span> when FS is a regular expression, and how  records  are<br>       separated when RS is a regular expression.<br><br>       <span class="hljs-keyword">If</span>  the  FIELDWIDTHS  variable is <span class="hljs-keyword">set</span> to a space separated <span class="hljs-keyword">list</span> of num‐<br>       bers, each field is expected to have fixed width, and  gawk  splits  up<br>       the  record  using  the  specified widths.  The value of FS is ignored.<br>       Assigning a new value to FS or FPAT overrides the <span class="hljs-keyword">use</span> of FIELDWIDTHS.<br><br>       Similarly, <span class="hljs-keyword">if</span> the FPAT variable is <span class="hljs-keyword">set</span> to a string representing a regu‐<br>       lar expression, each field is made up of text that matches that regular<br>       expression. <span class="hljs-keyword">In</span> this case, the regular expression describes  the  fields<br>       themselves, instead of the text that separates the fields.  Assigning a<br>       new value to FS or FIELDWIDTHS overrides the <span class="hljs-keyword">use</span> of FPAT.<br><br>       Each field <span class="hljs-keyword">in</span> the <span class="hljs-keyword">input</span> record may be referenced <span class="hljs-keyword">by</span> its  position:  <span class="hljs-variable">$1</span>,<br>       <span class="hljs-variable">$2</span>,  and <span class="hljs-keyword">so</span> <span class="hljs-keyword">on</span>.  <span class="hljs-variable">$0</span> is the whole record.  Fields need not be referenced<br>       <span class="hljs-keyword">by</span> constants:<br><br>              <span class="hljs-keyword">n</span> = 5<br>              <span class="hljs-keyword">print</span> <span class="hljs-variable">$n</span><br><br>       prints the fifth field <span class="hljs-keyword">in</span> the <span class="hljs-keyword">input</span> record.<br><br>       The variable NF is <span class="hljs-keyword">set</span> to the <span class="hljs-keyword">total</span>  number  of  fields  <span class="hljs-keyword">in</span>  the  <span class="hljs-keyword">input</span><br>       record.<br><br>       References  to non-existent fields (i.<span class="hljs-keyword">e</span>., fields after <span class="hljs-variable">$NF</span>) produce the<br>       null-string.  However, assigning to a non-existent field (<span class="hljs-keyword">e</span>.<span class="hljs-keyword">g</span>., $(NF+2)<br>       = 5) increases the value of NF, creates any intervening fields with the<br>       null string <span class="hljs-keyword">as</span> their values, and causes the value of <span class="hljs-variable">$0</span>  to  be  recom‐<br>       puted, with the fields being separated <span class="hljs-keyword">by</span> the value of OFS.  References<br>       to negative numbered fields  cause  a  fatal  <span class="hljs-keyword">error</span>.   Decrementing  NF<br>       causes  the  values  of  fields  past the new value to be lost, and the<br>       value of <span class="hljs-variable">$0</span> to be recomputed, with the fields being  separated  <span class="hljs-keyword">by</span>  the<br>       value of OFS.<br><br>       Assigning  a  value  to <span class="hljs-keyword">an</span> existing field causes the whole record to be<br>       rebuilt when <span class="hljs-variable">$0</span> is referenced.  Similarly,  assigning  a  value  to  <span class="hljs-variable">$0</span><br>       causes the record to be resplit, creating new values <span class="hljs-keyword">for</span> the fields.<br><br>   Built-<span class="hljs-keyword">in</span> Variables<br>       Gawk&#x27;s built-<span class="hljs-keyword">in</span> variables are:<br><br>       ARGC        The  number  of  command  <span class="hljs-keyword">line</span>  arguments (does not <span class="hljs-keyword">include</span><br>                   options to gawk, or the <span class="hljs-keyword">program</span> source).<br><br>       ARGIND      The index <span class="hljs-keyword">in</span> ARGV of the current <span class="hljs-keyword">file</span> being processed.<br><br>       ARGV        Array of command <span class="hljs-keyword">line</span> arguments.  The array is indexed from<br>                   0  to  ARGC - 1.  Dynamically changing the contents of ARGV<br>                   can control the files used <span class="hljs-keyword">for</span> data.<br><br>       BINMODE     <span class="hljs-keyword">On</span> non-POSIX systems, specifies <span class="hljs-keyword">use</span> of  “binary”  mode  <span class="hljs-keyword">for</span><br>                   all  <span class="hljs-keyword">file</span>  I/O.  Numeric values of 1, 2, or 3, specify that<br>                   <span class="hljs-keyword">input</span> files, output  files,  or  all  files,  respectively,<br>                   should  <span class="hljs-keyword">use</span> binary I/O.  String values of <span class="hljs-string">&quot;r&quot;</span>, or <span class="hljs-string">&quot;w&quot;</span> spec‐<br>                   ify that <span class="hljs-keyword">input</span> files, or output files, respectively, should<br>                   <span class="hljs-keyword">use</span> binary I/O.  String values of <span class="hljs-string">&quot;rw&quot;</span> or <span class="hljs-string">&quot;wr&quot;</span> specify that<br>                   all files should <span class="hljs-keyword">use</span> binary I/O.  Any other string value is<br>                   treated <span class="hljs-keyword">as</span> <span class="hljs-string">&quot;rw&quot;</span>, but generates a warning message.<br><br>       CONVFMT     The conversion <span class="hljs-keyword">format</span> <span class="hljs-keyword">for</span> numbers, <span class="hljs-string">&quot;%.6g&quot;</span>, <span class="hljs-keyword">by</span> default.<br><br>       ENVIRON     <span class="hljs-keyword">An</span>  array containing the values of the current environment.<br>                   The array is indexed <span class="hljs-keyword">by</span>  the  environment  variables,  each<br>                   element  being  the  value  of  that  variable (<span class="hljs-keyword">e</span>.<span class="hljs-keyword">g</span>., ENVI‐<br>                   RON[<span class="hljs-string">&quot;HOME&quot;</span>] might be <span class="hljs-string">&quot;/home/arnold&quot;</span>).  Changing this  array<br>                   does not affect the environment seen <span class="hljs-keyword">by</span> programs <span class="hljs-keyword">which</span> gawk<br>                   spawns via redirection or the system() function.<br><br>       ERRNO       <span class="hljs-keyword">If</span> a system <span class="hljs-keyword">error</span> occurs either  doing  a  redirection  <span class="hljs-keyword">for</span><br>                   getline,  during  a  <span class="hljs-keyword">read</span> <span class="hljs-keyword">for</span> getline, or during a <span class="hljs-keyword">close</span>(),<br>                   then ERRNO will contain a string describing the <span class="hljs-keyword">error</span>.  The<br>                   value is subject to translation <span class="hljs-keyword">in</span> non-English locales.<br><br>       FIELDWIDTHS A  whitespace  separated  <span class="hljs-keyword">list</span>  of field widths.  When <span class="hljs-keyword">set</span>,<br>                   gawk parses the <span class="hljs-keyword">input</span> into fields of fixed  width,  instead<br>                   of  using the value of the FS variable <span class="hljs-keyword">as</span> the field separa‐<br>                   tor.  See Fields, above.<br><br>       FILENAME    The name of the current <span class="hljs-keyword">input</span> <span class="hljs-keyword">file</span>.  <span class="hljs-keyword">If</span> <span class="hljs-keyword">no</span> files are speci‐<br>                   fied  <span class="hljs-keyword">on</span>  the  command  <span class="hljs-keyword">line</span>, the value of FILENAME is “-”.<br>                   However,  FILENAME  is  undefined  inside  the  BEGIN  rule<br>                   (unless <span class="hljs-keyword">set</span> <span class="hljs-keyword">by</span> getline).<br><br>       FNR         The <span class="hljs-keyword">input</span> record number <span class="hljs-keyword">in</span> the current <span class="hljs-keyword">input</span> <span class="hljs-keyword">file</span>.<br><br>       FPAT        A  regular expression describing the contents of the fields<br>                   <span class="hljs-keyword">in</span> a record.  When <span class="hljs-keyword">set</span>, gawk parses the <span class="hljs-keyword">input</span> into  fields,<br>                   where  the  fields match the regular expression, instead of<br>                   using the value of the FS variable <span class="hljs-keyword">as</span> the field  separator.<br>                   See Fields, above.<br><br>       FS          The <span class="hljs-keyword">input</span> field separator, a space <span class="hljs-keyword">by</span> default.  See Fields,<br>                   above.<br><br>       FUNCTAB     <span class="hljs-keyword">An</span> array whose indices and  corresponding  values  are  the<br>                   names of all the user-defined or extension functions <span class="hljs-keyword">in</span> the<br>                   <span class="hljs-keyword">program</span>.  <span class="hljs-keyword">NOTE</span>: You may not <span class="hljs-keyword">use</span> the delete  statement  with<br>                   the FUNCTAB array.<br><br>       IGNORECASE  Controls the case-sensitivity of all regular expression and<br>                   string operations.  <span class="hljs-keyword">If</span> IGNORECASE  has  a  non-zero  value,<br>                   then  string  comparisons  and  pattern  matching <span class="hljs-keyword">in</span> rules,<br>                   field splitting with FS and FPAT,  record  separating  with<br>                   RS, regular expression matching with ~ and !~, and the <span class="hljs-keyword">gen</span>‐<br>                   sub(), gsub(), <span class="hljs-built_in">index</span>(), <span class="hljs-built_in">match</span>(), patsplit(),  <span class="hljs-keyword">split</span>(),  and<br>                   sub() built-<span class="hljs-keyword">in</span> functions all ignore case when doing regular<br>                   expression operations.  <span class="hljs-keyword">NOTE</span>:  Array  subscripting  is  not<br>                   affected.   However, the asort() and asorti() functions are<br>                   affected.<br>                   Thus, <span class="hljs-keyword">if</span> IGNORECASE is not equal to zero, /aB/ matches  all<br>                   of the strings <span class="hljs-string">&quot;ab&quot;</span>, <span class="hljs-string">&quot;aB&quot;</span>, <span class="hljs-string">&quot;Ab&quot;</span>, and <span class="hljs-string">&quot;AB&quot;</span>.  <span class="hljs-keyword">As</span> with all AWK<br>                   variables, the initial value of IGNORECASE is zero, <span class="hljs-keyword">so</span>  all<br>                   regular expression and string operations are normally case-<br>                   sensitive.<br><br>       LINT        Provides dynamic control of the --lint option  from  within<br>                   <span class="hljs-keyword">an</span> AWK <span class="hljs-keyword">program</span>.  When true, gawk prints lint warnings. When<br>                   false,  it  does  not.   When  assigned  the  string  value<br>                   <span class="hljs-string">&quot;fatal&quot;</span>,  lint  warnings  become fatal errors, exactly like<br>                   --lint=fatal.  Any other true value just prints warnings.<br><br>       NF          The number of fields <span class="hljs-keyword">in</span> the current <span class="hljs-keyword">input</span> record.<br><br>       NR          The <span class="hljs-keyword">total</span> number of <span class="hljs-keyword">input</span> records seen <span class="hljs-keyword">so</span> far.<br><br>       OFMT        The output <span class="hljs-keyword">format</span> <span class="hljs-keyword">for</span> numbers, <span class="hljs-string">&quot;%.6g&quot;</span>, <span class="hljs-keyword">by</span> default.<br><br>       OFS         The output field separator, a space <span class="hljs-keyword">by</span> default.<br><br>       ORS         The output record separator, <span class="hljs-keyword">by</span> default a newline.<br><br>       PREC        The working precision of arbitrary precision floating-point<br>                   numbers, 53 <span class="hljs-keyword">by</span> default.<br><br>       PROCINFO    The  elements  of  this array provide access to information<br>                   <span class="hljs-keyword">about</span> the running AWK <span class="hljs-keyword">program</span>.  <span class="hljs-keyword">On</span> some systems, there  may<br>                   be  elements  <span class="hljs-keyword">in</span>  the  array, <span class="hljs-string">&quot;group1&quot;</span> through <span class="hljs-string">&quot;groupn&quot;</span> <span class="hljs-keyword">for</span><br>                   some <span class="hljs-keyword">n</span>, <span class="hljs-keyword">which</span> is the number of  supplementary  groups  that<br>                   the  process  has.   <span class="hljs-keyword">Use</span>  the <span class="hljs-keyword">in</span> operator to <span class="hljs-keyword">test</span> <span class="hljs-keyword">for</span> these<br>                   elements.  The following  elements  are  guaranteed  to  be<br>                   available:<br><br>                   PROCINFO[<span class="hljs-string">&quot;egid&quot;</span>]    The  value  of  the  getegid(2)  system<br>                                       call.<br><br>                   PROCINFO[<span class="hljs-string">&quot;strftime&quot;</span>]<br>                                       The  default  time  <span class="hljs-keyword">format</span>  string  <span class="hljs-keyword">for</span><br>                                       strftime().<br><br>                   PROCINFO[<span class="hljs-string">&quot;euid&quot;</span>]    The  value  of  the  geteuid(2)  system<br>                                       call.<br><br>                   PROCINFO[<span class="hljs-string">&quot;FS&quot;</span>]      <span class="hljs-string">&quot;FS&quot;</span> <span class="hljs-keyword">if</span> field splitting with FS  is  <span class="hljs-keyword">in</span><br>                                       effect,  <span class="hljs-string">&quot;FPAT&quot;</span> <span class="hljs-keyword">if</span> field splitting with<br>                                       FPAT is <span class="hljs-keyword">in</span> effect, or <span class="hljs-string">&quot;FIELDWIDTHS&quot;</span>  <span class="hljs-keyword">if</span><br>                                       field  splitting with FIELDWIDTHS is <span class="hljs-keyword">in</span><br>                                       effect.<br><br>                   PROCINFO[<span class="hljs-string">&quot;identifiers&quot;</span>]<br>                                       A subarray, indexed <span class="hljs-keyword">by</span> the names of all<br>                                       identifiers used <span class="hljs-keyword">in</span> the text of the AWK<br>                                       <span class="hljs-keyword">program</span>.  The values indicate what gawk<br>                                       knows  <span class="hljs-keyword">about</span>  the  identifiers after it<br>                                       has finished parsing the <span class="hljs-keyword">program</span>;  they<br>                                       are not updated <span class="hljs-keyword">while</span> the <span class="hljs-keyword">program</span> runs.<br>                                       <span class="hljs-keyword">For</span> each identifier, the value  of  the<br>                                       element is <span class="hljs-keyword">one</span> of the following:<br><br>                                       <span class="hljs-string">&quot;array&quot;</span><br>                                              The identifier is <span class="hljs-keyword">an</span> array.<br><br>                                       <span class="hljs-string">&quot;builtin&quot;</span><br>                                              The  identifier  is  a  built-<span class="hljs-keyword">in</span><br>                                              function.<br><br>                                       <span class="hljs-string">&quot;extension&quot;</span><br>                                              The identifier is  <span class="hljs-keyword">an</span>  extension<br>                                              function loaded via @load or -<span class="hljs-keyword">l</span>.<br><br>                                       <span class="hljs-string">&quot;scalar&quot;</span><br>                                              The identifier is a <span class="hljs-keyword">scalar</span>.<br><br>                                       <span class="hljs-string">&quot;untyped&quot;</span><br>                                              The identifier is untyped (could<br>                                              be used <span class="hljs-keyword">as</span> a  <span class="hljs-keyword">scalar</span>  or  array,<br>                                              gawk doesn&#x27;t know yet).<br><br>                                       <span class="hljs-string">&quot;user&quot;</span> The identifier is a user-defined<br>                                              function.<br><br>                   PROCINFO[<span class="hljs-string">&quot;gid&quot;</span>]     The value of the getgid(2) system call.<br><br>                   PROCINFO[<span class="hljs-string">&quot;pgrpid&quot;</span>]  The process group  ID  of  the  current<br>                                       process.<br><br>                   PROCINFO[<span class="hljs-string">&quot;pid&quot;</span>]     The process ID of the current process.<br><br>                   PROCINFO[<span class="hljs-string">&quot;ppid&quot;</span>]    The  parent  process  ID of the current<br>                                       process.<br><br>                   PROCINFO[<span class="hljs-string">&quot;uid&quot;</span>]     The value of the getuid(2) system call.<br><br>                   PROCINFO[<span class="hljs-string">&quot;sorted_in&quot;</span>]<br>                                       <span class="hljs-keyword">If</span> this  element  exists  <span class="hljs-keyword">in</span>  PROCINFO,<br>                                       then  its  value  controls the <span class="hljs-keyword">order</span> <span class="hljs-keyword">in</span><br>                                       <span class="hljs-keyword">which</span> array elements are  traversed  <span class="hljs-keyword">in</span><br>                                       <span class="hljs-keyword">for</span>   loops.    Supported   values  are<br>                                       <span class="hljs-string">&quot;@ind_str_asc&quot;</span>,         <span class="hljs-string">&quot;@ind_num_asc&quot;</span>,<br>                                       <span class="hljs-string">&quot;@val_type_asc&quot;</span>,        <span class="hljs-string">&quot;@val_str_asc&quot;</span>,<br>                                       <span class="hljs-string">&quot;@val_num_asc&quot;</span>,        <span class="hljs-string">&quot;@ind_str_desc&quot;</span>,<br>                                       <span class="hljs-string">&quot;@ind_num_desc&quot;</span>,      <span class="hljs-string">&quot;@val_type_desc&quot;</span>,<br>                                       <span class="hljs-string">&quot;@val_str_desc&quot;</span>,  <span class="hljs-string">&quot;@val_num_desc&quot;</span>,  and<br>                                       <span class="hljs-string">&quot;@unsorted&quot;</span>.  The value can also be the<br>                                       name of any comparison function defined<br>                                       <span class="hljs-keyword">as</span> follows:<br><br>                                            function cmp_func(i1, v1, i2, v2)<br><br>                                       where i1 and i2 are the indices, and v1<br>                                       and v2 are the corresponding values  of<br>                                       the  <span class="hljs-keyword">two</span>  elements  being compared.  It<br>                                       should <span class="hljs-keyword">return</span> a number less than, equal<br>                                       to, or greater than 0, depending <span class="hljs-keyword">on</span> how<br>                                       the elements of the  array  are  to  be<br>                                       ordered.<br><br>                   PROCINFO[<span class="hljs-string">&quot;input&quot;</span>, <span class="hljs-string">&quot;READ_TIMEOUT&quot;</span>]<br>                                       The timeout <span class="hljs-keyword">in</span> milliseconds <span class="hljs-keyword">for</span> reading<br>                                       data from <span class="hljs-keyword">input</span>, where <span class="hljs-keyword">input</span> is a redi‐<br>                                       rection  string  or a filename. A value<br>                                       of zero or  less  than  zero  <span class="hljs-keyword">means</span>  <span class="hljs-keyword">no</span><br>                                       timeout.<br><br>                   PROCINFO[<span class="hljs-string">&quot;mpfr_version&quot;</span>]<br>                                       The  <span class="hljs-keyword">version</span>  of  the  GNU MPFR library<br>                                       used  <span class="hljs-keyword">for</span>  arbitrary  precision  number<br>                                       support  <span class="hljs-keyword">in</span>  gawk.   This  entry is not<br>                                       present <span class="hljs-keyword">if</span> MPFR support is not compiled<br>                                       into gawk.<br><br>                   PROCINFO[<span class="hljs-string">&quot;gmp_version&quot;</span>]<br>                                       The  <span class="hljs-keyword">version</span> of the GNU MP library used<br>                                       <span class="hljs-keyword">for</span> arbitrary precision number  support<br>                                       <span class="hljs-keyword">in</span>  gawk.  This entry is not present <span class="hljs-keyword">if</span><br>                                       MPFR support is not compiled into gawk.<br><br>                   PROCINFO[<span class="hljs-string">&quot;prec_max&quot;</span>]<br>                                       The maximum precision supported <span class="hljs-keyword">by</span>  the<br>                                       GNU  MPFR  library <span class="hljs-keyword">for</span> arbitrary preci‐<br>                                       sion  floating-point   numbers.    This<br>                                       entry is not present <span class="hljs-keyword">if</span> MPFR support is<br>                                       not compiled into gawk.<br><br>                   PROCINFO[<span class="hljs-string">&quot;prec_min&quot;</span>]<br>                                       The minimum precision  allowed  <span class="hljs-keyword">by</span>  the<br>                                       GNU  MPFR  library <span class="hljs-keyword">for</span> arbitrary preci‐<br>                                       sion  floating-point   numbers.    This<br>                                       entry is not present <span class="hljs-keyword">if</span> MPFR support is<br>                                       not compiled into gawk.<br><br>                   PROCINFO[<span class="hljs-string">&quot;api_major&quot;</span>]<br>                                       The major <span class="hljs-keyword">version</span> of the extension API.<br>                                       This  entry  is  not present <span class="hljs-keyword">if</span> loading<br>                                       dynamic extensions is not available.<br><br>                   PROCINFO[<span class="hljs-string">&quot;api_minor&quot;</span>]<br>                                       The minor <span class="hljs-keyword">version</span> of the extension API.<br>                                       This  entry  is  not present <span class="hljs-keyword">if</span> loading<br>                                       dynamic extensions is not available.<br><br>                   PROCINFO[<span class="hljs-string">&quot;version&quot;</span>] the <span class="hljs-keyword">version</span> of gawk.<br><br>       ROUNDMODE   The rounding mode to <span class="hljs-keyword">use</span> <span class="hljs-keyword">for</span> arbitrary precision arithmetic<br>                   <span class="hljs-keyword">on</span> numbers, <span class="hljs-keyword">by</span> default <span class="hljs-string">&quot;N&quot;</span> (IEEE-754 roundTiesToEven mode).<br>                   The accepted values are <span class="hljs-string">&quot;N&quot;</span> or <span class="hljs-string">&quot;n&quot;</span> <span class="hljs-keyword">for</span> roundTiesToEven, <span class="hljs-string">&quot;U&quot;</span><br>                   or <span class="hljs-string">&quot;u&quot;</span> <span class="hljs-keyword">for</span> roundTowardPositive, <span class="hljs-string">&quot;D&quot;</span> or <span class="hljs-string">&quot;d&quot;</span> <span class="hljs-keyword">for</span> roundToward‐<br>                   Negative, <span class="hljs-string">&quot;Z&quot;</span> or <span class="hljs-string">&quot;z&quot;</span> <span class="hljs-keyword">for</span> roundTowardZero, and <span class="hljs-keyword">if</span> your  ver‐<br>                   sion  of  GNU  MPFR  library  supports  it,  <span class="hljs-string">&quot;A&quot;</span> or <span class="hljs-string">&quot;a&quot;</span> <span class="hljs-keyword">for</span><br>                   roundTiesToAway.<br><br>       RS          The <span class="hljs-keyword">input</span> record separator, <span class="hljs-keyword">by</span> default a newline.<br><br>       RT          The record terminator.  Gawk sets RT to the <span class="hljs-keyword">input</span> text that<br>                   matched  the  character  or regular expression specified <span class="hljs-keyword">by</span><br>                   RS.<br><br>       RSTART      The index of the first character matched <span class="hljs-keyword">by</span> <span class="hljs-built_in">match</span>();  0  <span class="hljs-keyword">if</span><br>                   <span class="hljs-keyword">no</span>  match.   (This  implies that character indices start at<br>                   <span class="hljs-keyword">one</span>.)<br><br>       RLENGTH     The length of the string  matched  <span class="hljs-keyword">by</span>  <span class="hljs-built_in">match</span>();  -1  <span class="hljs-keyword">if</span>  <span class="hljs-keyword">no</span><br>                   match.<br><br>       SUBSEP      The character used to <span class="hljs-keyword">separate</span> multiple subscripts <span class="hljs-keyword">in</span> array<br>                   elements, <span class="hljs-keyword">by</span> default <span class="hljs-string">&quot;\034&quot;</span>.<br><br>       SYMTAB      <span class="hljs-keyword">An</span> array whose indices  are  the  names  of  all  currently<br>                   defined  <span class="hljs-keyword">global</span>  variables  and arrays <span class="hljs-keyword">in</span> the <span class="hljs-keyword">program</span>.  The<br>                   array may be used <span class="hljs-keyword">for</span> indirect access to <span class="hljs-keyword">read</span> or write  the<br>                   value of a variable:<br><br>                        foo = 5<br>                        SYMTAB[<span class="hljs-string">&quot;foo&quot;</span>] = 4<br>                        <span class="hljs-keyword">print</span> foo    # prints 4<br><br>                   The isarray() function may be used to <span class="hljs-keyword">test</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">an</span> element <span class="hljs-keyword">in</span><br>                   SYMTAB is <span class="hljs-keyword">an</span> array.  You may not <span class="hljs-keyword">use</span> the  delete  statement<br>                   with the SYMTAB array.<br><br>       TEXTDOMAIN  The text domain of the AWK <span class="hljs-keyword">program</span>; used to find the <span class="hljs-keyword">local</span>‐<br>                   ized translations <span class="hljs-keyword">for</span> the <span class="hljs-keyword">program</span>&#x27;s strings.<br><br>   Arrays<br>       Arrays are subscripted with <span class="hljs-keyword">an</span> expression between  square  brackets  ([<br>       and ]).  <span class="hljs-keyword">If</span> the expression is <span class="hljs-keyword">an</span> expression <span class="hljs-keyword">list</span> (expr, expr ...)  then<br>       the array subscript is a string consisting of the concatenation of  the<br>       (string) value of each expression, separated <span class="hljs-keyword">by</span> the value of the SUBSEP<br>       variable.  This facility  is  used  to  <span class="hljs-keyword">simulate</span>  multiply  dimensioned<br>       arrays.  <span class="hljs-keyword">For</span> example:<br><br>              i = <span class="hljs-string">&quot;A&quot;</span>; j = <span class="hljs-string">&quot;B&quot;</span>; k = <span class="hljs-string">&quot;C&quot;</span><br>              x[i, j, k] = <span class="hljs-string">&quot;hello, world\n&quot;</span><br><br>       assigns the string <span class="hljs-string">&quot;hello, world\n&quot;</span> to the element of the array x <span class="hljs-keyword">which</span><br>       is indexed <span class="hljs-keyword">by</span> the string <span class="hljs-string">&quot;A\034B\034C&quot;</span>.  All arrays <span class="hljs-keyword">in</span> AWK are associa‐<br>       tive, i.<span class="hljs-keyword">e</span>., indexed <span class="hljs-keyword">by</span> string values.<br><br>       The  special  operator  <span class="hljs-keyword">in</span> may be used to <span class="hljs-keyword">test</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">an</span> array has <span class="hljs-keyword">an</span> index<br>       consisting of a particular value:<br><br>              <span class="hljs-keyword">if</span> (val <span class="hljs-keyword">in</span> array)<br>                   <span class="hljs-keyword">print</span> array[val]<br><br>       <span class="hljs-keyword">If</span> the array has multiple subscripts, <span class="hljs-keyword">use</span> (i, j) <span class="hljs-keyword">in</span> array.<br><br>       The <span class="hljs-keyword">in</span> construct may also be used <span class="hljs-keyword">in</span> a <span class="hljs-keyword">for</span> loop to iterate over all the<br>       elements  of  <span class="hljs-keyword">an</span>  array.   However,  the (i, j) <span class="hljs-keyword">in</span> array construct only<br>       works <span class="hljs-keyword">in</span> tests, not <span class="hljs-keyword">in</span> <span class="hljs-keyword">for</span> loops.<br><br>       <span class="hljs-keyword">An</span> element may be deleted from <span class="hljs-keyword">an</span> array  using  the  delete  statement.<br>       The  delete statement may also be used to delete the entire contents of<br>       <span class="hljs-keyword">an</span> array, just <span class="hljs-keyword">by</span> specifying the array name without a subscript.<br><br>       gawk supports true multidimensional arrays. It does  not  require  that<br>       such arrays be `<span class="hljs-symbol">`rectangular&#x27;</span>&#x27; <span class="hljs-keyword">as</span> <span class="hljs-keyword">in</span> C or C++.  <span class="hljs-keyword">For</span> example:<br><br>              a[1] = 5<br>              a[2][1] = 6<br>              a[2][2] = 7<br><br>       <span class="hljs-keyword">NOTE</span>:  You may need to tell gawk that <span class="hljs-keyword">an</span> array element is really a sub‐<br>       array <span class="hljs-keyword">in</span> <span class="hljs-keyword">order</span> to <span class="hljs-keyword">use</span> it where gawk expects <span class="hljs-keyword">an</span> array (such  <span class="hljs-keyword">as</span>  <span class="hljs-keyword">in</span>  the<br>       second argument to <span class="hljs-keyword">split</span>()).  You can <span class="hljs-keyword">do</span> this <span class="hljs-keyword">by</span> creating <span class="hljs-keyword">an</span> element <span class="hljs-keyword">in</span><br>       the subarray and then deleting it with the delete statement.<br><br>   Variable Typing And Conversion<br>       Variables and fields may be (floating point) numbers,  or  strings,  or<br>       both.  How the value of a variable is interpreted depends upon its con‐<br>       text.  <span class="hljs-keyword">If</span> used <span class="hljs-keyword">in</span> a numeric expression, it will be treated <span class="hljs-keyword">as</span> a number;<br>       <span class="hljs-keyword">if</span> used <span class="hljs-keyword">as</span> a string it will be treated <span class="hljs-keyword">as</span> a string.<br><br>       To force a variable to be treated <span class="hljs-keyword">as</span> a number, add 0 to it; to force it<br>       to be treated <span class="hljs-keyword">as</span> a string, concatenate it with the null string.<br><br>       Uninitialized variables have the numeric value 0 and the  string  value<br>       <span class="hljs-string">&quot;&quot;</span> (the null, or empty, string).<br><br>       When  a  string must be converted to a number, the conversion is accom‐<br>       plished using strtod(3).  A number is converted to a  string  <span class="hljs-keyword">by</span>  using<br>       the  value  of  CONVFMT  <span class="hljs-keyword">as</span>  a  <span class="hljs-keyword">format</span>  string <span class="hljs-keyword">for</span> sprintf(3), with the<br>       numeric value of the variable <span class="hljs-keyword">as</span> the argument.   However,  even  though<br>       all  numbers <span class="hljs-keyword">in</span> AWK are floating-point, integral values are always con‐<br>       verted <span class="hljs-keyword">as</span> integers.  Thus, given<br><br>              CONVFMT = <span class="hljs-string">&quot;%2.2f&quot;</span><br>              a = 12<br>              b = a <span class="hljs-string">&quot;&quot;</span><br><br>       the variable b has a string value of <span class="hljs-string">&quot;12&quot;</span> and not <span class="hljs-string">&quot;12.00&quot;</span>.<br><br>       <span class="hljs-keyword">NOTE</span>: When operating <span class="hljs-keyword">in</span> POSIX mode (such <span class="hljs-keyword">as</span> with the  --posix  option),<br>       beware  that locale settings may interfere with the way decimal numbers<br>       are treated: the decimal separator of the numbers you  are  feeding  to<br>       gawk  must  conform to what your locale would expect, be it a comma (,)<br>       or a period (.).<br><br>       Gawk performs comparisons <span class="hljs-keyword">as</span> follows: <span class="hljs-keyword">If</span>  <span class="hljs-keyword">two</span>  variables  are  numeric,<br>       they  are  compared numerically.  <span class="hljs-keyword">If</span> <span class="hljs-keyword">one</span> value is numeric and the other<br>       has a string value that is a “numeric  string,”  then  comparisons  are<br>       also  done numerically.  Otherwise, the numeric value is converted to a<br>       string and a string comparison is performed.  <span class="hljs-keyword">Two</span> strings are compared,<br>       of course, <span class="hljs-keyword">as</span> strings.<br><br>       <span class="hljs-keyword">Note</span> that string constants, such <span class="hljs-keyword">as</span> <span class="hljs-string">&quot;57&quot;</span>, are not numeric strings, they<br>       are string constants.  The idea of “numeric  string”  only  applies  to<br>       fields,  getline  <span class="hljs-keyword">input</span>,  FILENAME, ARGV elements, ENVIRON elements and<br>       the elements of <span class="hljs-keyword">an</span> array created <span class="hljs-keyword">by</span>  <span class="hljs-keyword">split</span>()  or  patsplit()  that  are<br>       numeric  strings.   The  basic  idea  is that user <span class="hljs-keyword">input</span>, and only user<br>       <span class="hljs-keyword">input</span>, that looks numeric, should be treated that way.<br><br>   Octal and Hexadecimal Constants<br>       You may <span class="hljs-keyword">use</span> C-style octal and hexadecimal constants <span class="hljs-keyword">in</span> your AWK <span class="hljs-keyword">program</span><br>       source  code.   <span class="hljs-keyword">For</span> example, the octal value 011 is equal to decimal 9,<br>       and the hexadecimal value 0x11 is equal to decimal 17.<br><br>   String Constants<br>       String constants <span class="hljs-keyword">in</span> AWK are sequences of  characters  enclosed  between<br>       double quotes (like <span class="hljs-string">&quot;value&quot;</span>).  Within strings, certain escape sequences<br>       are recognized, <span class="hljs-keyword">as</span> <span class="hljs-keyword">in</span> C.  These are:<br><br>       \\   A literal backslash.<br><br>       \a   The “alert” character; usually the ASCII BEL character.<br><br>       \b   Backspace.<br><br>       \f   <span class="hljs-keyword">Form</span>-feed.<br><br>       \<span class="hljs-keyword">n</span>   Newline.<br><br>       \r   Carriage <span class="hljs-keyword">return</span>.<br><br>       \t   Horizontal <span class="hljs-keyword">tab</span>.<br><br>       \v   Vertical <span class="hljs-keyword">tab</span>.<br><br>       \xhex digits<br>            The character represented <span class="hljs-keyword">by</span> the string of hexadecimal digits fol‐<br>            lowing  the \x.  <span class="hljs-keyword">As</span> <span class="hljs-keyword">in</span> ISO C, all following hexadecimal digits are<br>            considered part of the escape sequence.  (This feature should tell<br>            <span class="hljs-keyword">us</span> something <span class="hljs-keyword">about</span> language design <span class="hljs-keyword">by</span> committee.)  <span class="hljs-keyword">E</span>.<span class="hljs-keyword">g</span>., <span class="hljs-string">&quot;\x1B&quot;</span> is<br>            the ASCII ESC (escape) character.<br><br>       \ddd The character represented <span class="hljs-keyword">by</span> the 1-, 2-, or  3-digit  sequence  of<br>            octal digits.  <span class="hljs-keyword">E</span>.<span class="hljs-keyword">g</span>., <span class="hljs-string">&quot;\033&quot;</span> is the ASCII ESC (escape) character.<br><br>       \c   The literal character c.<br><br>       The  escape  sequences may also be used inside constant regular expres‐<br>       sions (<span class="hljs-keyword">e</span>.<span class="hljs-keyword">g</span>., /[ \t\f\<span class="hljs-keyword">n</span>\r\v]/ matches whitespace characters).<br><br>       <span class="hljs-keyword">In</span> compatibility mode, the characters represented <span class="hljs-keyword">by</span> octal and hexadec‐<br>       imal  escape  sequences  are  treated  literally  when  used <span class="hljs-keyword">in</span> regular<br>       expression constants.  Thus, /a\52b/ is equivalent to /a\*b/.<br><br>PATTERNS AND ACTIONS<br>       AWK is a <span class="hljs-keyword">line</span>-oriented language.  The pattern comes first, and then the<br>       action.  Action statements are enclosed <span class="hljs-keyword">in</span> &#123; and &#125;.  Either the pattern<br>       may be missing, or the action may be missing, but, of course, not both.<br>       <span class="hljs-keyword">If</span>  the  pattern  is  missing,  the action is executed <span class="hljs-keyword">for</span> every single<br>       record of <span class="hljs-keyword">input</span>.  A missing action is equivalent to<br><br>              &#123; <span class="hljs-keyword">print</span> &#125;<br><br>       <span class="hljs-keyword">which</span> prints the entire record.<br><br>       Comments begin with the # character, and <span class="hljs-keyword">continue</span> until the end of  the<br>       <span class="hljs-keyword">line</span>.   Blank  lines  may  be used to <span class="hljs-keyword">separate</span> statements.  Normally, a<br>       statement ends with a newline, however, this is not the case <span class="hljs-keyword">for</span>  lines<br>       ending <span class="hljs-keyword">in</span> a comma, &#123;, ?, :, &amp;&amp;, or ||.  Lines ending <span class="hljs-keyword">in</span> <span class="hljs-keyword">do</span> or <span class="hljs-keyword">else</span> also<br>       have their statements automatically continued <span class="hljs-keyword">on</span>  the  following  <span class="hljs-keyword">line</span>.<br>       <span class="hljs-keyword">In</span>  other  cases,  a  <span class="hljs-keyword">line</span> can be continued <span class="hljs-keyword">by</span> ending it with a “\”, <span class="hljs-keyword">in</span><br>       <span class="hljs-keyword">which</span> case the newline is ignored.<br><br>       Multiple statements may be put <span class="hljs-keyword">on</span> <span class="hljs-keyword">one</span> <span class="hljs-keyword">line</span> <span class="hljs-keyword">by</span> separating  them  with  a<br>       “;”.   This  applies to both the statements within the action part of a<br>       pattern-action pair (the usual case), and to the pattern-action  state‐<br>       ments themselves.<br><br>   Patterns<br>       AWK patterns may be <span class="hljs-keyword">one</span> of the following:<br><br>              BEGIN<br>              END<br>              BEGINFILE<br>              ENDFILE<br>              /regular expression/<br>              relational expression<br>              pattern &amp;&amp; pattern<br>              pattern || pattern<br>              pattern ? pattern : pattern<br>              (pattern)<br>              ! pattern<br>              pattern1, pattern2<br><br>       BEGIN  and  END  are <span class="hljs-keyword">two</span> special kinds of patterns <span class="hljs-keyword">which</span> are not tested<br>       against the <span class="hljs-keyword">input</span>.  The action parts of all BEGIN patterns  are  merged<br>       <span class="hljs-keyword">as</span> <span class="hljs-keyword">if</span> all the statements had been written <span class="hljs-keyword">in</span> a single BEGIN rule.  They<br>       are executed before any of the <span class="hljs-keyword">input</span> is <span class="hljs-keyword">read</span>.  Similarly, all  the  END<br>       rules are merged, and executed when all the <span class="hljs-keyword">input</span> is exhausted (or when<br>       <span class="hljs-keyword">an</span> <span class="hljs-keyword">exit</span> statement is executed).  BEGIN and END patterns cannot be  com‐<br>       bined  with  other patterns <span class="hljs-keyword">in</span> pattern expressions.  BEGIN and END pat‐<br>       terns cannot have missing action parts.<br><br>       BEGINFILE and ENDFILE are additional special patterns whose bodies  are<br>       executed  before  reading  the  first record of each command <span class="hljs-keyword">line</span> <span class="hljs-keyword">input</span><br>       <span class="hljs-keyword">file</span> and after reading the last record of each <span class="hljs-keyword">file</span>.  Inside the BEGIN‐<br>       <span class="hljs-keyword">FILE</span>  rule, the value of ERRNO will be the empty string <span class="hljs-keyword">if</span> the <span class="hljs-keyword">file</span> was<br>       opened successfully.  Otherwise, there is some problem  with  the  <span class="hljs-keyword">file</span><br>       and  the code should <span class="hljs-keyword">use</span> nextfile to skip it. <span class="hljs-keyword">If</span> that is not done, gawk<br>       produces its usual fatal <span class="hljs-keyword">error</span> <span class="hljs-keyword">for</span> files that cannot be opened.<br><br>       <span class="hljs-keyword">For</span> /regular expression/ patterns, the associated statement is executed<br>       <span class="hljs-keyword">for</span>  each  <span class="hljs-keyword">input</span>  record  that matches the regular expression.  Regular<br>       expressions are the same <span class="hljs-keyword">as</span>  those  <span class="hljs-keyword">in</span>  egrep(1),  and  are  summarized<br>       below.<br><br>       A  relational  expression may <span class="hljs-keyword">use</span> any of the operators defined below <span class="hljs-keyword">in</span><br>       the section <span class="hljs-keyword">on</span> actions.  These generally <span class="hljs-keyword">test</span>  whether  certain  fields<br>       match certain regular expressions.<br><br>       The  &amp;&amp;,  ||, and !  operators are logical AND, logical OR, and logical<br>       NOT, respectively, <span class="hljs-keyword">as</span> <span class="hljs-keyword">in</span> C.  They <span class="hljs-keyword">do</span> short-circuit evaluation, also  <span class="hljs-keyword">as</span><br>       <span class="hljs-keyword">in</span>  C,  and  are used <span class="hljs-keyword">for</span> combining <span class="hljs-keyword">more</span> primitive pattern expressions.<br>       <span class="hljs-keyword">As</span> <span class="hljs-keyword">in</span> most languages, parentheses may be used to change  the  <span class="hljs-keyword">order</span>  of<br>       evaluation.<br><br>       The  ?:  operator is like the same operator <span class="hljs-keyword">in</span> C.  <span class="hljs-keyword">If</span> the first pattern<br>       is true then the pattern used <span class="hljs-keyword">for</span> testing is the second pattern, other‐<br>       wise  it  is  the  third.  Only <span class="hljs-keyword">one</span> of the second and third patterns is<br>       evaluated.<br><br>       The pattern1, pattern2 <span class="hljs-keyword">form</span> of <span class="hljs-keyword">an</span> expression is called a <span class="hljs-keyword">range</span> pattern.<br>       It  matches  all <span class="hljs-keyword">input</span> records starting with a record that matches pat‐<br>       tern1, and continuing until a record that matches pattern2,  inclusive.<br>       It does not combine with any other <span class="hljs-keyword">sort</span> of pattern expression.<br><br>   Regular Expressions<br>       Regular  expressions  are  the  extended kind found <span class="hljs-keyword">in</span> egrep.  They are<br>       composed of characters <span class="hljs-keyword">as</span> follows:<br><br>       c          Matches the non-metacharacter c.<br><br>       \c         Matches the literal character c.<br><br>       .          Matches any character including newline.<br><br>       ^          Matches the beginning of a string.<br><br>       $          Matches the end of a string.<br><br>       [abc...]   A character <span class="hljs-keyword">list</span>: matches any of the characters abc....  You<br>                  may  <span class="hljs-keyword">include</span> a <span class="hljs-keyword">range</span> of characters <span class="hljs-keyword">by</span> separating them with a<br>                  dash.<br><br>       [^abc...]  A negated  character  <span class="hljs-keyword">list</span>:  matches  any  character  except<br>                  abc....<br><br>       r1|r2      Alternation: matches either r1 or r2.<br><br>       r1r2       Concatenation: matches r1, and then r2.<br><br>       r+         Matches <span class="hljs-keyword">one</span> or <span class="hljs-keyword">more</span> r&#x27;s.<br><br>       r*         Matches zero or <span class="hljs-keyword">more</span> r&#x27;s.<br><br>       r?         Matches zero or <span class="hljs-keyword">one</span> r&#x27;s.<br><br>       (r)        Grouping: matches r.<br><br>       r&#123;<span class="hljs-keyword">n</span>&#125;<br>       r&#123;<span class="hljs-keyword">n</span>,&#125;<br>       r&#123;<span class="hljs-keyword">n</span>,<span class="hljs-keyword">m</span>&#125;     <span class="hljs-keyword">One</span>  or <span class="hljs-keyword">two</span> numbers inside braces denote <span class="hljs-keyword">an</span> interval expres‐<br>                  sion.  <span class="hljs-keyword">If</span> there is <span class="hljs-keyword">one</span> number <span class="hljs-keyword">in</span> the braces,  the  preceding<br>                  regular  expression r is repeated <span class="hljs-keyword">n</span> times.  <span class="hljs-keyword">If</span> there are <span class="hljs-keyword">two</span><br>                  numbers separated <span class="hljs-keyword">by</span> a comma, r is repeated <span class="hljs-keyword">n</span>  to  <span class="hljs-keyword">m</span>  times.<br>                  <span class="hljs-keyword">If</span>  there  is  <span class="hljs-keyword">one</span>  number  followed  <span class="hljs-keyword">by</span>  a comma, then r is<br>                  repeated at least <span class="hljs-keyword">n</span> times.<br><br>       \y         Matches the empty string at either the beginning or the  end<br>                  of a word.<br><br>       \B         Matches the empty string within a word.<br><br>       \&lt;         Matches the empty string at the beginning of a word.<br><br>       \&gt;         Matches the empty string at the end of a word.<br><br>       \s         Matches any whitespace character.<br><br>       \S         Matches any nonwhitespace character.<br><br>       \w         Matches  any  word-constituent  character (letter, digit, or<br>                  underscore).<br><br>       \W         Matches any character that is not word-constituent.<br><br>       \`         Matches the empty  string  at  the  beginning  of  a  buffer<br>                  (string).<br><br>       \&#x27;         Matches the empty string at the end of a buffer.<br><br>       The  escape  sequences  that  are valid <span class="hljs-keyword">in</span> string constants (see String<br>       Constants) are also valid <span class="hljs-keyword">in</span> regular expressions.<br><br>       Character classes are a feature introduced <span class="hljs-keyword">in</span> the  POSIX  standard.   A<br>       character  <span class="hljs-keyword">class</span>  is a special notation <span class="hljs-keyword">for</span> describing lists of charac‐<br>       ters that have a specific attribute, but where  the  actual  characters<br>       themselves  can  vary from country to country and/or from character <span class="hljs-keyword">set</span><br>       to character <span class="hljs-keyword">set</span>.  <span class="hljs-keyword">For</span> example, the notion of  what  is  <span class="hljs-keyword">an</span>  alphabetic<br>       character differs <span class="hljs-keyword">in</span> the USA and <span class="hljs-keyword">in</span> France.<br><br>       A  character  <span class="hljs-keyword">class</span>  is  only  valid <span class="hljs-keyword">in</span> a regular expression inside the<br>       brackets of a character <span class="hljs-keyword">list</span>.  Character classes consist of [:, a  key‐<br>       word  denoting the <span class="hljs-keyword">class</span>, and :].  The character classes defined <span class="hljs-keyword">by</span> the<br>       POSIX standard are:<br><br>       [:alnum:]  Alphanumeric characters.<br><br>       [:<span class="hljs-keyword">alpha</span>:]  Alphabetic characters.<br><br>       [:blank:]  Space or <span class="hljs-keyword">tab</span> characters.<br><br>       [:cntrl:]  Control characters.<br><br>       [:digit:]  Numeric characters.<br><br>       [:<span class="hljs-keyword">graph</span>:]  Characters that are both printable and visible.  (A space is<br>                  printable, but not visible, <span class="hljs-keyword">while</span> <span class="hljs-keyword">an</span> a is both.)<br><br>       [:lower:]  Lowercase alphabetic characters.<br><br>       [:<span class="hljs-keyword">print</span>:]  Printable  characters (characters that are not control <span class="hljs-keyword">char</span>‐<br>                  acters.)<br><br>       [:punct:]  Punctuation characters (characters that are not letter, dig‐<br>                  its, control characters, or space characters).<br><br>       [:space:]  Space  characters (such <span class="hljs-keyword">as</span> space, <span class="hljs-keyword">tab</span>, and formfeed, to name<br>                  a few).<br><br>       [:upper:]  Uppercase alphabetic characters.<br><br>       [:xdigit:] Characters that are hexadecimal digits.<br><br>       <span class="hljs-keyword">For</span> example, before the POSIX standard, to match  alphanumeric  charac‐<br>       ters, you would have had to write /[A-Za-z0-9]/.  <span class="hljs-keyword">If</span> your character <span class="hljs-keyword">set</span><br>       had other alphabetic characters <span class="hljs-keyword">in</span> it, this would not match  them,  and<br>       <span class="hljs-keyword">if</span>  your  character <span class="hljs-keyword">set</span> collated differently from ASCII, this might not<br>       even match the ASCII alphanumeric characters.  With the POSIX character<br>       classes,  you  can write /[[:alnum:]]/, and this matches the alphabetic<br>       and numeric characters <span class="hljs-keyword">in</span> your character <span class="hljs-keyword">set</span>, <span class="hljs-keyword">no</span> matter what it is.<br><br>       <span class="hljs-keyword">Two</span> additional special sequences can appear <span class="hljs-keyword">in</span> character lists.   These<br>       apply  to  non-ASCII  character  sets,  <span class="hljs-keyword">which</span>  can  have single symbols<br>       (called collating elements) that are represented  with  <span class="hljs-keyword">more</span>  than  <span class="hljs-keyword">one</span><br>       character,  <span class="hljs-keyword">as</span>  well <span class="hljs-keyword">as</span> several characters that are equivalent <span class="hljs-keyword">for</span> col‐<br>       lating, or sorting, purposes.  (<span class="hljs-keyword">E</span>.<span class="hljs-keyword">g</span>., <span class="hljs-keyword">in</span> French,  a  plain  “<span class="hljs-keyword">e</span>”  and  a<br>       grave-accented “`” are equivalent.)<br><br>       Collating Symbols<br>              A  collating  symbol  is  a  multi-character  collating  element<br>              enclosed <span class="hljs-keyword">in</span> [.  and .].  <span class="hljs-keyword">For</span> example, <span class="hljs-keyword">if</span> ch is a collating  ele‐<br>              ment,  then  [[.ch.]]  is a regular expression that matches this<br>              collating element, <span class="hljs-keyword">while</span>  [ch]  is  a  regular  expression  that<br>              matches either c or <span class="hljs-keyword">h</span>.<br><br>       Equivalence Classes<br>              <span class="hljs-keyword">An</span>  equivalence  <span class="hljs-keyword">class</span>  is  a locale-specific name <span class="hljs-keyword">for</span> a <span class="hljs-keyword">list</span> of<br>              characters that are equivalent.  The name is enclosed <span class="hljs-keyword">in</span> [=  and<br>              =].   <span class="hljs-keyword">For</span>  example, the name <span class="hljs-keyword">e</span> might be used to represent all of<br>              “<span class="hljs-keyword">e</span>,” “´,” and “`.”  <span class="hljs-keyword">In</span> this case, [[=<span class="hljs-keyword">e</span>=]] is a  regular  expres‐<br>              sion that matches any of <span class="hljs-keyword">e</span>, ´, or `.<br><br>       These  features are very valuable <span class="hljs-keyword">in</span> non-English speaking locales.  The<br>       library functions that gawk uses <span class="hljs-keyword">for</span> regular expression  matching  cur‐<br>       rently  only  recognize  POSIX character classes; they <span class="hljs-keyword">do</span> not recognize<br>       collating symbols or equivalence classes.<br><br>       The \y, \B, \&lt;, \&gt;, \s, \S, \w, \W, \`, and \&#x27; operators  are  specific<br>       to  gawk;  they  are  extensions based <span class="hljs-keyword">on</span> facilities <span class="hljs-keyword">in</span> the GNU regular<br>       expression libraries.<br><br>       The various command <span class="hljs-keyword">line</span> options control how gawk interprets characters<br>       <span class="hljs-keyword">in</span> regular expressions.<br><br>       <span class="hljs-keyword">No</span> options<br>              <span class="hljs-keyword">In</span>  the  default case, gawk provides all the facilities of POSIX<br>              regular expressions and the  GNU  regular  expression  operators<br>              described above.<br><br>       --posix<br>              Only  POSIX regular expressions are supported, the GNU operators<br>              are not special.  (<span class="hljs-keyword">E</span>.<span class="hljs-keyword">g</span>., \w matches a literal w).<br><br>       --traditional<br>              Traditional UNIX awk regular expressions are matched.   The  GNU<br>              operators  are  not  special,  and  interval expressions are not<br>              available.  Characters described <span class="hljs-keyword">by</span> octal and hexadecimal escape<br>              sequences  are treated literally, even <span class="hljs-keyword">if</span> they represent regular<br>              expression metacharacters.<br><br>       --re-interval<br>              Allow interval  expressions  <span class="hljs-keyword">in</span>  regular  expressions,  even  <span class="hljs-keyword">if</span><br>              --traditional has been provided.<br><br>   Actions<br>       Action  statements  are enclosed <span class="hljs-keyword">in</span> braces, &#123; and &#125;.  Action statements<br>       consist of the usual assignment, conditional,  and  looping  statements<br>       found  <span class="hljs-keyword">in</span>  most  languages.   The  operators,  control  statements, and<br>       <span class="hljs-keyword">input</span>/output statements available are patterned after those <span class="hljs-keyword">in</span> C.<br><br>   Operators<br>       The operators <span class="hljs-keyword">in</span> AWK, <span class="hljs-keyword">in</span> <span class="hljs-keyword">order</span> of decreasing precedence, are:<br><br>       (...)       Grouping<br><br>       $           Field reference.<br><br>       ++ --       Increment and decrement, both prefix and postfix.<br><br>       ^           Exponentiation (** may  also  be  used,  and  **=  <span class="hljs-keyword">for</span>  the<br>                   assignment operator).<br><br>       + - !       Unary plus, unary minus, and logical negation.<br><br><span class="hljs-comment">       * / %       Multiplication, division, and modulus.</span><br><br>       + -         Addition and subtraction.<br><br>       space       String concatenation.<br><br>       |   |&amp;      Piped I/O <span class="hljs-keyword">for</span> getline, <span class="hljs-keyword">print</span>, and printf.<br><br>       &lt; &gt; &lt;= &gt;= != ==<br>                   The regular relational operators.<br><br>       ~ !~        Regular  expression match, negated match.  <span class="hljs-keyword">NOTE</span>: <span class="hljs-keyword">Do</span> not <span class="hljs-keyword">use</span><br>                   a constant regular expression (/foo/) <span class="hljs-keyword">on</span> the left-hand side<br>                   of  a  ~  or !~.  Only <span class="hljs-keyword">use</span> <span class="hljs-keyword">one</span> <span class="hljs-keyword">on</span> the right-hand side.  The<br>                   expression /foo/ ~ exp has  the  same  meaning  <span class="hljs-keyword">as</span>  ((<span class="hljs-variable">$0</span>  ~<br>                   /foo/) ~ exp).  This is usually not what you want.<br><br>       <span class="hljs-keyword">in</span>          Array membership.<br><br>       &amp;&amp;          Logical AND.<br><br>       ||          Logical OR.<br><br>       ?:          The  C  conditional  expression.  This has the <span class="hljs-keyword">form</span> expr1 ?<br>                   expr2 : expr3.  <span class="hljs-keyword">If</span> expr1 is true, the value of the  expres‐<br>                   sion  is  expr2,  otherwise it is expr3.  Only <span class="hljs-keyword">one</span> of expr2<br>                   and expr3 is evaluated.<br><br>       = += -= *= /= %= ^=<br>                   Assignment.  Both absolute assignment  (<span class="hljs-keyword">var</span>  =  value)  and<br>                   operator-assignment (the other forms) are supported.<br><br>   Control Statements<br>       The control statements are <span class="hljs-keyword">as</span> follows:<br><br>              <span class="hljs-keyword">if</span> (condition) statement [ <span class="hljs-keyword">else</span> statement ]<br>              <span class="hljs-keyword">while</span> (condition) statement<br>              <span class="hljs-keyword">do</span> statement <span class="hljs-keyword">while</span> (condition)<br>              <span class="hljs-keyword">for</span> (expr1; expr2; expr3) statement<br>              <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> <span class="hljs-keyword">in</span> array) statement<br>              <span class="hljs-keyword">break</span><br>              <span class="hljs-keyword">continue</span><br>              delete array[index]<br>              delete array<br>              <span class="hljs-keyword">exit</span> [ expression ]<br>              &#123; statements &#125;<br>              switch (expression) &#123;<br>              case value|regex : statement<br>              ...<br>              [ default: statement ]<br>              &#125;<br><br>   I/O Statements<br>       The <span class="hljs-keyword">input</span>/output statements are <span class="hljs-keyword">as</span> follows:<br><br>       <span class="hljs-keyword">close</span>(<span class="hljs-keyword">file</span> [, how])   <span class="hljs-keyword">Close</span> <span class="hljs-keyword">file</span>, pipe or co-process.  The optional how<br>                             should only be used when closing  <span class="hljs-keyword">one</span>  end  of  a<br>                             <span class="hljs-keyword">two</span>-way  pipe  to  a  co-process.   It  must be a<br>                             string value, either <span class="hljs-string">&quot;to&quot;</span> or <span class="hljs-string">&quot;from&quot;</span>.<br><br>       getline               <span class="hljs-keyword">Set</span> <span class="hljs-variable">$0</span> from next <span class="hljs-keyword">input</span> record; <span class="hljs-keyword">set</span> NF,  NR,  FNR,<br>                             RT.<br><br>       getline &lt;<span class="hljs-keyword">file</span>         <span class="hljs-keyword">Set</span> <span class="hljs-variable">$0</span> from next record of <span class="hljs-keyword">file</span>; <span class="hljs-keyword">set</span> NF, RT.<br><br>       getline <span class="hljs-keyword">var</span>           <span class="hljs-keyword">Set</span> <span class="hljs-keyword">var</span> from next <span class="hljs-keyword">input</span> record; <span class="hljs-keyword">set</span> NR, FNR, RT.<br><br>       getline <span class="hljs-keyword">var</span> &lt;<span class="hljs-keyword">file</span>     <span class="hljs-keyword">Set</span> <span class="hljs-keyword">var</span> from next record of <span class="hljs-keyword">file</span>, RT.<br><br>       command | getline [<span class="hljs-keyword">var</span>]<br>                             <span class="hljs-keyword">Run</span>  command  piping the output either into <span class="hljs-variable">$0</span> or<br>                             <span class="hljs-keyword">var</span>, <span class="hljs-keyword">as</span> above, and RT.<br><br>       command |&amp; getline [<span class="hljs-keyword">var</span>]<br>                             <span class="hljs-keyword">Run</span> command <span class="hljs-keyword">as</span> a  co-process  piping  the  output<br>                             either into <span class="hljs-variable">$0</span> or <span class="hljs-keyword">var</span>, <span class="hljs-keyword">as</span> above, and RT.  Co-<span class="hljs-keyword">pro</span>‐<br>                             cesses are a gawk extension.  (command  can  also<br>                             be  a  socket.   See  the subsection Special <span class="hljs-keyword">File</span><br>                             Names, below.)<br><br>       next                  Stop processing the current  <span class="hljs-keyword">input</span>  record.   The<br>                             next  <span class="hljs-keyword">input</span>  record is <span class="hljs-keyword">read</span> and processing starts<br>                             over with the first pattern <span class="hljs-keyword">in</span> the  AWK  <span class="hljs-keyword">program</span>.<br>                             Upon  reaching  the  end  of the <span class="hljs-keyword">input</span> data, gawk<br>                             executes any END rule(s).<br><br>       nextfile              Stop processing the current <span class="hljs-keyword">input</span> <span class="hljs-keyword">file</span>.  The next<br>                             <span class="hljs-keyword">input</span> record <span class="hljs-keyword">read</span> comes from the next <span class="hljs-keyword">input</span> <span class="hljs-keyword">file</span>.<br>                             FILENAME and ARGIND are updated, FNR is reset  to<br>                             1, and processing starts over with the first pat‐<br>                             tern <span class="hljs-keyword">in</span> the AWK <span class="hljs-keyword">program</span>.  Upon reaching  the  end<br>                             of the <span class="hljs-keyword">input</span> data, gawk executes any END rule(s).<br><br>       <span class="hljs-keyword">print</span>                 <span class="hljs-keyword">Print</span>  the  current record.  The output record is<br>                             terminated with the value of ORS.<br><br>       <span class="hljs-keyword">print</span> expr-<span class="hljs-keyword">list</span>       <span class="hljs-keyword">Print</span> expressions.  Each expression is  separated<br>                             <span class="hljs-keyword">by</span> the value of OFS.  The output record is termi‐<br>                             nated with the value of ORS.<br><br>       <span class="hljs-keyword">print</span> expr-<span class="hljs-keyword">list</span> &gt;<span class="hljs-keyword">file</span> <span class="hljs-keyword">Print</span> expressions <span class="hljs-keyword">on</span> <span class="hljs-keyword">file</span>.   Each  expression  is<br>                             separated <span class="hljs-keyword">by</span> the value of OFS.  The output record<br>                             is terminated with the value of ORS.<br><br>       printf fmt, expr-<span class="hljs-keyword">list</span> <span class="hljs-keyword">Format</span> and  <span class="hljs-keyword">print</span>.   See  The  printf  Statement,<br>                             below.<br><br>       printf fmt, expr-<span class="hljs-keyword">list</span> &gt;<span class="hljs-keyword">file</span><br>                             <span class="hljs-keyword">Format</span> and <span class="hljs-keyword">print</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">file</span>.<br><br>       system(cmd-<span class="hljs-keyword">line</span>)      Execute the command cmd-<span class="hljs-keyword">line</span>, and <span class="hljs-keyword">return</span> the <span class="hljs-keyword">exit</span><br>                             status.  (This may not be available <span class="hljs-keyword">on</span>  non-POSIX<br>                             systems.)<br><br>       fflush([<span class="hljs-keyword">file</span>])        Flush any buffers associated with the <span class="hljs-keyword">open</span> output<br>                             <span class="hljs-keyword">file</span> or pipe <span class="hljs-keyword">file</span>.  <span class="hljs-keyword">If</span> <span class="hljs-keyword">file</span> is missing or  <span class="hljs-keyword">if</span>  it<br>                             is  the  null  string, then flush all <span class="hljs-keyword">open</span> output<br>                             files and pipes.<br><br>       Additional output redirections are allowed <span class="hljs-keyword">for</span> <span class="hljs-keyword">print</span> and printf.<br><br>       <span class="hljs-keyword">print</span> ... &gt;&gt; <span class="hljs-keyword">file</span><br>              Appends output to the <span class="hljs-keyword">file</span>.<br><br>       <span class="hljs-keyword">print</span> ... | command<br>              Writes <span class="hljs-keyword">on</span> a pipe.<br><br>       <span class="hljs-keyword">print</span> ... |&amp; command<br>              Sends data to a co-process or socket.  (See also the  subsection<br>              Special <span class="hljs-keyword">File</span> Names, below.)<br><br>       The  getline  command returns 1 <span class="hljs-keyword">on</span> success, 0 <span class="hljs-keyword">on</span> end of <span class="hljs-keyword">file</span>, and -1 <span class="hljs-keyword">on</span><br>       <span class="hljs-keyword">an</span> <span class="hljs-keyword">error</span>.  Upon <span class="hljs-keyword">an</span> <span class="hljs-keyword">error</span>, ERRNO is <span class="hljs-keyword">set</span> to a string describing the <span class="hljs-keyword">prob</span>‐<br>       lem.<br><br>       <span class="hljs-keyword">NOTE</span>:  Failure <span class="hljs-keyword">in</span> opening a <span class="hljs-keyword">two</span>-way socket results <span class="hljs-keyword">in</span> a non-fatal <span class="hljs-keyword">error</span><br>       being returned to the calling function. <span class="hljs-keyword">If</span> using a pipe, co-process, or<br>       socket  to getline, or from <span class="hljs-keyword">print</span> or printf within a loop, you must <span class="hljs-keyword">use</span><br>       <span class="hljs-keyword">close</span>() to create new instances of the command or socket.  AWK does not<br>       automatically  <span class="hljs-keyword">close</span>  pipes,  sockets, or co-processes when they <span class="hljs-keyword">return</span><br>       EOF.<br><br>   The printf Statement<br>       The AWK versions of the printf statement and  sprintf()  function  (see<br>       below) accept the following conversion specification formats:<br><br>       %c      A single character.  <span class="hljs-keyword">If</span> the argument used <span class="hljs-keyword">for</span> %c is numeric, it<br>               is treated <span class="hljs-keyword">as</span> a character and printed.  Otherwise, the argument<br>               is assumed to be a string, and the only first character of that<br>               string is printed.<br><br>       %<span class="hljs-keyword">d</span>, %i  A decimal number (the integer part).<br><br>       %<span class="hljs-keyword">e</span>, %<span class="hljs-keyword">E</span>  A floating point number of the <span class="hljs-keyword">form</span> [-]<span class="hljs-keyword">d</span>.dddddde[+-]dd.  The %<span class="hljs-keyword">E</span><br>               <span class="hljs-keyword">format</span> uses <span class="hljs-keyword">E</span> instead of <span class="hljs-keyword">e</span>.<br><br>       %f, %F  A floating point number of the <span class="hljs-keyword">form</span> [-]ddd.dddddd.  <span class="hljs-keyword">If</span> the sys‐<br>               tem library supports it, %F is available <span class="hljs-keyword">as</span> well. This is  like<br>               %f,  but  uses  capital  letters <span class="hljs-keyword">for</span> special “not a number” and<br>               “infinity” values. <span class="hljs-keyword">If</span> %F is not available, gawk uses %f.<br><br>       %<span class="hljs-keyword">g</span>, %<span class="hljs-keyword">G</span>  <span class="hljs-keyword">Use</span> %<span class="hljs-keyword">e</span> or %f conversion, whichever is shorter, with nonsignifi‐<br>               cant zeros suppressed.  The %<span class="hljs-keyword">G</span> <span class="hljs-keyword">format</span> uses %<span class="hljs-keyword">E</span> instead of %<span class="hljs-keyword">e</span>.<br><br>       %o      <span class="hljs-keyword">An</span> unsigned octal number (also <span class="hljs-keyword">an</span> integer).<br><br>       %<span class="hljs-keyword">u</span>      <span class="hljs-keyword">An</span> unsigned decimal number (again, <span class="hljs-keyword">an</span> integer).<br><br>       %s      A character string.<br><br>       %x, %X  <span class="hljs-keyword">An</span>  unsigned  hexadecimal  number  (<span class="hljs-keyword">an</span> integer).  The %X <span class="hljs-keyword">format</span><br>               uses ABCDEF instead of abcdef.<br><br>       %%      A single % character; <span class="hljs-keyword">no</span> argument is converted.<br><br>       Optional, additional parameters may lie between the % and  the  control<br>       letter:<br><br>       <span class="hljs-keyword">count</span>$ <span class="hljs-keyword">Use</span> the <span class="hljs-keyword">count</span>&#x27;th argument at this point <span class="hljs-keyword">in</span> the formatting.  This<br>              is called a positional specifier and is intended  primarily  <span class="hljs-keyword">for</span><br>              <span class="hljs-keyword">use</span>  <span class="hljs-keyword">in</span> translated versions of <span class="hljs-keyword">format</span> strings, not <span class="hljs-keyword">in</span> the origi‐<br>              nal text of <span class="hljs-keyword">an</span> AWK <span class="hljs-keyword">program</span>.  It is a gawk extension.<br><br>       -      The expression should be left-justified within its field.<br><br>       space  <span class="hljs-keyword">For</span> numeric conversions, prefix positive values  with  a  space,<br>              and negative values with a minus sign.<br><br>       +      The  plus sign, used before the width modifier (see below), says<br>              to always supply a sign <span class="hljs-keyword">for</span> numeric  conversions,  even  <span class="hljs-keyword">if</span>  the<br>              data  to  be  formatted  is positive.  The + overrides the space<br>              modifier.<br><br>       #      <span class="hljs-keyword">Use</span> <span class="hljs-keyword">an</span> “alternate <span class="hljs-keyword">form</span>” <span class="hljs-keyword">for</span> certain control  letters.   <span class="hljs-keyword">For</span>  %o,<br>              supply  a  leading zero.  <span class="hljs-keyword">For</span> %x, and %X, supply a leading 0x or<br>              0X <span class="hljs-keyword">for</span> a nonzero result.  <span class="hljs-keyword">For</span> %<span class="hljs-keyword">e</span>, %<span class="hljs-keyword">E</span>,  %f  and  %F,  the  result<br>              always contains a decimal point.  <span class="hljs-keyword">For</span> %<span class="hljs-keyword">g</span>, and %<span class="hljs-keyword">G</span>, trailing zeros<br>              are not removed from the result.<br><br>       0      A leading 0 (zero) acts <span class="hljs-keyword">as</span> a flag, that indicates output  should<br>              be  padded  with zeroes instead of spaces.  This applies only to<br>              the numeric output formats.  This flag only has <span class="hljs-keyword">an</span>  effect  when<br>              the field width is wider than the value to be printed.<br><br>       &#x27;      A  single  quote character instructs gawk to insert the locale&#x27;s<br>              thousands-separator character into decimal numbers, and to  also<br>              <span class="hljs-keyword">use</span>  the  locale&#x27;s  decimal  point character with floating point<br>              formats.  This requires correct locale support <span class="hljs-keyword">in</span> the C  library<br>              and <span class="hljs-keyword">in</span> the definition of the current locale.<br><br>       width  The field should be padded to this width.  The field is normally<br>              padded with spaces.  With the 0 flag, it is padded with zeroes.<br><br>       .prec  A number that specifies the precision to <span class="hljs-keyword">use</span> when printing.  <span class="hljs-keyword">For</span><br>              the  %<span class="hljs-keyword">e</span>,  %<span class="hljs-keyword">E</span>,  %f  and %F, formats, this specifies the number of<br>              digits you want printed to the right of the decimal point.   <span class="hljs-keyword">For</span><br>              the  %<span class="hljs-keyword">g</span>, and %<span class="hljs-keyword">G</span> formats, it specifies the maximum number of sig‐<br>              nificant digits.  <span class="hljs-keyword">For</span> the %<span class="hljs-keyword">d</span>, %i, %o, %<span class="hljs-keyword">u</span>, %x, and %X formats, it<br>              specifies  the  minimum  number  of digits to <span class="hljs-keyword">print</span>.  <span class="hljs-keyword">For</span> %s, it<br>              specifies the maximum number of characters from the string  that<br>              should be printed.<br><br>       The  dynamic width and prec capabilities of the ISO C printf() routines<br>       are supported.  A * <span class="hljs-keyword">in</span> place of either the width or prec specifications<br>       causes  their  values  to  be taken from the argument <span class="hljs-keyword">list</span> to printf or<br>       sprintf().  To <span class="hljs-keyword">use</span> a positional specifier with a dynamic width or  pre‐<br>       cision,  supply the <span class="hljs-keyword">count</span>$ after the * <span class="hljs-keyword">in</span> the <span class="hljs-keyword">format</span> string.  <span class="hljs-keyword">For</span> exam‐<br>       ple, <span class="hljs-string">&quot;%3$*2$.*1$s&quot;</span>.<br><br>   Special <span class="hljs-keyword">File</span> Names<br>       When doing I/O redirection from either <span class="hljs-keyword">print</span> or printf into a <span class="hljs-keyword">file</span>,  or<br>       via  getline  from  a  <span class="hljs-keyword">file</span>,  gawk recognizes certain special filenames<br>       internally.  These filenames allow  access  to  <span class="hljs-keyword">open</span>  <span class="hljs-keyword">file</span>  descriptors<br>       inherited  from  gawk&#x27;s parent process (usually the <span class="hljs-keyword">shell</span>).  These <span class="hljs-keyword">file</span><br>       names may also be used <span class="hljs-keyword">on</span> the command <span class="hljs-keyword">line</span> to  name  data  files.   The<br>       filenames are:<br><br>       -           The standard <span class="hljs-keyword">input</span>.<br><br>       /dev/stdin  The standard <span class="hljs-keyword">input</span>.<br><br>       /dev/stdout The standard output.<br><br>       /dev/stderr The standard <span class="hljs-keyword">error</span> output.<br><br>       /dev/fd/<span class="hljs-keyword">n</span>   The <span class="hljs-keyword">file</span> associated with the <span class="hljs-keyword">open</span> <span class="hljs-keyword">file</span> descriptor <span class="hljs-keyword">n</span>.<br><br>       These are particularly useful <span class="hljs-keyword">for</span> <span class="hljs-keyword">error</span> messages.  <span class="hljs-keyword">For</span> example:<br><br>              <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;You blew it!&quot;</span> &gt; <span class="hljs-string">&quot;/dev/stderr&quot;</span><br><br>       whereas you would otherwise have to <span class="hljs-keyword">use</span><br><br>              <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;You blew it!&quot;</span> | <span class="hljs-string">&quot;cat 1&gt;&amp;2&quot;</span><br><br>       The  following  special  filenames  may  be used with the |&amp; co-process<br>       operator <span class="hljs-keyword">for</span> creating TCP/IP network connections:<br><br>       /inet/tcp/lport/rhost/rport<br>       /inet4/tcp/lport/rhost/rport<br>       /inet6/tcp/lport/rhost/rport<br>              Files <span class="hljs-keyword">for</span> a TCP/IP connection <span class="hljs-keyword">on</span> <span class="hljs-keyword">local</span> port lport to remote host<br>              rhost  <span class="hljs-keyword">on</span> remote port rport.  <span class="hljs-keyword">Use</span> a port of 0 to have the system<br>              pick a port.  <span class="hljs-keyword">Use</span> /inet4 to force <span class="hljs-keyword">an</span> IPv4 connection, and /inet6<br>              to  force  <span class="hljs-keyword">an</span>  IPv6  connection.   Plain  /inet  uses the system<br>              default (most likely IPv4).<br><br>       /inet/udp/lport/rhost/rport<br>       /inet4/udp/lport/rhost/rport<br>       /inet6/udp/lport/rhost/rport<br>              Similar, but <span class="hljs-keyword">use</span> UDP/IP instead of TCP/IP.<br><br>   Numeric Functions<br>       AWK has the following built-<span class="hljs-keyword">in</span> arithmetic functions:<br><br>       <span class="hljs-built_in">atan2</span>(y, x)   <span class="hljs-keyword">Return</span> the arctangent of y/x <span class="hljs-keyword">in</span> radians.<br><br>       <span class="hljs-built_in">cos</span>(expr)     <span class="hljs-keyword">Return</span> the cosine of expr, <span class="hljs-keyword">which</span> is <span class="hljs-keyword">in</span> radians.<br><br>       <span class="hljs-built_in">exp</span>(expr)     The exponential function.<br><br>       int(expr)     Truncate to integer.<br><br>       <span class="hljs-built_in">log</span>(expr)     The natural logarithm function.<br><br>       rand()        <span class="hljs-keyword">Return</span> a random number <span class="hljs-keyword">N</span>, between 0 and 1, such that 0  ≤<br>                     <span class="hljs-keyword">N</span> &lt; 1.<br><br>       <span class="hljs-built_in">sin</span>(expr)     <span class="hljs-keyword">Return</span> the sine of expr, <span class="hljs-keyword">which</span> is <span class="hljs-keyword">in</span> radians.<br><br>       <span class="hljs-built_in">sqrt</span>(expr)    <span class="hljs-keyword">Return</span> the square root of expr.<br><br>       srand([expr]) <span class="hljs-keyword">Use</span> expr <span class="hljs-keyword">as</span> the new seed <span class="hljs-keyword">for</span> the random number generator.<br>                     <span class="hljs-keyword">If</span> <span class="hljs-keyword">no</span> expr is provided, <span class="hljs-keyword">use</span> the time of day.  <span class="hljs-keyword">Return</span>  the<br>                     previous seed <span class="hljs-keyword">for</span> the random number generator.<br><br>   String Functions<br>       Gawk has the following built-<span class="hljs-keyword">in</span> string functions:<br><br>       asort(s [, <span class="hljs-keyword">d</span> [, how] ]) <span class="hljs-keyword">Return</span>  the  number  of  elements <span class="hljs-keyword">in</span> the source<br>                               array s.  <span class="hljs-keyword">Sort</span> the contents of s  using  gawk&#x27;s<br>                               normal  rules <span class="hljs-keyword">for</span> comparing values, and <span class="hljs-keyword">replace</span><br>                               the indices of the sorted values s with sequen‐<br>                               tial  integers starting with 1. <span class="hljs-keyword">If</span> the optional<br>                               destination array <span class="hljs-keyword">d</span> is specified, first  dupli‐<br>                               cate  s  into  <span class="hljs-keyword">d</span>,  and then <span class="hljs-keyword">sort</span> <span class="hljs-keyword">d</span>, leaving the<br>                               indices of the source array  s  unchanged.  The<br>                               optional  string how controls the direction and<br>                               the comparison mode.  Valid values <span class="hljs-keyword">for</span> how  are<br>                               any     of     the     strings     valid    <span class="hljs-keyword">for</span><br>                               PROCINFO[<span class="hljs-string">&quot;sorted_in&quot;</span>].  It can also be the name<br>                               of   a   user-defined  comparison  function  <span class="hljs-keyword">as</span><br>                               described <span class="hljs-keyword">in</span> PROCINFO[<span class="hljs-string">&quot;sorted_in&quot;</span>].<br><br>       asorti(s [, <span class="hljs-keyword">d</span> [, how] ])<br>                               <span class="hljs-keyword">Return</span> the number of  elements  <span class="hljs-keyword">in</span>  the  source<br>                               array  s.   The behavior is the same <span class="hljs-keyword">as</span> that of<br>                               asort(), except that the array indices are used<br>                               <span class="hljs-keyword">for</span>  sorting, not the array values.  When done,<br>                               the array is indexed numerically, and the  val‐<br>                               ues  are  those  of  the original indices.  The<br>                               original values are lost; thus provide a second<br>                               array  <span class="hljs-keyword">if</span>  you  wish  to <span class="hljs-keyword">preserve</span> the original.<br>                               The purpose of the optional string how  is  the<br>                               same <span class="hljs-keyword">as</span> described <span class="hljs-keyword">in</span> asort() above.<br><br>       gensub(r, s, <span class="hljs-keyword">h</span> [, t])   <span class="hljs-keyword">Search</span>  the  target string t <span class="hljs-keyword">for</span> matches of the<br>                               regular expression r.  <span class="hljs-keyword">If</span> <span class="hljs-keyword">h</span> is a string  begin‐<br>                               ning with <span class="hljs-keyword">g</span> or <span class="hljs-keyword">G</span>, then <span class="hljs-keyword">replace</span> all matches of r<br>                               with s.  Otherwise, <span class="hljs-keyword">h</span> is  a  number  indicating<br>                               <span class="hljs-keyword">which</span>  match of r to <span class="hljs-keyword">replace</span>.  <span class="hljs-keyword">If</span> t is not sup‐<br>                               plied, <span class="hljs-keyword">use</span> <span class="hljs-variable">$0</span> instead.  Within the  replacement<br>                               text  s,  the  sequence  \<span class="hljs-keyword">n</span>, where <span class="hljs-keyword">n</span> is a digit<br>                               from 1 to 9, may be used to indicate  just  the<br>                               text that matched the <span class="hljs-keyword">n</span>&#x27;th parenthesized subex‐<br>                               pression.   The  sequence  \0  represents   the<br>                               entire  matched  text, <span class="hljs-keyword">as</span> does the character &amp;.<br>                               Unlike sub() and gsub(), the modified string is<br>                               returned <span class="hljs-keyword">as</span> the result of the function, and the<br>                               original target string is not changed.<br><br>       gsub(r, s [, t])        <span class="hljs-keyword">For</span> each substring matching the regular expres‐<br>                               sion  r  <span class="hljs-keyword">in</span> the string t, substitute the string<br>                               s, and <span class="hljs-keyword">return</span> the number of substitutions.   <span class="hljs-keyword">If</span><br>                               t  is  not  supplied,  <span class="hljs-keyword">use</span>  <span class="hljs-variable">$0</span>.   <span class="hljs-keyword">An</span>  &amp;  <span class="hljs-keyword">in</span> the<br>                               replacement text is replaced with the text that<br>                               was  actually matched.  <span class="hljs-keyword">Use</span> \&amp; to get a literal<br>                               &amp;.  (This must be typed  <span class="hljs-keyword">as</span>  <span class="hljs-string">&quot;\\&amp;&quot;</span>;  see  GAWK:<br>                               Effective  AWK Programming <span class="hljs-keyword">for</span> a fuller discus‐<br>                               sion of the rules <span class="hljs-keyword">for</span> &amp;&#x27;s  and  backslashes  <span class="hljs-keyword">in</span><br>                               the replacement text of sub(), gsub(), and <span class="hljs-keyword">gen</span>‐<br>                               sub().)<br><br>       <span class="hljs-built_in">index</span>(s, t)             <span class="hljs-keyword">Return</span> the index of the string t <span class="hljs-keyword">in</span> the  string<br>                               s,  or  0  <span class="hljs-keyword">if</span>  t is not present.  (This implies<br>                               that character indices start at <span class="hljs-keyword">one</span>.)  It is  a<br>                               fatal <span class="hljs-keyword">error</span> to <span class="hljs-keyword">use</span> a regexp constant <span class="hljs-keyword">for</span> t.<br><br>       <span class="hljs-built_in">length</span>([s])             <span class="hljs-keyword">Return</span>  the  length  of  the  string  s, or the<br>                               length of <span class="hljs-variable">$0</span> <span class="hljs-keyword">if</span> s is not supplied.  <span class="hljs-keyword">As</span>  a  non-<br>                               standard  extension,  with  <span class="hljs-keyword">an</span>  array argument,<br>                               <span class="hljs-built_in">length</span>() returns the number of elements <span class="hljs-keyword">in</span>  the<br>                               array.<br><br>       <span class="hljs-built_in">match</span>(s, r [, a])       <span class="hljs-keyword">Return</span>  the  position  <span class="hljs-keyword">in</span>  s  where the regular<br>                               expression r occurs, or 0 <span class="hljs-keyword">if</span> r is not  present,<br>                               and <span class="hljs-keyword">set</span> the values of RSTART and RLENGTH.  <span class="hljs-keyword">Note</span><br>                               that the argument <span class="hljs-keyword">order</span> is the same <span class="hljs-keyword">as</span> <span class="hljs-keyword">for</span>  the<br>                               ~  operator: str ~ re.  <span class="hljs-keyword">If</span> array a is provided,<br>                               a is cleared and then elements 1 through <span class="hljs-keyword">n</span>  are<br>                               filled  with  the  portions of s that match the<br>                               corresponding parenthesized subexpression <span class="hljs-keyword">in</span> r.<br>                               The 0&#x27;th element of a contains the portion of s<br>                               matched <span class="hljs-keyword">by</span> the  entire  regular  expression  r.<br>                               Subscripts  a[<span class="hljs-keyword">n</span>,  <span class="hljs-string">&quot;start&quot;</span>],  and a[<span class="hljs-keyword">n</span>, <span class="hljs-string">&quot;length&quot;</span>]<br>                               provide the starting index <span class="hljs-keyword">in</span>  the  string  and<br>                               length  respectively,  of  each  matching  sub‐<br>                               string.<br><br>       patsplit(s, a [, r [, seps] ])<br>                               <span class="hljs-keyword">Split</span> the string s into the  array  a  and  the<br>                               separators array seps <span class="hljs-keyword">on</span> the regular expression<br>                               r, and <span class="hljs-keyword">return</span> the number  of  fields.   Element<br>                               values  are  the  portions of s that matched r.<br>                               The value of  seps[i]  is  the  separator  that<br>                               appeared  <span class="hljs-keyword">in</span> front of a[i+1].  <span class="hljs-keyword">If</span> r is omitted,<br>                               FPAT is used instead.  The arrays  a  and  seps<br>                               are  cleared  first.  Splitting behaves identi‐<br>                               cally to field splitting with  FPAT,  described<br>                               above.<br><br>       <span class="hljs-keyword">split</span>(s, a [, r [, seps] ])<br>                               <span class="hljs-keyword">Split</span>  the  string  s  into the array a and the<br>                               separators array seps <span class="hljs-keyword">on</span> the regular expression<br>                               r,  and  <span class="hljs-keyword">return</span>  the number of fields.  <span class="hljs-keyword">If</span> r is<br>                               omitted, FS is used instead.  The arrays a  and<br>                               seps  are  cleared first.  seps[i] is the field<br>                               separator matched <span class="hljs-keyword">by</span> r between a[i] and a[i+1].<br>                               <span class="hljs-keyword">If</span> r is a single space, then leading whitespace<br>                               <span class="hljs-keyword">in</span> s goes into the extra array element  seps[0]<br>                               and  trailing  whitespace  goes  into the extra<br>                               array element seps[<span class="hljs-keyword">n</span>], where <span class="hljs-keyword">n</span>  is  the  <span class="hljs-keyword">return</span><br>                               value  of  <span class="hljs-keyword">split</span>(s,  a,  r,  seps).   Splitting<br>                               behaves   identically   to   field   splitting,<br>                               described above.<br><br>       sprintf(fmt, expr-<span class="hljs-keyword">list</span>) <span class="hljs-keyword">Print</span>  expr-<span class="hljs-keyword">list</span>  according  to fmt, and <span class="hljs-keyword">return</span><br>                               the resulting string.<br><br>       strtonum(str)           Examine str, and <span class="hljs-keyword">return</span> its numeric value.   <span class="hljs-keyword">If</span><br>                               str  begins  with  a  leading 0, treat it <span class="hljs-keyword">as</span> <span class="hljs-keyword">an</span><br>                               octal number.  <span class="hljs-keyword">If</span> str begins with a leading  0x<br>                               or  0X, treat it <span class="hljs-keyword">as</span> a hexadecimal number.  Oth‐<br>                               erwise, assume it is a decimal number.<br><br>       sub(r, s [, t])         Just like gsub(), but <span class="hljs-keyword">replace</span>  only  the  first<br>                               matching substring.<br><br>       <span class="hljs-built_in">substr</span>(s, i [, <span class="hljs-keyword">n</span>])      <span class="hljs-keyword">Return</span>  the  at most <span class="hljs-keyword">n</span>-character substring of s<br>                               starting at i.  <span class="hljs-keyword">If</span> <span class="hljs-keyword">n</span> is omitted, <span class="hljs-keyword">use</span>  the  rest<br>                               of s.<br><br>       tolower(str)            <span class="hljs-keyword">Return</span>  a  <span class="hljs-keyword">copy</span> of the string str, with all the<br>                               uppercase characters <span class="hljs-keyword">in</span> str translated to their<br>                               corresponding   lowercase  counterparts.   Non-<br>                               alphabetic characters are left unchanged.<br><br>       toupper(str)            <span class="hljs-keyword">Return</span> a <span class="hljs-keyword">copy</span> of the string str, with  all  the<br>                               lowercase characters <span class="hljs-keyword">in</span> str translated to their<br>                               corresponding  uppercase  counterparts.    Non-<br>                               alphabetic characters are left unchanged.<br><br>       Gawk  is  multibyte aware.  This <span class="hljs-keyword">means</span> that <span class="hljs-built_in">index</span>(), <span class="hljs-built_in">length</span>(), <span class="hljs-built_in">substr</span>()<br>       and <span class="hljs-built_in">match</span>() all work <span class="hljs-keyword">in</span> terms of characters, not bytes.<br><br>   Time Functions<br>       Since <span class="hljs-keyword">one</span> of the primary uses of AWK programs is processing  <span class="hljs-keyword">log</span>  files<br>       that  contain time stamp information, gawk provides the following func‐<br>       tions <span class="hljs-keyword">for</span> obtaining time stamps and formatting them.<br><br>       mktime(datespec)<br>                 Turn datespec into a time stamp of the same <span class="hljs-keyword">form</span> <span class="hljs-keyword">as</span>  returned<br>                 <span class="hljs-keyword">by</span>  systime(),  and  <span class="hljs-keyword">return</span>  the  result.   The datespec is a<br>                 string of the <span class="hljs-keyword">form</span> YYYY MM DD HH MM SS[ DST].   The  contents<br>                 of  the  string are six or seven numbers representing respec‐<br>                 tively the full year including century, the month from  1  to<br>                 12,  the  day  of the month from 1 to 31, the hour of the day<br>                 from 0 to 23, the minute from 0 to 59, the second from  0  to<br>                 60,  and  <span class="hljs-keyword">an</span>  optional  daylight  saving flag.  The values of<br>                 these numbers need not be within the  ranges  specified;  <span class="hljs-keyword">for</span><br>                 example,  <span class="hljs-keyword">an</span>  hour  of  -1 <span class="hljs-keyword">means</span> 1 hour before midnight.  The<br>                 origin-zero Gregorian calendar is assumed, with year  0  pre‐<br>                 ceding  year  1  and  year  -1 preceding year 0.  The time is<br>                 assumed to be <span class="hljs-keyword">in</span> the <span class="hljs-keyword">local</span> timezone.  <span class="hljs-keyword">If</span> the daylight  saving<br>                 flag  is  positive, the time is assumed to be daylight saving<br>                 time; <span class="hljs-keyword">if</span> zero, the time is assumed to be standard  time;  and<br>                 <span class="hljs-keyword">if</span>  negative  (the  default),  mktime() attempts to determine<br>                 whether daylight saving time is <span class="hljs-keyword">in</span> effect <span class="hljs-keyword">for</span>  the  specified<br>                 time.  <span class="hljs-keyword">If</span> datespec does not contain enough elements or <span class="hljs-keyword">if</span> the<br>                 resulting time is <span class="hljs-keyword">out</span> of <span class="hljs-keyword">range</span>, mktime() returns -1.<br><br>       strftime([<span class="hljs-keyword">format</span> [, timestamp[, utc-flag]]])<br>                 <span class="hljs-keyword">Format</span> timestamp according to the  specification  <span class="hljs-keyword">in</span>  <span class="hljs-keyword">format</span>.<br>                 <span class="hljs-keyword">If</span>  utc-flag  is  present  and  is  non-zero or non-null, the<br>                 result is <span class="hljs-keyword">in</span> UTC, otherwise the result is <span class="hljs-keyword">in</span> <span class="hljs-keyword">local</span> time.  The<br>                 timestamp  should  be  of  the  same <span class="hljs-keyword">form</span> <span class="hljs-keyword">as</span> returned <span class="hljs-keyword">by</span> sys‐<br>                 time().  <span class="hljs-keyword">If</span> timestamp is missing, the current time of day  is<br>                 used.   <span class="hljs-keyword">If</span>  <span class="hljs-keyword">format</span> is missing, a default <span class="hljs-keyword">format</span> equivalent to<br>                 the output of <span class="hljs-built_in">date</span>(1) is used.  The default <span class="hljs-keyword">format</span> is  avail‐<br>                 able  <span class="hljs-keyword">in</span> PROCINFO[<span class="hljs-string">&quot;strftime&quot;</span>].  See the specification <span class="hljs-keyword">for</span> the<br>                 strftime() function <span class="hljs-keyword">in</span> ISO C <span class="hljs-keyword">for</span> the <span class="hljs-keyword">format</span> conversions  that<br>                 are guaranteed to be available.<br><br>       systime() <span class="hljs-keyword">Return</span> the current time of day <span class="hljs-keyword">as</span> the number of seconds since<br>                 the Epoch (1970-01-01 00:00:00 UTC <span class="hljs-keyword">on</span> POSIX systems).<br><br>   Bit Manipulations Functions<br>       Gawk supplies the following bit manipulation functions.  They  work  <span class="hljs-keyword">by</span><br>       converting  double-precision  floating  point values to uintmax_t inte‐<br>       gers, doing the operation, and  then  converting  the  result  back  to<br>       floating point.  The functions are:<br><br>       and(v1, v2 [, ...]) <span class="hljs-keyword">Return</span>  the  bitwise  AND of the values provided <span class="hljs-keyword">in</span><br>                           the argument <span class="hljs-keyword">list</span>.  There must be at least <span class="hljs-keyword">two</span>.<br><br>       compl(val)          <span class="hljs-keyword">Return</span> the bitwise complement of val.<br><br>       lshift(val, <span class="hljs-keyword">count</span>)  <span class="hljs-keyword">Return</span> the value of  val,  shifted  left  <span class="hljs-keyword">by</span>  <span class="hljs-keyword">count</span><br>                           bits.<br><br>       or(v1, v2 [, ...])  <span class="hljs-keyword">Return</span> the bitwise OR of the values provided <span class="hljs-keyword">in</span> the<br>                           argument <span class="hljs-keyword">list</span>.  There must be at least <span class="hljs-keyword">two</span>.<br><br>       rshift(val, <span class="hljs-keyword">count</span>)  <span class="hljs-keyword">Return</span> the value of val,  shifted  right  <span class="hljs-keyword">by</span>  <span class="hljs-keyword">count</span><br>                           bits.<br><br>       xor(v1, v2 [, ...]) <span class="hljs-keyword">Return</span>  the  bitwise  XOR of the values provided <span class="hljs-keyword">in</span><br>                           the argument <span class="hljs-keyword">list</span>.  There must be at least <span class="hljs-keyword">two</span>.<br><br>   <span class="hljs-keyword">Type</span> Function<br>       The following function is <span class="hljs-keyword">for</span> <span class="hljs-keyword">use</span> with multidimensional arrays.<br><br>       isarray(x)<br>              <span class="hljs-keyword">Return</span> true <span class="hljs-keyword">if</span> x is <span class="hljs-keyword">an</span> array, false otherwise.<br><br>   Internationalization Functions<br>       The following functions may be used from within your  AWK  <span class="hljs-keyword">program</span>  <span class="hljs-keyword">for</span><br>       translating strings at <span class="hljs-keyword">run</span>-time.  <span class="hljs-keyword">For</span> full details, see GAWK: Effective<br>       AWK Programming.<br><br>       bindtextdomain(directory [, domain])<br>              Specify the directory where gawk looks <span class="hljs-keyword">for</span> the  .gmo  files,  <span class="hljs-keyword">in</span><br>              case they will not or cannot be placed <span class="hljs-keyword">in</span> the `<span class="hljs-symbol">`standard&#x27;</span>&#x27; <span class="hljs-keyword">loca</span>‐<br>              tions (<span class="hljs-keyword">e</span>.<span class="hljs-keyword">g</span>., during testing).  It returns  the  directory  where<br>              domain is ``bound.&#x27;&#x27;<br>              The  default domain is the value of TEXTDOMAIN.  <span class="hljs-keyword">If</span> directory is<br>              the null string (<span class="hljs-string">&quot;&quot;</span>), then bindtextdomain() returns the  current<br>              binding <span class="hljs-keyword">for</span> the given domain.<br><br>       dcgettext(string [, domain [, category]])<br>              <span class="hljs-keyword">Return</span>  the  translation  of  string  <span class="hljs-keyword">in</span>  text domain domain <span class="hljs-keyword">for</span><br>              locale category category.  The default value <span class="hljs-keyword">for</span> domain  is  the<br>              current  value of TEXTDOMAIN.  The default value <span class="hljs-keyword">for</span> category is<br>              <span class="hljs-string">&quot;LC_MESSAGES&quot;</span>.<br>              <span class="hljs-keyword">If</span> you supply a value <span class="hljs-keyword">for</span> category, it must be a string equal to<br>              <span class="hljs-keyword">one</span>  of the known locale categories described <span class="hljs-keyword">in</span> GAWK: Effective<br>              AWK Programming.  You must  also  supply  a  text  domain.   <span class="hljs-keyword">Use</span><br>              TEXTDOMAIN <span class="hljs-keyword">if</span> you want to <span class="hljs-keyword">use</span> the current domain.<br><br>       dcngettext(string1, string2, number [, domain [, category]])<br>              <span class="hljs-keyword">Return</span>  the  plural  <span class="hljs-keyword">form</span>  used <span class="hljs-keyword">for</span> number of the translation of<br>              string1 and string2 <span class="hljs-keyword">in</span> text domain domain  <span class="hljs-keyword">for</span>  locale  category<br>              category.   The default value <span class="hljs-keyword">for</span> domain is the current value of<br>              TEXTDOMAIN.  The default value <span class="hljs-keyword">for</span> category is <span class="hljs-string">&quot;LC_MESSAGES&quot;</span>.<br>              <span class="hljs-keyword">If</span> you supply a value <span class="hljs-keyword">for</span> category, it must be a string equal to<br>              <span class="hljs-keyword">one</span>  of the known locale categories described <span class="hljs-keyword">in</span> GAWK: Effective<br>              AWK Programming.  You must  also  supply  a  text  domain.   <span class="hljs-keyword">Use</span><br>              TEXTDOMAIN <span class="hljs-keyword">if</span> you want to <span class="hljs-keyword">use</span> the current domain.<br><br>USER-DEFINED FUNCTIONS<br>       Functions <span class="hljs-keyword">in</span> AWK are defined <span class="hljs-keyword">as</span> follows:<br><br>              function name(parameter <span class="hljs-keyword">list</span>) &#123; statements &#125;<br><br>       Functions  are executed when they are called from within expressions <span class="hljs-keyword">in</span><br>       either patterns or actions.  Actual parameters supplied <span class="hljs-keyword">in</span> the function<br>       call  are  used  to  instantiate  the formal parameters declared <span class="hljs-keyword">in</span> the<br>       function.  Arrays are passed <span class="hljs-keyword">by</span> reference, other variables  are  passed<br>       <span class="hljs-keyword">by</span> value.<br><br>       Since  functions were not originally part of the AWK language, the <span class="hljs-keyword">pro</span>‐<br>       vision <span class="hljs-keyword">for</span> <span class="hljs-keyword">local</span> variables is rather clumsy: They are declared <span class="hljs-keyword">as</span> extra<br>       parameters  <span class="hljs-keyword">in</span> the parameter <span class="hljs-keyword">list</span>.  The convention is to <span class="hljs-keyword">separate</span> <span class="hljs-keyword">local</span><br>       variables from real parameters <span class="hljs-keyword">by</span> extra spaces <span class="hljs-keyword">in</span> the  parameter  <span class="hljs-keyword">list</span>.<br>       <span class="hljs-keyword">For</span> example:<br><br>              function  <span class="hljs-built_in">f</span>(p, q,     a, b)   # a and b are <span class="hljs-keyword">local</span><br>              &#123;<br>                   ...<br>              &#125;<br><br>              /abc/     &#123; ... ; <span class="hljs-built_in">f</span>(1, 2) ; ... &#125;<br><br>       The left parenthesis <span class="hljs-keyword">in</span> a function call is required to immediately fol‐<br>       low the function name, without any intervening whitespace.  This avoids<br>       a  syntactic  ambiguity with the concatenation operator.  This restric‐<br>       tion does not apply to the built-<span class="hljs-keyword">in</span> functions listed above.<br><br>       Functions may call each other and may be recursive.   Function  parame‐<br>       ters used <span class="hljs-keyword">as</span> <span class="hljs-keyword">local</span> variables are initialized to the null string and the<br>       number zero upon function invocation.<br><br>       <span class="hljs-keyword">Use</span> <span class="hljs-keyword">return</span> expr to <span class="hljs-keyword">return</span> a value from a function.  The <span class="hljs-keyword">return</span> value is<br>       undefined <span class="hljs-keyword">if</span> <span class="hljs-keyword">no</span> value is provided, or <span class="hljs-keyword">if</span> the function returns <span class="hljs-keyword">by</span> “fall‐<br>       ing off” the end.<br><br>       <span class="hljs-keyword">As</span> a gawk extension, functions may be called indirectly.  To  <span class="hljs-keyword">do</span>  this,<br>       assign  the  name of the function to be called, <span class="hljs-keyword">as</span> a string, to a vari‐<br>       able.  Then <span class="hljs-keyword">use</span> the variable <span class="hljs-keyword">as</span> <span class="hljs-keyword">if</span> it were the name of a function, pre‐<br>       fixed with <span class="hljs-keyword">an</span> @ sign, like <span class="hljs-keyword">so</span>:<br>              function myfunc()<br>              &#123;<br>                   <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;myfunc called&quot;</span><br>                   ...<br>              &#125;<br><br>              &#123;    ...<br>                   the_func = <span class="hljs-string">&quot;myfunc&quot;</span><br>                   @the_func()    # call through the_func to myfunc<br>                   ...<br>              &#125;<br>       <span class="hljs-keyword">As</span>  of  <span class="hljs-keyword">version</span> 4.1.2, this works with user-defined functions, built-<span class="hljs-keyword">in</span><br>       functions, and extension functions.<br><br>       <span class="hljs-keyword">If</span> --lint has been provided, gawk warns <span class="hljs-keyword">about</span> calls to undefined  func‐<br>       tions  at  <span class="hljs-keyword">parse</span>  time,  instead  of at <span class="hljs-keyword">run</span> time.  Calling <span class="hljs-keyword">an</span> undefined<br>       function at <span class="hljs-keyword">run</span> time is a fatal <span class="hljs-keyword">error</span>.<br><br>       The word func may be used <span class="hljs-keyword">in</span> place of function, although this is depre‐<br>       cated.<br><br>DYNAMICALLY LOADING NEW FUNCTIONS<br>       You  can  dynamically  add  new  built-<span class="hljs-keyword">in</span> functions to the running gawk<br>       interpreter with the @load statement.  The full details are beyond  the<br>       scope of this manual page; see GAWK: Effective AWK Programming.<br><br>SIGNALS<br>       The  gawk  <span class="hljs-keyword">profiler</span>  accepts  <span class="hljs-keyword">two</span> signals.  SIGUSR1 causes it to dump a<br>       profile and function call <span class="hljs-keyword">stack</span> to the profile <span class="hljs-keyword">file</span>,  <span class="hljs-keyword">which</span>  is  either<br>       awkprof.<span class="hljs-keyword">out</span>,  or whatever <span class="hljs-keyword">file</span> was named with the --profile option.  It<br>       then continues to <span class="hljs-keyword">run</span>.  SIGHUP causes gawk  to  dump  the  profile  and<br>       function call <span class="hljs-keyword">stack</span> and then <span class="hljs-keyword">exit</span>.<br><br>INTERNATIONALIZATION<br>       String constants are sequences of characters enclosed <span class="hljs-keyword">in</span> double quotes.<br>       <span class="hljs-keyword">In</span> non-English speaking environments, it is possible to <span class="hljs-keyword">mark</span> strings <span class="hljs-keyword">in</span><br>       the AWK <span class="hljs-keyword">program</span> <span class="hljs-keyword">as</span> requiring translation to the <span class="hljs-keyword">local</span> natural language.<br>       Such strings are marked <span class="hljs-keyword">in</span> the AWK <span class="hljs-keyword">program</span> with  a  leading  underscore<br>       (“_”).  <span class="hljs-keyword">For</span> example,<br><br>              gawk &#x27;BEGIN &#123; <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;hello, world&quot;</span> &#125;&#x27;<br><br>       always prints hello, world.  But,<br><br>              gawk &#x27;BEGIN &#123; <span class="hljs-keyword">print</span> _<span class="hljs-string">&quot;hello, world&quot;</span> &#125;&#x27;<br><br>       might <span class="hljs-keyword">print</span> bonjour, monde <span class="hljs-keyword">in</span> France.<br><br>       There are several steps involved <span class="hljs-keyword">in</span> producing and running a localizable<br>       AWK <span class="hljs-keyword">program</span>.<br><br>       1.  Add a BEGIN action to assign a value to the TEXTDOMAIN variable  to<br>           <span class="hljs-keyword">set</span> the text domain to a name associated with your <span class="hljs-keyword">program</span>:<br><br>                BEGIN &#123; TEXTDOMAIN = <span class="hljs-string">&quot;myprog&quot;</span> &#125;<br><br>           This  allows  gawk  to find the .gmo <span class="hljs-keyword">file</span> associated with your <span class="hljs-keyword">pro</span>‐<br>           gram.  Without this step, gawk uses the messages text domain, <span class="hljs-keyword">which</span><br>           likely does not contain translations <span class="hljs-keyword">for</span> your <span class="hljs-keyword">program</span>.<br><br>       2.  <span class="hljs-keyword">Mark</span>  all  strings  that  should  be translated with leading under‐<br>           scores.<br><br>       3.  <span class="hljs-keyword">If</span> necessary, <span class="hljs-keyword">use</span> the dcgettext() and/or bindtextdomain() functions<br>           <span class="hljs-keyword">in</span> your <span class="hljs-keyword">program</span>, <span class="hljs-keyword">as</span> appropriate.<br><br>       4.  <span class="hljs-keyword">Run</span>  gawk  --<span class="hljs-keyword">gen</span>-pot  -f myprog.awk &gt; myprog.pot to <span class="hljs-keyword">generate</span> a .pot<br>           <span class="hljs-keyword">file</span> <span class="hljs-keyword">for</span> your <span class="hljs-keyword">program</span>.<br><br>       5.  Provide appropriate translations, and build and install the  <span class="hljs-keyword">corre</span>‐<br>           sponding .gmo files.<br><br>       The internationalization features are described <span class="hljs-keyword">in</span> full detail <span class="hljs-keyword">in</span> GAWK:<br>       Effective AWK Programming.<br><br>POSIX COMPATIBILITY<br>       A primary goal <span class="hljs-keyword">for</span> gawk is compatibility with the  POSIX  standard,  <span class="hljs-keyword">as</span><br>       well <span class="hljs-keyword">as</span> with the latest <span class="hljs-keyword">version</span> of Brian Kernighan&#x27;s awk.  To this end,<br>       gawk incorporates the following user visible  features  <span class="hljs-keyword">which</span>  are  not<br>       described  <span class="hljs-keyword">in</span>  the AWK book, but are part of the Brian Kernighan&#x27;s ver‐<br>       sion of awk, and are <span class="hljs-keyword">in</span> the POSIX standard.<br><br>       The book indicates that command <span class="hljs-keyword">line</span> variable assignment  happens  when<br>       awk  would  otherwise  <span class="hljs-keyword">open</span>  the argument <span class="hljs-keyword">as</span> a <span class="hljs-keyword">file</span>, <span class="hljs-keyword">which</span> is after the<br>       BEGIN rule is executed.  However, <span class="hljs-keyword">in</span> earlier implementations, when such<br>       <span class="hljs-keyword">an</span> assignment appeared before any <span class="hljs-keyword">file</span> names, the assignment would hap‐<br>       pen before the BEGIN rule was <span class="hljs-keyword">run</span>.  Applications came to depend <span class="hljs-keyword">on</span> this<br>       “feature.”   When  awk  was  changed to match its documentation, the -v<br>       option <span class="hljs-keyword">for</span> assigning variables before <span class="hljs-keyword">program</span> execution  was  added  to<br>       accommodate  applications  that  depended upon the old behavior.  (This<br>       feature was agreed upon <span class="hljs-keyword">by</span> both  the  Bell  Laboratories  and  the  GNU<br>       developers.)<br><br>       When  processing arguments, gawk uses the special option “--” to signal<br>       the end of arguments.  <span class="hljs-keyword">In</span> compatibility mode, it warns <span class="hljs-keyword">about</span> but other‐<br>       wise  ignores  undefined  options.  <span class="hljs-keyword">In</span> normal operation, such arguments<br>       are passed <span class="hljs-keyword">on</span> to the AWK <span class="hljs-keyword">program</span> <span class="hljs-keyword">for</span> it to process.<br><br>       The AWK book does not define the <span class="hljs-keyword">return</span> value of  srand().   The  POSIX<br>       standard has it <span class="hljs-keyword">return</span> the seed it was using, to allow keeping track of<br>       random number sequences.  Therefore srand() <span class="hljs-keyword">in</span> gawk  also  returns  its<br>       current seed.<br><br>       Other  new features are: The <span class="hljs-keyword">use</span> of multiple -f options (from MKS awk);<br>       the ENVIRON array; the \a, and \v escape sequences (done originally  <span class="hljs-keyword">in</span><br>       gawk  and  fed  back into the Bell Laboratories <span class="hljs-keyword">version</span>); the tolower()<br>       and toupper() built-<span class="hljs-keyword">in</span> functions (from the Bell Laboratories  <span class="hljs-keyword">version</span>);<br>       and  the  ISO  C conversion specifications <span class="hljs-keyword">in</span> printf (done first <span class="hljs-keyword">in</span> the<br>       Bell Laboratories <span class="hljs-keyword">version</span>).<br><br>HISTORICAL FEATURES<br>       There is <span class="hljs-keyword">one</span> feature of historical AWK implementations that  gawk  sup‐<br>       ports:  It  is possible to call the <span class="hljs-built_in">length</span>() built-<span class="hljs-keyword">in</span> function not only<br>       with <span class="hljs-keyword">no</span> argument, but even without parentheses!  Thus,<br><br>              a = length     # Holy Algol 60, Batman!<br><br>       is the same <span class="hljs-keyword">as</span> either of<br><br>              a = <span class="hljs-built_in">length</span>()<br>              a = <span class="hljs-built_in">length</span>(<span class="hljs-variable">$0</span>)<br><br>       Using this feature is poor practice, and gawk issues  a  warning  <span class="hljs-keyword">about</span><br>       its <span class="hljs-keyword">use</span> <span class="hljs-keyword">if</span> --lint is specified <span class="hljs-keyword">on</span> the command <span class="hljs-keyword">line</span>.<br><br>GNU EXTENSIONS<br>       Gawk  has  a  too-large  number  of  extensions to POSIX awk.  They are<br>       described <span class="hljs-keyword">in</span> this section.  All the extensions described  here  can  be<br>       disabled <span class="hljs-keyword">by</span> invoking gawk with the --traditional or --posix options.<br><br>       The following features of gawk are not available <span class="hljs-keyword">in</span> POSIX awk.<br><br>       · <span class="hljs-keyword">No</span>  path  <span class="hljs-keyword">search</span>  is  performed  <span class="hljs-keyword">for</span>  files  named via the -f option.<br>         Therefore the AWKPATH environment variable is not special.<br><br>       · There is <span class="hljs-keyword">no</span> facility <span class="hljs-keyword">for</span> doing <span class="hljs-keyword">file</span> inclusion (gawk&#x27;s @<span class="hljs-keyword">include</span> mecha‐<br>         nism).<br><br>       · There  is <span class="hljs-keyword">no</span> facility <span class="hljs-keyword">for</span> dynamically adding new functions written <span class="hljs-keyword">in</span><br>         C (gawk&#x27;s @load mechanism).<br><br>       · The \x escape sequence.  (Disabled with --posix.)<br><br>       · The ability to  <span class="hljs-keyword">continue</span>  lines  after  ?   and  :.   (Disabled  with<br>         --posix.)<br><br>       · Octal and hexadecimal constants <span class="hljs-keyword">in</span> AWK programs.<br><br>       · The ARGIND, BINMODE, ERRNO, LINT, RT and TEXTDOMAIN variables are not<br>         special.<br><br>       · The IGNORECASE variable and its side-effects are not available.<br><br>       · The FIELDWIDTHS variable and fixed-width field splitting.<br><br>       · The FPAT variable and field splitting based <span class="hljs-keyword">on</span> field values.<br><br>       · The PROCINFO array is not available.<br><br>       · The <span class="hljs-keyword">use</span> of RS <span class="hljs-keyword">as</span> a regular expression.<br><br>       · The special <span class="hljs-keyword">file</span> names available <span class="hljs-keyword">for</span> I/O redirection are  not  recog‐<br>         nized.<br><br>       · The |&amp; operator <span class="hljs-keyword">for</span> creating co-processes.<br><br>       · The BEGINFILE and ENDFILE special patterns are not available.<br><br>       · The  ability to <span class="hljs-keyword">split</span> <span class="hljs-keyword">out</span> individual characters using the null string<br>         <span class="hljs-keyword">as</span> the value of FS, and <span class="hljs-keyword">as</span> the third argument to <span class="hljs-keyword">split</span>().<br><br>       · <span class="hljs-keyword">An</span> optional fourth argument  to  <span class="hljs-keyword">split</span>()  to  receive  the  separator<br>         texts.<br><br>       · The optional second argument to the <span class="hljs-keyword">close</span>() function.<br><br>       · The optional third argument to the <span class="hljs-built_in">match</span>() function.<br><br>       · The ability to <span class="hljs-keyword">use</span> positional specifiers with printf and sprintf().<br><br>       · The ability to pass <span class="hljs-keyword">an</span> array to <span class="hljs-built_in">length</span>().<br><br>       · The and(), asort(), asorti(), bindtextdomain(), compl(), dcgettext(),<br>         dcngettext(),  gensub(),  lshift(),   mktime(),   or(),   patsplit(),<br>         rshift(), strftime(), strtonum(), systime() and xor() functions.<br><br>       · Localizable strings.<br><br>       The  AWK book does not define the <span class="hljs-keyword">return</span> value of the <span class="hljs-keyword">close</span>() function.<br>       Gawk&#x27;s <span class="hljs-keyword">close</span>() returns the value from  fclose(3),  or  pclose(3),  when<br>       closing <span class="hljs-keyword">an</span> output <span class="hljs-keyword">file</span> or pipe, respectively.  It returns the process&#x27;s<br>       <span class="hljs-keyword">exit</span> status when closing <span class="hljs-keyword">an</span> <span class="hljs-keyword">input</span> pipe.  The <span class="hljs-keyword">return</span> value is -1 <span class="hljs-keyword">if</span>  the<br>       named <span class="hljs-keyword">file</span>, pipe or co-process was not opened with a redirection.<br><br>       When  gawk is invoked with the --traditional option, <span class="hljs-keyword">if</span> the fs argument<br>       to the -F option is “t”, then FS is <span class="hljs-keyword">set</span> to  the  <span class="hljs-keyword">tab</span>  character.   <span class="hljs-keyword">Note</span><br>       that  typing  gawk  -F\t ...  simply causes the <span class="hljs-keyword">shell</span> to quote the “t,”<br>       and does not pass “\t” to the -F option.  Since this is a  rather  ugly<br>       special  case, it is not the default behavior.  This behavior also does<br>       not occur <span class="hljs-keyword">if</span> --posix has been specified.  To really get a <span class="hljs-keyword">tab</span> character<br>       <span class="hljs-keyword">as</span>  the  field  separator, it is best to <span class="hljs-keyword">use</span> single quotes: gawk -F&#x27;\t&#x27;<br>       ....<br><br>ENVIRONMENT VARIABLES<br>       The AWKPATH environment variable can be  used  to  provide  a  <span class="hljs-keyword">list</span>  of<br>       directories that gawk searches when looking <span class="hljs-keyword">for</span> files named via the -f,<br>       --<span class="hljs-keyword">file</span>, -i and --<span class="hljs-keyword">include</span> options.  <span class="hljs-keyword">If</span> the  initial  <span class="hljs-keyword">search</span>  fails,  the<br>       path is searched again after appending .awk to the filename.<br><br>       The  AWKLIBPATH  environment  variable can be used to provide a <span class="hljs-keyword">list</span> of<br>       directories that gawk searches when looking <span class="hljs-keyword">for</span> files named via the  -<span class="hljs-keyword">l</span><br>       and --load options.<br><br>       The  GAWK_READ_TIMEOUT  environment  variable  can be used to specify a<br>       timeout <span class="hljs-keyword">in</span> milliseconds <span class="hljs-keyword">for</span> reading <span class="hljs-keyword">input</span> from a terminal, pipe or <span class="hljs-keyword">two</span>-<br>       way communication including sockets.<br><br>       <span class="hljs-keyword">For</span>  connection to a remote host via socket, GAWK_SOCK_RETRIES controls<br>       the number of retries, and GAWK_MSEC_SLEEP  and  the  interval  between<br>       retries.   The interval is <span class="hljs-keyword">in</span> milliseconds. <span class="hljs-keyword">On</span> systems that <span class="hljs-keyword">do</span> not sup‐<br>       port usleep(3), the value is rounded up to <span class="hljs-keyword">an</span> integral number  of  sec‐<br>       onds.<br><br>       <span class="hljs-keyword">If</span> POSIXLY_CORRECT exists <span class="hljs-keyword">in</span> the environment, then gawk behaves exactly<br>       <span class="hljs-keyword">as</span> <span class="hljs-keyword">if</span> --posix had been specified <span class="hljs-keyword">on</span> the command <span class="hljs-keyword">line</span>.   <span class="hljs-keyword">If</span>  --lint  has<br>       been specified, gawk issues a warning message to this effect.<br><br><span class="hljs-keyword">EXIT</span> STATUS<br>       <span class="hljs-keyword">If</span>  the  <span class="hljs-keyword">exit</span>  statement is used with a value, then gawk exits with the<br>       numeric value given to it.<br><br>       Otherwise, <span class="hljs-keyword">if</span> there were <span class="hljs-keyword">no</span> problems during execution, gawk exits  with<br>       the value of the C constant EXIT_SUCCESS.  This is usually zero.<br><br>       <span class="hljs-keyword">If</span>  <span class="hljs-keyword">an</span>  <span class="hljs-keyword">error</span>  occurs,  gawk  exits  with  the  value of the C constant<br>       EXIT_FAILURE.  This is usually <span class="hljs-keyword">one</span>.<br><br>       <span class="hljs-keyword">If</span> gawk exits because of a fatal <span class="hljs-keyword">error</span>, the <span class="hljs-keyword">exit</span> status is 2.  <span class="hljs-keyword">On</span>  non-<br>       POSIX systems, this value may be mapped to EXIT_FAILURE.<br><br><span class="hljs-keyword">VERSION</span> INFORMATION<br>       This <span class="hljs-keyword">man</span> page documents gawk, <span class="hljs-keyword">version</span> 4.1.<br><br>AUTHORS<br>       The original <span class="hljs-keyword">version</span> of UNIX awk was designed and implemented <span class="hljs-keyword">by</span> Alfred<br>       Aho, Peter Weinberger, and Brian Kernighan of Bell Laboratories.  Brian<br>       Kernighan continues to maintain and enhance it.<br><br>       Paul  Rubin  and  Jay  Fenlason, of the Free Software Foundation, wrote<br>       gawk, to be compatible with the original <span class="hljs-keyword">version</span> of awk distributed  <span class="hljs-keyword">in</span><br>       Seventh  Edition  UNIX.   John Woods contributed a number of bug fixes.<br>       David Trueman, with contributions from Arnold Robbins, made  gawk  com‐<br>       patible  with  the new <span class="hljs-keyword">version</span> of UNIX awk.  Arnold Robbins is the cur‐<br>       rent maintainer.<br><br>       See GAWK: Effective AWK Programming <span class="hljs-keyword">for</span> a full <span class="hljs-keyword">list</span> of the contributors<br>       to gawk and its documentation.<br><br>       See the README <span class="hljs-keyword">file</span> <span class="hljs-keyword">in</span> the gawk distribution <span class="hljs-keyword">for</span> up-to-date information<br>       <span class="hljs-keyword">about</span> maintainers and <span class="hljs-keyword">which</span> ports are currently supported.<br><br>BUG REPORTS<br>       <span class="hljs-keyword">If</span> you find a  bug  <span class="hljs-keyword">in</span>  gawk,  please  send  electronic  mail  to  bug-<br>       gawk@gnu.org.   Please  <span class="hljs-keyword">include</span> your operating system and its revision,<br>       the <span class="hljs-keyword">version</span> of gawk (from gawk --<span class="hljs-keyword">version</span>), <span class="hljs-keyword">which</span> C compiler you used to<br>       compile  it,  and a <span class="hljs-keyword">test</span> <span class="hljs-keyword">program</span> and data that are <span class="hljs-keyword">as</span> small <span class="hljs-keyword">as</span> possible<br>       <span class="hljs-keyword">for</span> reproducing the problem.<br><br>       Before sending a bug <span class="hljs-keyword">report</span>, please <span class="hljs-keyword">do</span> the  following  things.   First,<br>       verify  that  you  have the latest <span class="hljs-keyword">version</span> of gawk.  Many bugs (usually<br>       subtle ones) are fixed at each release, and <span class="hljs-keyword">if</span> yours is  <span class="hljs-keyword">out</span>  of  date,<br>       the  problem  may already have been solved.  Second, please see <span class="hljs-keyword">if</span> <span class="hljs-keyword">set</span>‐<br>       ting the environment variable  LC_ALL  to  LC_ALL=C  causes  things  to<br>       behave  <span class="hljs-keyword">as</span>  you  expect. <span class="hljs-keyword">If</span> <span class="hljs-keyword">so</span>, it&#x27;s a locale issue, and may or may not<br>       really be a bug.  Finally, please <span class="hljs-keyword">read</span> this <span class="hljs-keyword">man</span> page and the  reference<br>       manual  carefully  to  be  sure that what you think is a bug really is,<br>       instead of just a quirk <span class="hljs-keyword">in</span> the language.<br><br>       Whatever you <span class="hljs-keyword">do</span>, <span class="hljs-keyword">do</span> NOT <span class="hljs-keyword">post</span> a bug <span class="hljs-keyword">report</span> <span class="hljs-keyword">in</span> comp.lang.awk.  <span class="hljs-keyword">While</span>  the<br>       gawk  developers  occasionally <span class="hljs-keyword">read</span> this newsgroup, posting bug reports<br>       there is <span class="hljs-keyword">an</span> unreliable way to <span class="hljs-keyword">report</span> bugs.   Instead,  please  <span class="hljs-keyword">use</span>  the<br>       electronic mail addresses given above.  Really.<br><br>       <span class="hljs-keyword">If</span> you&#x27;re using a GNU/Linux or BSD-based system, you may wish to submit<br>       a bug <span class="hljs-keyword">report</span> to the vendor of  your  distribution.   That&#x27;s  fine,  but<br>       please send a <span class="hljs-keyword">copy</span> to the official email address <span class="hljs-keyword">as</span> well, since there&#x27;s<br>       <span class="hljs-keyword">no</span> guarantee that the bug <span class="hljs-keyword">report</span> will be forwarded to  the  gawk  main‐<br>       tainer.<br><br>BUGS<br>       The  -F option is not necessary given the command <span class="hljs-keyword">line</span> variable assign‐<br>       ment feature; it remains only <span class="hljs-keyword">for</span> backwards compatibility.<br><br>SEE ALSO<br>       egrep(1),  sed(1),  getpid(2),   getppid(2),   getpgrp(2),   getuid(2),<br>       geteuid(2), getgid(2), getegid(2), getgroups(2), usleep(3)<br><br>       The  AWK Programming Language, Alfred V. Aho, Brian W. Kernighan, Peter<br>       J. Weinberger, Addison-Wesley, 1988.  ISBN 0-201-07981-X.<br><br>       GAWK: Effective AWK Programming, Edition 4.1,  shipped  with  the  gawk<br>       source.   The  current  <span class="hljs-keyword">version</span> of this document is available online at<br>       http:<span class="hljs-comment">//www.gnu.org/software/gawk/manual.</span><br><br>EXAMPLES<br>       <span class="hljs-keyword">Print</span> and <span class="hljs-keyword">sort</span> the login names of all users:<br><br>            BEGIN     &#123; FS = <span class="hljs-string">&quot;:&quot;</span> &#125;<br>                 &#123; <span class="hljs-keyword">print</span> <span class="hljs-variable">$1</span> | <span class="hljs-string">&quot;sort&quot;</span> &#125;<br><br>       <span class="hljs-keyword">Count</span> lines <span class="hljs-keyword">in</span> a <span class="hljs-keyword">file</span>:<br><br>                 &#123; nlines++ &#125;<br>            END  &#123; <span class="hljs-keyword">print</span> nlines &#125;<br><br>       Precede each <span class="hljs-keyword">line</span> <span class="hljs-keyword">by</span> its number <span class="hljs-keyword">in</span> the <span class="hljs-keyword">file</span>:<br><br>            &#123; <span class="hljs-keyword">print</span> FNR, <span class="hljs-variable">$0</span> &#125;<br><br>       Concatenate and <span class="hljs-keyword">line</span> number (a variation <span class="hljs-keyword">on</span> a theme):<br><br>            &#123; <span class="hljs-keyword">print</span> NR, <span class="hljs-variable">$0</span> &#125;<br><br>       <span class="hljs-keyword">Run</span> <span class="hljs-keyword">an</span> external command <span class="hljs-keyword">for</span> particular lines of data:<br><br>            tail -f access_log |<br>            awk &#x27;/myhome.html/ &#123; system(<span class="hljs-string">&quot;nmap &quot;</span> <span class="hljs-variable">$1</span> <span class="hljs-string">&quot;&gt;&gt; logdir/myhome.html&quot;</span>) &#125;&#x27;<br><br>ACKNOWLEDGEMENTS<br>       Brian Kernighan provided valuable assistance during testing and  debug‐<br>       ging.  We thank him.<br><br>COPYING PERMISSIONS<br>       <span class="hljs-keyword">Copyright</span> © 1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,<br>       2001, 2002, 2003, 2004, 2005, 2007, 2009, 2010, 2011, 2012, 2013,  2014<br>       Free Software Foundation, Inc.<br><br>       Permission  is  granted  to make and distribute verbatim copies of this<br>       manual page provided the <span class="hljs-keyword">copyright</span> notice and  this  permission  notice<br>       are preserved <span class="hljs-keyword">on</span> all copies.<br><br>       Permission  is granted to <span class="hljs-keyword">copy</span> and distribute modified versions of this<br>       manual page under the conditions <span class="hljs-keyword">for</span> verbatim  copying,  provided  that<br>       the  entire  resulting derived work is distributed under the terms of a<br>       permission notice identical to this <span class="hljs-keyword">one</span>.<br><br>       Permission is granted to <span class="hljs-keyword">copy</span> and distribute translations of this  <span class="hljs-keyword">man</span>‐<br>       ual page into another language, under the above conditions <span class="hljs-keyword">for</span> modified<br>       versions, except that this permission notice may be stated <span class="hljs-keyword">in</span> a  trans‐<br>       lation approved <span class="hljs-keyword">by</span> the Foundation.<br><br>Free Software Foundation          Aug 03 2014                          GAWK(1)<br></code></pre></td></tr></table></figure><hr><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><code class="hljs stata">SED(1)                           User Commands                          SED(1)<br><br>NAME<br>       sed - stream editor <span class="hljs-keyword">for</span> filtering and transforming text<br><br>SYNOPSIS<br>       sed [OPTION]... &#123;script-only-<span class="hljs-keyword">if</span>-<span class="hljs-keyword">no</span>-other-script&#125; [<span class="hljs-keyword">input</span>-<span class="hljs-keyword">file</span>]...<br><br>DESCRIPTION<br>       Sed  is a stream editor.  A stream editor is used to perform basic text<br>       transformations <span class="hljs-keyword">on</span> <span class="hljs-keyword">an</span> <span class="hljs-keyword">input</span> stream (a <span class="hljs-keyword">file</span> or <span class="hljs-keyword">input</span> from  a  pipeline).<br>       <span class="hljs-keyword">While</span>  <span class="hljs-keyword">in</span>  some  ways similar to <span class="hljs-keyword">an</span> editor <span class="hljs-keyword">which</span> permits scripted edits<br>       (such <span class="hljs-keyword">as</span> <span class="hljs-keyword">ed</span>), sed works <span class="hljs-keyword">by</span> making only <span class="hljs-keyword">one</span> pass over the <span class="hljs-keyword">input</span>(s),  and<br>       is consequently <span class="hljs-keyword">more</span> efficient.  But it is sed&#x27;s ability to filter text<br>       <span class="hljs-keyword">in</span> a pipeline <span class="hljs-keyword">which</span> particularly distinguishes it from other  types  of<br>       editors.<br><br>       -<span class="hljs-keyword">n</span>, --quiet, --silent<br><br>              suppress automatic printing of pattern space<br><br>       -<span class="hljs-keyword">e</span> script, --expression=script<br><br>              add the script to the commands to be executed<br><br>       -f script-<span class="hljs-keyword">file</span>, --<span class="hljs-keyword">file</span>=script-<span class="hljs-keyword">file</span><br><br>              add the contents of script-<span class="hljs-keyword">file</span> to the commands to be executed<br><br>       --follow-symlinks<br><br>              follow symlinks when processing <span class="hljs-keyword">in</span> place<br><br>       -i[SUFFIX], --<span class="hljs-keyword">in</span>-place[=SUFFIX]<br><br>              <span class="hljs-keyword">edit</span> files <span class="hljs-keyword">in</span> place (makes backup <span class="hljs-keyword">if</span> SUFFIX supplied)<br><br>       -<span class="hljs-keyword">l</span> <span class="hljs-keyword">N</span>, --<span class="hljs-keyword">line</span>-length=<span class="hljs-keyword">N</span><br><br>              specify the desired <span class="hljs-keyword">line</span>-wrap length <span class="hljs-keyword">for</span> the <span class="hljs-symbol">`l&#x27;</span> command<br><br>       --posix<br><br>              disable all GNU extensions.<br><br>       -r, --regexp-extended<br><br>              <span class="hljs-keyword">use</span> extended regular expressions <span class="hljs-keyword">in</span> the script.<br><br>       -s, --<span class="hljs-keyword">separate</span><br><br>              consider  files  <span class="hljs-keyword">as</span>  <span class="hljs-keyword">separate</span> rather than <span class="hljs-keyword">as</span> a single continuous<br>              long stream.<br><br>       -<span class="hljs-keyword">u</span>, --unbuffered<br><br>              load minimal amounts of data from the <span class="hljs-keyword">input</span> files and flush  the<br>              output buffers <span class="hljs-keyword">more</span> often<br><br>       -z, --null-data<br><br>              <span class="hljs-keyword">separate</span> lines <span class="hljs-keyword">by</span> NUL characters<br><br>       --<span class="hljs-keyword">help</span><br>              <span class="hljs-keyword">display</span> this <span class="hljs-keyword">help</span> and <span class="hljs-keyword">exit</span><br><br>       --<span class="hljs-keyword">version</span><br>              output <span class="hljs-keyword">version</span> information and <span class="hljs-keyword">exit</span><br><br>       <span class="hljs-keyword">If</span>  <span class="hljs-keyword">no</span>  -<span class="hljs-keyword">e</span>, --expression, -f, or --<span class="hljs-keyword">file</span> option is given, then the first<br>       non-option argument is taken <span class="hljs-keyword">as</span>  the  sed  script  to  interpret.   All<br>       remaining  arguments  are  names  of <span class="hljs-keyword">input</span> files; <span class="hljs-keyword">if</span> <span class="hljs-keyword">no</span> <span class="hljs-keyword">input</span> files are<br>       specified, then the standard <span class="hljs-keyword">input</span> is <span class="hljs-keyword">read</span>.<br><br>       GNU sed home page:  &lt;http:<span class="hljs-comment">//www.gnu.org/software/sed/&gt;.   General  help</span><br>       using  GNU software: &lt;http:<span class="hljs-comment">//www.gnu.org/gethelp/&gt;.  E-mail bug reports</span><br>       to: &lt;bug-sed@gnu.org&gt;.  Be sure to <span class="hljs-keyword">include</span> the word  `<span class="hljs-symbol">`sed&#x27;</span>&#x27;  somewhere<br>       <span class="hljs-keyword">in</span> the ``Subject:&#x27;&#x27; field.<br><br>COMMAND SYNOPSIS<br>       This is just a brief synopsis of sed commands to serve <span class="hljs-keyword">as</span> a reminder to<br>       those who already know sed; other documentation (such  <span class="hljs-keyword">as</span>  the  texinfo<br>       document) must be consulted <span class="hljs-keyword">for</span> fuller descriptions.<br><br>   Zero-address `<span class="hljs-symbol">`commands&#x27;</span>&#x27;<br>       : <span class="hljs-keyword">label</span><br>              <span class="hljs-keyword">Label</span> <span class="hljs-keyword">for</span> b and t commands.<br><br>       #comment<br>              The  comment  extends until the next newline (or the end of a -<span class="hljs-keyword">e</span><br>              script fragment).<br><br>       &#125;      The closing bracket of a &#123; &#125; block.<br><br>   Zero- or <span class="hljs-keyword">One</span>- address commands<br>       =      <span class="hljs-keyword">Print</span> the current <span class="hljs-keyword">line</span> number.<br><br>       a \<br><br>       text   <span class="hljs-keyword">Append</span> text, <span class="hljs-keyword">which</span> has each embedded newline preceded <span class="hljs-keyword">by</span> a back‐<br>              slash.<br><br>       i \<br><br>       text   Insert text, <span class="hljs-keyword">which</span> has each embedded newline preceded <span class="hljs-keyword">by</span> a back‐<br>              slash.<br><br>       q [<span class="hljs-keyword">exit</span>-code]<br>              Immediately quit the sed  script  without  processing  any  <span class="hljs-keyword">more</span><br>              <span class="hljs-keyword">input</span>,  except  that  <span class="hljs-keyword">if</span>  auto-<span class="hljs-keyword">print</span> is not disabled the current<br>              pattern space will be printed.  The <span class="hljs-keyword">exit</span> code argument is a  GNU<br>              extension.<br><br>       Q [<span class="hljs-keyword">exit</span>-code]<br>              Immediately  quit  the  sed  script  without processing any <span class="hljs-keyword">more</span><br>              <span class="hljs-keyword">input</span>.  This is a GNU extension.<br><br>       r filename<br>              <span class="hljs-keyword">Append</span> text <span class="hljs-keyword">read</span> from filename.<br><br>       R filename<br>              <span class="hljs-keyword">Append</span> a <span class="hljs-keyword">line</span> <span class="hljs-keyword">read</span> from filename.  Each invocation of  the  com‐<br>              mand reads a <span class="hljs-keyword">line</span> from the <span class="hljs-keyword">file</span>.  This is a GNU extension.<br><br>   Commands <span class="hljs-keyword">which</span> accept address ranges<br>       &#123;      Begin a block of commands (end with a &#125;).<br><br>       b <span class="hljs-keyword">label</span><br>              Branch to <span class="hljs-keyword">label</span>; <span class="hljs-keyword">if</span> <span class="hljs-keyword">label</span> is omitted, branch to end of script.<br><br>       c \<br><br>       text   <span class="hljs-keyword">Replace</span>  the  selected  lines with text, <span class="hljs-keyword">which</span> has each embedded<br>              newline preceded <span class="hljs-keyword">by</span> a backslash.<br><br>       <span class="hljs-keyword">d</span>      Delete pattern space.  Start next cycle.<br><br>       <span class="hljs-keyword">D</span>      <span class="hljs-keyword">If</span> pattern space contains <span class="hljs-keyword">no</span> newline, start a normal  new  cycle<br>              <span class="hljs-keyword">as</span>  <span class="hljs-keyword">if</span>  the <span class="hljs-keyword">d</span> command was issued.  Otherwise, delete text <span class="hljs-keyword">in</span> the<br>              pattern space up to the first newline, and  restart  cycle  with<br>              the  resultant  pattern  space,  without  reading  a new <span class="hljs-keyword">line</span> of<br>              <span class="hljs-keyword">input</span>.<br><br>       <span class="hljs-keyword">h</span> <span class="hljs-keyword">H</span>    <span class="hljs-keyword">Copy</span>/<span class="hljs-keyword">append</span> pattern space to hold space.<br><br>       <span class="hljs-keyword">g</span> <span class="hljs-keyword">G</span>    <span class="hljs-keyword">Copy</span>/<span class="hljs-keyword">append</span> hold space to pattern space.<br><br>       <span class="hljs-keyword">l</span>      <span class="hljs-keyword">List</span> <span class="hljs-keyword">out</span> the current <span class="hljs-keyword">line</span> <span class="hljs-keyword">in</span> a ``visually unambiguous&#x27;&#x27; <span class="hljs-keyword">form</span>.<br><br>       <span class="hljs-keyword">l</span> width<br>              <span class="hljs-keyword">List</span> <span class="hljs-keyword">out</span> the current <span class="hljs-keyword">line</span> <span class="hljs-keyword">in</span> a  ``visually  unambiguous&#x27;&#x27;  <span class="hljs-keyword">form</span>,<br>              breaking it at width characters.  This is a GNU extension.<br><br>       <span class="hljs-keyword">n</span> <span class="hljs-keyword">N</span>    <span class="hljs-keyword">Read</span>/<span class="hljs-keyword">append</span> the next <span class="hljs-keyword">line</span> of <span class="hljs-keyword">input</span> into the pattern space.<br><br>       p      <span class="hljs-keyword">Print</span> the current pattern space.<br><br>       P      <span class="hljs-keyword">Print</span>  up  to  the first embedded newline of the current pattern<br>              space.<br><br>       s/regexp/replacement/<br>              Attempt to match regexp against the pattern space.  <span class="hljs-keyword">If</span>  success‐<br>              ful,   <span class="hljs-keyword">replace</span>  that  portion  matched  with  replacement.   The<br>              replacement may contain the special character &amp; to refer to that<br>              portion  of  the  pattern  space  <span class="hljs-keyword">which</span> matched, and the special<br>              escapes \1 through \9 to refer  to  the  corresponding  matching<br>              sub-expressions <span class="hljs-keyword">in</span> the regexp.<br><br>       t <span class="hljs-keyword">label</span><br>              <span class="hljs-keyword">If</span>  a  s<span class="hljs-comment">///  has  done  a successful substitution since the last</span><br>              <span class="hljs-keyword">input</span> <span class="hljs-keyword">line</span> was <span class="hljs-keyword">read</span> and since the last  t  or  T  command,  then<br>              branch to <span class="hljs-keyword">label</span>; <span class="hljs-keyword">if</span> <span class="hljs-keyword">label</span> is omitted, branch to end of script.<br><br>       T <span class="hljs-keyword">label</span><br>              <span class="hljs-keyword">If</span>  <span class="hljs-keyword">no</span>  s<span class="hljs-comment">///  has  done a successful substitution since the last</span><br>              <span class="hljs-keyword">input</span> <span class="hljs-keyword">line</span> was <span class="hljs-keyword">read</span> and since the last  t  or  T  command,  then<br>              branch  to  <span class="hljs-keyword">label</span>; <span class="hljs-keyword">if</span> <span class="hljs-keyword">label</span> is omitted, branch to end of script.<br>              This is a GNU extension.<br><br>       w filename<br>              Write the current pattern space to filename.<br><br>       W filename<br>              Write the first <span class="hljs-keyword">line</span> of the current pattern space  to  filename.<br>              This is a GNU extension.<br><br>       x      Exchange the contents of the hold and pattern spaces.<br><br>       y/source/dest/<br>              Transliterate  the  characters <span class="hljs-keyword">in</span> the pattern space <span class="hljs-keyword">which</span> appear<br>              <span class="hljs-keyword">in</span> source to the corresponding character <span class="hljs-keyword">in</span> dest.<br><br>Addresses<br>       Sed commands can be given with <span class="hljs-keyword">no</span> addresses, <span class="hljs-keyword">in</span> <span class="hljs-keyword">which</span> case the  command<br>       will  be  executed <span class="hljs-keyword">for</span> all <span class="hljs-keyword">input</span> lines; with <span class="hljs-keyword">one</span> address, <span class="hljs-keyword">in</span> <span class="hljs-keyword">which</span> case<br>       the command will only be executed <span class="hljs-keyword">for</span>  <span class="hljs-keyword">input</span>  lines  <span class="hljs-keyword">which</span>  match  that<br>       address;  or with <span class="hljs-keyword">two</span> addresses, <span class="hljs-keyword">in</span> <span class="hljs-keyword">which</span> case the command will be exe‐<br>       cuted <span class="hljs-keyword">for</span> all <span class="hljs-keyword">input</span> lines <span class="hljs-keyword">which</span> match  the  inclusive  <span class="hljs-keyword">range</span>  of  lines<br>       starting  from  the first address and continuing to the second address.<br>       Three things to <span class="hljs-keyword">note</span> <span class="hljs-keyword">about</span> address ranges: the  <span class="hljs-keyword">syntax</span>  is  addr1,addr2<br>       (i.<span class="hljs-keyword">e</span>.,  the  addresses  are separated <span class="hljs-keyword">by</span> a comma); the <span class="hljs-keyword">line</span> <span class="hljs-keyword">which</span> addr1<br>       matched will always be accepted, even <span class="hljs-keyword">if</span> addr2 selects <span class="hljs-keyword">an</span> earlier <span class="hljs-keyword">line</span>;<br>       and  <span class="hljs-keyword">if</span>  addr2 is a regexp, it will not be tested against the <span class="hljs-keyword">line</span> that<br>       addr1 matched.<br><br>       After the address (or address-<span class="hljs-keyword">range</span>), and before the command, a !   may<br>       be inserted, <span class="hljs-keyword">which</span> specifies that the command shall only be executed <span class="hljs-keyword">if</span><br>       the address (or address-<span class="hljs-keyword">range</span>) does not match.<br><br>       The following address types are supported:<br><br>       number Match only the specified <span class="hljs-keyword">line</span> number (<span class="hljs-keyword">which</span>  increments  cumula‐<br>              tively  across  files,  unless the -s option is specified <span class="hljs-keyword">on</span> the<br>              command <span class="hljs-keyword">line</span>).<br><br>       first~step<br>              Match every step&#x27;th <span class="hljs-keyword">line</span> starting with <span class="hljs-keyword">line</span> first.  <span class="hljs-keyword">For</span> example,<br>              ``sed  -<span class="hljs-keyword">n</span>  1~2p&#x27;&#x27;  will  <span class="hljs-keyword">print</span> all the odd-numbered lines <span class="hljs-keyword">in</span> the<br>              <span class="hljs-keyword">input</span> stream, and the address 2~5 will match every  fifth  <span class="hljs-keyword">line</span>,<br>              starting  with the second.  first can be zero; <span class="hljs-keyword">in</span> this case, sed<br>              operates <span class="hljs-keyword">as</span> <span class="hljs-keyword">if</span> it were equal to step.  (This is <span class="hljs-keyword">an</span> extension.)<br><br>       $      Match the last <span class="hljs-keyword">line</span>.<br><br>       /regexp/<br>              Match lines matching the regular expression regexp.<br><br>       \cregexpc<br>              Match lines matching the regular expression regexp.  The  c  may<br>              be any character.<br><br>       GNU sed also supports some special 2-address forms:<br><br>       0,addr2<br>              Start  <span class="hljs-keyword">out</span>  <span class="hljs-keyword">in</span>  <span class="hljs-string">&quot;matched  first  address&quot;</span>  state, until addr2 is<br>              found.  This is similar to 1,addr2, except that <span class="hljs-keyword">if</span> addr2 matches<br>              the very first <span class="hljs-keyword">line</span> of <span class="hljs-keyword">input</span> the 0,addr2 <span class="hljs-keyword">form</span> will be at the end<br>              of its <span class="hljs-keyword">range</span>, whereas the 1,addr2 <span class="hljs-keyword">form</span>  will  still  be  at  the<br>              beginning of its <span class="hljs-keyword">range</span>.  This works only when addr2 is a regular<br>              expression.<br><br>       addr1,+<span class="hljs-keyword">N</span><br>              Will match addr1 and the <span class="hljs-keyword">N</span> lines following addr1.<br><br>       addr1,~<span class="hljs-keyword">N</span><br>              Will match addr1 and the lines following addr1  until  the  next<br>              <span class="hljs-keyword">line</span> whose <span class="hljs-keyword">input</span> <span class="hljs-keyword">line</span> number is a multiple of <span class="hljs-keyword">N</span>.<br><br>REGULAR EXPRESSIONS<br>       POSIX.2 BREs should be supported, but they aren&#x27;t completely because of<br>       performance problems.  The \<span class="hljs-keyword">n</span> sequence <span class="hljs-keyword">in</span> a regular expression  matches<br>       the newline character, and similarly <span class="hljs-keyword">for</span> \a, \t, and other sequences.<br><br>BUGS<br>       <span class="hljs-keyword">E</span>-mail bug reports to bug-sed@gnu.org.  Also, please <span class="hljs-keyword">include</span> the output<br>       of ``sed --<span class="hljs-keyword">version</span>&#x27;&#x27; <span class="hljs-keyword">in</span> the body of your <span class="hljs-keyword">report</span> <span class="hljs-keyword">if</span> at all possible.<br><br>AUTHOR<br>       Written <span class="hljs-keyword">by</span> Jay Fenlason, Tom Lord, Ken Pizzini, and Paolo Bonzini.  GNU<br>       sed  home page: &lt;http:<span class="hljs-comment">//www.gnu.org/software/sed/&gt;.  General help using</span><br>       GNU software: &lt;http:<span class="hljs-comment">//www.gnu.org/gethelp/&gt;.  E-mail  bug  reports  to:</span><br>       &lt;bug-sed@gnu.org&gt;.   Be  sure  to <span class="hljs-keyword">include</span> the word `<span class="hljs-symbol">`sed&#x27;</span>&#x27; somewhere <span class="hljs-keyword">in</span><br>       the ``Subject:&#x27;&#x27; field.<br><br><span class="hljs-keyword">COPYRIGHT</span><br>       <span class="hljs-keyword">Copyright</span> © 2012 Free Software Foundation, Inc.   License  GPLv3+:  GNU<br>       GPL <span class="hljs-keyword">version</span> 3 or later &lt;http:<span class="hljs-comment">//gnu.org/licenses/gpl.html&gt;.</span><br>       This  is  free  software:  you  are free to change and redistribute it.<br>       There is <span class="hljs-keyword">NO</span> WARRANTY, to the extent permitted <span class="hljs-keyword">by</span> law.<br><br>SEE ALSO<br>       awk(1), <span class="hljs-keyword">ed</span>(1), grep(1), tr(1),  perlre(1),  sed.info,  any  of  various<br>       books <span class="hljs-keyword">on</span> sed, the sed FAQ (http:<span class="hljs-comment">//sed.sf.net/grabbag/tutorials/sed‐</span><br>       faq.txt), http:<span class="hljs-comment">//sed.sf.net/grabbag/.</span><br><br>       The full documentation <span class="hljs-keyword">for</span> sed is maintained <span class="hljs-keyword">as</span> a Texinfo manual.  <span class="hljs-keyword">If</span><br>       the info and sed programs are properly installed at your site, the com‐<br>       mand<br><br>              info sed<br><br>       should give you access to the complete manual.<br><br>sed 4.2.2                        February 2016                          SED(1)<br></code></pre></td></tr></table></figure><hr><h3 id="文本编辑常用命令"><a href="#文本编辑常用命令" class="headerlink" title="文本编辑常用命令"></a>文本编辑常用命令</h3><ul><li>cat -b显示行号</li><li>ed　行文本编辑器</li><li>fmt　重排</li><li>gedit　</li><li>jed　ed改进</li><li>cut　cat改进</li><li>colrm　</li><li>comm</li><li>od</li><li>joe</li><li>aspell　检查拼写</li><li>col</li><li>view　只读</li><li>more　分屏</li><li>head　部分显示</li><li>cmp　文件属性比较</li><li>diff　文件内容比较</li><li>diffstat　</li><li>patch</li><li>csplit　按行数分割</li><li>uniq　显示重复出现的行</li><li>pr　</li><li>pico</li><li>tail　末尾</li><li>tac　反序</li><li>less</li><li>sort　排序</li><li>indent</li><li>tr</li><li>join</li><li>spell</li><li>tee　读取标准输入到标准输出或文件</li><li>wc　统计文本信息</li></ul><hr><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>说好的总结基础，最后还是复制粘贴，毕竟时间宝贵，前人总结好的东西拿来用就是了，想起来一个段子：</p><blockquote><p>人生苦短，要学Python</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无序数组中找到第二大的数</title>
    <link href="/posts/59684/"/>
    <url>/posts/59684/</url>
    
    <content type="html"><![CDATA[<p>这是一道简单的面试题，要求时间复杂度为O(n)，很顺利的想到用两个值存储，以空间换时间，进阶可以使用快速排序的分治思想取巧。</p><span id="more"></span><hr><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>首先，引用一段话：</p><blockquote><p>好了，让我们来看一个示例（这个示例是昨天在微博上的一个讨论），这个题是——“找出无序数组中第2大的数”，几乎所有的人都用了O(n)的算法，我相信对于我们这些应试教育出来的人来说，不用排序用O(n)算法是很正常的事，连我都不由自主地认为O(n)算法是这个题的标准答案。我们太习惯于标准答案了，这是我国教育最悲哀的地方。（广义的洗脑就是让你的意识依赖于某个标准答案，然后通过给你标准答案让你不会思考而控制你）</p></blockquote><p>题为<a href="http://coolshell.cn/articles/8138.html/">为什么我反对纯算法面试题</a>，作者是陈皓，写于2012年。</p><p>这个“学院派”和“工程师”的争论的问题在下面的评论区里已经展示的淋漓尽致，同样一个题还会出现在2016年秋季校招上，为什么我一点也不奇怪呢。</p><p>不谈支持与否，作者关于工程的观点还是十分精辟的：</p><blockquote><p>根据上面的需求分析，有软件工程经验的人的解法通常会这样：</p></blockquote><blockquote><p>  1）把数组排序，从大到小。</p></blockquote><blockquote><p>  2）于是你要第k大的数，就直接访问 array[k]。</p></blockquote><blockquote><p>  排序只需要一次，O(n*log(n))，然后，接下来的m次对FindKthMaxNum()的调用全是O(1)的，整体复杂度反而成了线性的。</p></blockquote><blockquote><p>  其实，上述的还不是工程式的最好的解法，因为，在业务中，那数组中的数据可能会是会变化的，所以，如果是用数组排序的话，有数据的改动会让我重新排序，这个太耗性能了，如果实际情况中会有很多的插入或删除操作，那么可以考虑使用B+树。</p></blockquote><p>可见，实际工程中不止要考虑算法的时间复杂度这么简单，对于<code>在无序数组中取出第i个值</code>这个问题，工程中使用先排序后取值是最便捷和常用的方式。</p><p>使用如下的方式虽然复杂度为O(n)，但在大数m次访问的时候，复杂度将变成<code>o(n*m)</code>，而排序后取值的访问时复杂度为<code>O(1)</code>。</p><hr><h3 id="C语言代码"><a href="#C语言代码" class="headerlink" title="C语言代码"></a>C语言代码</h3><p><strong>最简单的用两个值存储</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findthesecond</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *arr,<span class="hljs-keyword">int</span> size)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> max=<span class="hljs-number">0</span>; <span class="hljs-comment">// max</span><br>    <span class="hljs-keyword">int</span> second=<span class="hljs-number">0</span>; <span class="hljs-comment">// second</span><br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;size;i++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i]&gt;max)&#123;<br>            second=max;<br>            max=arr[i];<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[i]&lt;max&amp;&amp;arr[i]&gt;second)<br>            second=arr[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> second;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>使用快速排序的思想</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// from the QuickSort</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">AdjustArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *arr,<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br><span class="hljs-keyword">int</span> i = left,j=right;<br><span class="hljs-keyword">int</span> x = arr[left];<br><span class="hljs-keyword">while</span> (i&lt;j) &#123;<br><span class="hljs-keyword">while</span> (i&lt;j&amp;&amp;arr[j]&gt;=x)<br>j--;<br><span class="hljs-keyword">if</span> (i&lt;j) <br>arr[i++]=arr[j];<br><span class="hljs-keyword">while</span> (i&lt;j&amp;&amp;arr[i]&lt;x)<br>i++;<br><span class="hljs-keyword">if</span> (i&lt;j)<br>arr[j--]=arr[i];<br>&#125;<br>arr[i]=x;<br><span class="hljs-keyword">return</span> i;<span class="hljs-comment">// 返回基准数位置</span><br>&#125;<br><br><span class="hljs-comment">// find the n&#x27;nd min number</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">FindnMinNum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *arr,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span> n)</span></span>&#123;<br><span class="hljs-keyword">int</span> index = AdjustArray(arr,left,right); <span class="hljs-comment">// the index to divide</span><br><span class="hljs-keyword">if</span> (index-left+<span class="hljs-number">1</span> == n)<br><span class="hljs-keyword">return</span> arr[index];<br><span class="hljs-keyword">if</span> (index-left+<span class="hljs-number">1</span> &gt; n)<br><span class="hljs-keyword">return</span> FindnMinNum(arr,left,index<span class="hljs-number">-1</span>,n);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> FindnMinNum(arr,index+<span class="hljs-number">1</span>,right,n-(index-left+<span class="hljs-number">1</span>));<br>&#125;<br><br><span class="hljs-comment">// find the n&#x27;nd max number</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">FindnMaxNum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *arr,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span> n)</span></span>&#123;<br><span class="hljs-keyword">int</span> index = AdjustArray(arr,left,right);<br><span class="hljs-keyword">if</span> (right-index+<span class="hljs-number">1</span> == n)<br><span class="hljs-keyword">return</span> arr[index];<br><span class="hljs-keyword">if</span> (right-index+<span class="hljs-number">1</span> &lt; n)<br><span class="hljs-keyword">return</span> FindnMaxNum(arr,index+<span class="hljs-number">1</span>,right,n);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> FindnMaxNum(arr,left,index<span class="hljs-number">-1</span>,n-(right-index+<span class="hljs-number">1</span>));<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h3 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h3><p>各种排序的复杂度图表：</p><p><img src="http://o7myibfc7.bkt.clouddn.com/21457204_1326898064RUxx.jpg?imageView2/2/h/400/" alt="各种排序复杂度"></p>]]></content>
    
    
    <categories>
      
      <category>Codes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu开机登录界面死循环</title>
    <link href="/posts/40658/"/>
    <url>/posts/40658/</url>
    
    <content type="html"><![CDATA[<p>关于Ubuntu 16.04突然无法开机，在登录界面进入死循环的解决方法。</p><span id="more"></span><hr><h3 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h3><p>首先，Ctrl+Alt+F1进入了命令行，试了一些重启命令无果，例如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">service</span> gdm<span class="hljs-number">3</span> restart<br></code></pre></td></tr></table></figure><p>这里补充一下在控制台临时使用英文的命令（中文乱码）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">LANG</span>=C<br></code></pre></td></tr></table></figure><p>随后remove了两个上次关机前安装的软件，还是无果。</p><p>看网上这个问题出现的主要地方有以下：</p><ul><li>显卡驱动</li><li>文件权限</li><li>安装了一些冲突的软件</li></ul><p>各种无果后十分发狂，随后才查找到了原来登录失败会生成如下的log文件：</p><p><code>/home/user/.xsession-errors</code></p><p>主要的几行如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">(WARN-<span class="hljs-number">6410</span> <span class="hljs-regexp">/build/</span>fcitx-J2yftF<span class="hljs-regexp">/fcitx-4.2.9.1/</span>src<span class="hljs-regexp">/lib/</span>fcitx-config/fcitx-config.c:<span class="hljs-number">922</span>) 配置项不合法:  行<span class="hljs-number">150</span> 缺少<span class="hljs-string">&#x27;=&#x27;</span><br>(WARN-<span class="hljs-number">6410</span> <span class="hljs-regexp">/build/</span>fcitx-J2yftF<span class="hljs-regexp">/fcitx-4.2.9.1/</span>src<span class="hljs-regexp">/module/</span>dbus/dbusstuff.c:<span class="hljs-number">246</span>) DBus Service Already Exists<br>(ERROR-<span class="hljs-number">6410</span> <span class="hljs-regexp">/build/</span>fcitx-J2yftF<span class="hljs-regexp">/fcitx-4.2.9.1/</span>src<span class="hljs-regexp">/lib/</span>fcitx/instance.c:<span class="hljs-number">440</span>) Exiting.<br>sogou-qimpanel-watchdog: Fatal IO error <span class="hljs-number">11</span> (资源暂时不可用) on X server :<span class="hljs-number">0</span>.<br><br><br></code></pre></td></tr></table></figure><p>很显然，问题出在fcitx和sogou输入法中，卸载后重装，问题解决。</p><hr><h3 id="Ubuntu日志文件总结"><a href="#Ubuntu日志文件总结" class="headerlink" title="Ubuntu日志文件总结"></a>Ubuntu日志文件总结</h3><p><strong>Linux Log files and usage</strong></p><p>&#x3D;&gt; &#x2F;var&#x2F;log&#x2F;messages : General log messages</p><p>&#x3D;&gt; &#x2F;var&#x2F;log&#x2F;boot : System boot log</p><p>&#x3D;&gt; &#x2F;var&#x2F;log&#x2F;debug : Debugging log messages</p><p>&#x3D;&gt; &#x2F;var&#x2F;log&#x2F;auth.log : User login and authentication logs</p><p>&#x3D;&gt; &#x2F;var&#x2F;log&#x2F;daemon.log : Running services such as squid, ntpd and others log message to this file</p><p>&#x3D;&gt; &#x2F;var&#x2F;log&#x2F;dmesg : Linux kernel ring buffer log</p><p>&#x3D;&gt; &#x2F;var&#x2F;log&#x2F;dpkg.log : All binary package log includes package installation and other information</p><p>&#x3D;&gt; &#x2F;var&#x2F;log&#x2F;faillog : User failed login log file</p><p>&#x3D;&gt; &#x2F;var&#x2F;log&#x2F;kern.log : Kernel log file</p><p>&#x3D;&gt; &#x2F;var&#x2F;log&#x2F;lpr.log : Printer log file</p><p>&#x3D;&gt; &#x2F;var&#x2F;log&#x2F;mail.* : All mail server message log files</p><p>&#x3D;&gt; &#x2F;var&#x2F;log&#x2F;mysql.* : MySQL server log file</p><p>&#x3D;&gt; &#x2F;var&#x2F;log&#x2F;user.log : All userlevel logs</p><p>&#x3D;&gt; &#x2F;var&#x2F;log&#x2F;xorg.0.log : X.org log file</p><p>&#x3D;&gt; &#x2F;var&#x2F;log&#x2F;apache2&#x2F;* : Apache web server log files directory</p><p>&#x3D;&gt; &#x2F;var&#x2F;log&#x2F;lighttpd&#x2F;* : Lighttpd web server log files directory</p><p>&#x3D;&gt; &#x2F;var&#x2F;log&#x2F;fsck&#x2F;* : fsck command log</p><p>&#x3D;&gt; &#x2F;var&#x2F;log&#x2F;apport.log : Application crash report &#x2F; log file</p><p><strong>shell下的命令</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">tail -f /var/log/apport.log<br>more /var/log/xorg.0.log<br>cat /var/log/mysql.err<br>less /var/log/messages<br>grep -i fail /var/log/boot<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>做了一些改变</title>
    <link href="/posts/59760/"/>
    <url>/posts/59760/</url>
    
    <content type="html"><![CDATA[<p>之前一直太忙，没怎么管理blog，今天花了一天时间做了一些改变。</p><span id="more"></span><hr><h3 id="在忙什么"><a href="#在忙什么" class="headerlink" title="在忙什么"></a>在忙什么</h3><p>忙着学java啊，搞项目什么的。</p><p>这几天项目比较累，反而不想搞了，就看了看前端的知识，包括HTML、CSS、JS等等，反过来看这个yelee的blog结构也比较简单，就简单修改了一下样式。</p><p>前端的学习刚刚开始，总结的文章还要往后放，现在时间比较多，多学一点是一点。</p><hr><h3 id="哪些改变？"><a href="#哪些改变？" class="headerlink" title="哪些改变？"></a>哪些改变？</h3><blockquote></blockquote><ul><li>修改了<a href="/404/">404</a>界面</li><li>万年不变的<a href="/about/">about</a>界面</li><li>加入了文章的缩进</li><li>修改了一些CSS样式</li></ul><p>所以整体上也没什么大的改变，比较大的还是换了域名。</p><p>从之前的 <a href="http://smileykk.tk/">http://smileykk.tk</a> 换成了 <a href="http://ykksmile.top/">http://ykksmile.top</a></p><p>因为tk域名的解析不算好，百度一直都无法收录。</p><p>虽然没什么技术含量的东西，百度收录也没什么大的意义，但是一直提交一直不收录的感觉也是挺不好的，所以还是买了一个top的域名。</p><p>刚改了DNS，还没解析过来，明天应该就可以了。</p><hr><h3 id="改域名遇到的问题"><a href="#改域名遇到的问题" class="headerlink" title="改域名遇到的问题"></a>改域名遇到的问题</h3><p>之前没有换域名的经验，导致这次换域名手忙脚乱。</p><p>不知道还有站点迁移这种东西，暴力的断开了之前的DNS，然后改换了新买的top域名<a href="http://ykksmile.top/">http://ykksmile.top</a>，DNS还是国外github国内coding的双重配置。</p><p>目前还没解决的问题有：</p><ul><li>@的主机解析和MX邮件服务的解析冲突</li></ul><p>解决的问题有：</p><ul><li>多说样式中的src指向改变</li><li>about界面评论不显示</li></ul><hr><h3 id="下一步的计划"><a href="#下一步的计划" class="headerlink" title="下一步的计划"></a>下一步的计划</h3><ul><li>做一个在线书签</li><li>做一个在线简历</li></ul>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>扯淡</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录蜂窝网络链路聚合项目的零碎</title>
    <link href="/posts/50343/"/>
    <url>/posts/50343/</url>
    
    <content type="html"><![CDATA[<p>项目是要保密的，所以只是记录一些自己项目过程里的零零碎碎。</p><span id="more"></span><hr><h3 id="对开源IPsec-VPN的研究"><a href="#对开源IPsec-VPN的研究" class="headerlink" title="对开源IPsec VPN的研究"></a>对开源IPsec VPN的研究</h3><h4 id="StrongSwan-vs-OpenSwan-vs-Libreswan"><a href="#StrongSwan-vs-OpenSwan-vs-Libreswan" class="headerlink" title="StrongSwan vs OpenSwan vs Libreswan"></a>StrongSwan vs OpenSwan vs Libreswan</h4><p>Libreswan是OpenSwan开发者因为商标问题新开发的开源VPN工具。</p><ul><li>StrongSwan has much more comprehensive and developed documentation than Libreswan.</li><li>StrongSwan has support for EAP authentication methods, which make it easier to integrate into heterogeneous environments (such as authenticating to Active Directory). These are less well developed or even missing from Libreswan.</li><li>StrongSwan can be clustered and load balanced. Libreswan does not seem to have any support to do either.</li><li>Libreswan supports more hardware crypto accelerators than StrongSwan, but requires kernel patches to do so.</li></ul><h4 id="OpenSwan-roadwarrior-and-net2net"><a href="#OpenSwan-roadwarrior-and-net2net" class="headerlink" title="OpenSwan roadwarrior and net2net"></a>OpenSwan roadwarrior and net2net</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs routeros">config setup<br>    <span class="hljs-attribute">dumpdir</span>=/var/run/pluto/<br>    <span class="hljs-attribute">nat_traversal</span>=<span class="hljs-literal">yes</span><br>    <span class="hljs-attribute">virtual_private</span>=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v6:fd00::/8,%v6:fe80::/10<br>    <span class="hljs-attribute">protostack</span>=netkey<br>    <br>conn L2TP-PSK-NAT<br>    <span class="hljs-attribute">rightsubnet</span>=vhost:%priv<br>    <span class="hljs-attribute">also</span>=L2TP-PSK-noNAT<br><br>conn L2TP-PSK-noNAT<br>    <span class="hljs-attribute">authby</span>=secret<br>    <span class="hljs-attribute">pfs</span>=<span class="hljs-literal">no</span><br>    <span class="hljs-attribute">auto</span>=add<br>    <span class="hljs-attribute">keyingtries</span>=3<br>    <span class="hljs-attribute">ikelifetime</span>=8h<br>    <span class="hljs-attribute">keylife</span>=1h<br>    <span class="hljs-attribute">type</span>=transport<br>    <span class="hljs-attribute">left</span>=%SERVERIP%<br>    <span class="hljs-attribute">leftprotoport</span>=17/1701<br>    <span class="hljs-attribute">right</span>=%any<br>    <span class="hljs-attribute">rightprotoport</span>=17/%any<br></code></pre></td></tr></table></figure><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nix">conn net-to-net <br>    <span class="hljs-attr">left=192.168.1.10</span>              <span class="hljs-comment"># LServer外网IP地址 </span><br>    <span class="hljs-attr">leftsubnet=10.10.10.0/24</span>       <span class="hljs-comment"># LServer内网IP段</span><br>    <span class="hljs-attr">leftrsasigkey=0sAQOBIJFmj…</span>   <span class="hljs-comment"># LServer的公钥 </span><br>    <span class="hljs-attr">leftnexthop=%defaultroute</span>      <span class="hljs-comment"># LServer的下一跳指定为默认路由地址 </span><br>    <span class="hljs-attr">right=192.168.1.20</span>             <span class="hljs-comment"># RServer外网IP地址 </span><br>    <span class="hljs-attr">rightsubnet=100.10.20.0/24</span>      <span class="hljs-comment"># RServer内网IP段</span><br>    <span class="hljs-attr">rightrsasigkey=0sAQNZZZjj…</span>   <span class="hljs-comment"># Rserver的公钥 </span><br>    <span class="hljs-attr">rightnexthop=%defaultroute</span>     <span class="hljs-comment"># RServer的下一跳指定为默认路由地址 </span><br>    <span class="hljs-attr">auto=start</span>                     <span class="hljs-comment"># 添加这个链接，启动时自动连接</span><br></code></pre></td></tr></table></figure><h4 id="StrongSwan的HA模式"><a href="#StrongSwan的HA模式" class="headerlink" title="StrongSwan的HA模式"></a>StrongSwan的HA模式</h4><p>The roadwarriors carol and dave set up a connection each to the virtual gateway mars implemented by the two real gateways alice and moon in a High Availability (HA) setup based on ClusterIP. Depending on the hash of the IP addresses of the peers and the SPIs, the inbound and outbound CHILD_SAs are either assigned to segment 1 managed by alice or segment 2 handled by moon. The IKEv2 protocol is managed by moon exclusively with passive IKE_SAs installed on the backup gateway alice. </p><p><img src="http://o7myibfc7.bkt.clouddn.com/strongswan.png" alt="StrongSwan的HA模式"></p><h4 id="VPN链路聚合的两种方案"><a href="#VPN链路聚合的两种方案" class="headerlink" title="VPN链路聚合的两种方案"></a>VPN链路聚合的两种方案</h4><ul><li>主要实现还是利用了<code>Netfilter HOOK</code></li></ul><p><img src="http://o7myibfc7.bkt.clouddn.com/vpn1.png" alt="《支持多路负载平衡的IPsec VPN 系统的设计与实现》"></p><p><img src="http://o7myibfc7.bkt.clouddn.com/vpn2.png" alt="《高可用IPsec虚拟专用网研究》"></p><hr><h3 id="硬件问题"><a href="#硬件问题" class="headerlink" title="硬件问题"></a>硬件问题</h3><ul><li>常见天线接头类型:</li></ul><p><img src="http://o7myibfc7.bkt.clouddn.com/TB29215.jpg?imageView2/3/w/300/h/150/q/90" alt="常见天线接头类型"></p><hr><h3 id="SIM7100拨号脚本"><a href="#SIM7100拨号脚本" class="headerlink" title="SIM7100拨号脚本"></a>SIM7100拨号脚本</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>详见gayhub：</p><div class="github-widget" data-repo="cloisonne/SIM7100-dial-script"></div><h4 id="上网设置APN-拨号号码，帐号和密码"><a href="#上网设置APN-拨号号码，帐号和密码" class="headerlink" title="上网设置APN,拨号号码，帐号和密码"></a>上网设置APN,拨号号码，帐号和密码</h4><table><thead><tr><th>运营商（ISP）</th><th>APN</th><th>拨号号码</th><th>帐号</th><th>密码</th></tr></thead><tbody><tr><td>中国联通WCDMA（China Unicom）</td><td>3GNET</td><td>*99#</td><td>空</td><td>空</td></tr><tr><td>中国电信CDMA2000（China Telecom）EVDO网络</td><td>空</td><td>#777</td><td><a href="mailto:&#99;&#116;&#110;&#101;&#x74;&#64;&#x6d;&#x79;&#99;&#x64;&#109;&#97;&#x2e;&#99;&#x6e;">&#99;&#116;&#110;&#101;&#x74;&#64;&#x6d;&#x79;&#99;&#x64;&#109;&#97;&#x2e;&#99;&#x6e;</a></td><td>vnet.mobi</td></tr><tr><td>1X网络</td><td>空</td><td>#777</td><td>card (CARD)</td><td>card（CARD）</td></tr><tr><td>中国移动 TD-SCDMA（China Mobile）</td><td>CMNET</td><td><em>98</em>1#</td><td>空</td><td>空</td></tr><tr><td>中国移动 GPRS（China Mobile）</td><td>CMNET</td><td><em>99</em>**1#</td><td>空</td><td>空</td></tr></tbody></table><hr><h3 id="OpenSwan源码解析"><a href="#OpenSwan源码解析" class="headerlink" title="OpenSwan源码解析"></a>OpenSwan源码解析</h3><p>后面没有使用开源VPN，这里没有继续接触。</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VPN</tag>
      
      <tag>LTE</tag>
      
      <tag>GSM</tag>
      
      <tag>IPsec</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用到的sublime快捷键</title>
    <link href="/posts/53056/"/>
    <url>/posts/53056/</url>
    
    <content type="html"><![CDATA[<p>用过许多的文本编辑器，最近了解前端的时候才发现这个sublime，项目催得紧，拿来写C了。</p><span id="more"></span><hr><p><a href="https://www.sublimetext.com/">sublime</a>是收费的哦，现在用的是<code>sublime3</code>,当然可以和谐掉，赚钱了再补过咯。</p><hr><h3 id="对用到的sublime快捷键进行总结"><a href="#对用到的sublime快捷键进行总结" class="headerlink" title="对用到的sublime快捷键进行总结"></a>对用到的sublime快捷键进行总结</h3><p><code>Ctrl+D</code> 选词，重复按可以选下一个  &#x2F;&#x2F; Alt+F3  选中所有相同文本</p><p><code>Ctrl+L</code> 选择整行，按住同上</p><p><code>Alt+Shift+N</code> 分成N屏，N&#x3D;1-9</p><p><code>Ctrl+Shift+N</code> 聚焦到N屏</p><p><code>Ctrl+Z/Y</code>  撤销&#x2F;恢复撤销</p><p><code>Ctrl+Shift+/</code> 注释所选内容</p><p><code>Ctrl+Shift+B</code> built with</p><p>在Preference&#x2F;Key Bindings&#x2F;User中加入<code>F10</code>快速编译加Run：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123; <span class="hljs-string">&quot;keys&quot;</span>: [<span class="hljs-string">&quot;f10&quot;</span>], <span class="hljs-string">&quot;command&quot;</span>: <span class="hljs-string">&quot;build&quot;</span>, <span class="hljs-string">&quot;args&quot;</span>: &#123;<span class="hljs-string">&quot;variant&quot;</span>: <span class="hljs-string">&quot;Run&quot;</span>&#125; &#125;,<br></code></pre></td></tr></table></figure><hr><h3 id="目前用到的插件"><a href="#目前用到的插件" class="headerlink" title="目前用到的插件"></a>目前用到的插件</h3><ul><li>PackageControl</li><li>Codecs33</li><li>ConvertToUTF8</li><li>EJS</li><li>GBK Support</li><li>Stylus</li></ul>]]></content>
    
    
    <categories>
      
      <category>Codes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Sublime</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对国庆节呆在实验室的一点看法</title>
    <link href="/posts/50234/"/>
    <url>/posts/50234/</url>
    
    <content type="html"><![CDATA[<p>国庆节假期到了，身边的人大多都回家或者选择出去旅游了，而我还是默默地在实验室学习，写一点东西，聊以慰藉。</p><span id="more"></span><hr><p>MG还没有签工作，国庆假期里定了学习计划，不过今天还是决定跟团出去旅游一天，看到她发来的在高速路上堵车的照片，我很是欣慰。</p><p>K君放假前一直在向我诉苦，说老板竟然不放十一假期，十一她要在实验室继续搬砖。昨天，她买了机票回家了，事实是老板并没有留她，也许是她过于悲观了。</p><p>乔大侠原本是要陪我一起度过9天假期的（7天加周末），结果前天晚上，鬼使神差地对我说：我发现身边的人都回家了，我也想回家，已经定了火车票。我答：是啊，工作后就更没机会了，能回就回吧。</p><p>Y君还在北京上班，我知道那个繁华的城市最适合她。她说：男朋友来了，就不回家了。</p><p>还有W君、M君，他们今年或参加考研或参加国考，十一并没有心情游山玩水。</p><p>那么我呢？是啊，我属于哪里呢。</p><p>去年十一，我还是考研大军的一员，逼仄在A区自习室的一角，每天和辅导书与食堂大妈打交道，那时我想：<code>要是没有考研就可以好好地玩了</code>。如今我有了假期，却也选择坐在实验室，和博士师兄以及几个任务缠身的师姐一同安静的修炼。</p><p>假期只是给那些身上背上没有负担的人儿一个更放松的理由。</p><p><code>深圳房价6万一平了</code>。</p><p>今年华为给研究生的起薪1万2，一年的收入在20万，华为深圳总部有一部分要迁到东莞了。还不错哦，按照华为的工资，也就还30年房贷而已，如果你能在华为活30年的话。</p><p>然而，实验室的师兄挂在了华为的面试，他说：面试官根本不懂通信，不懂SDN，完全不知道我讲的是什么。我问：什么岗？<code>“软件研发”</code>。</p><p>互联网行业大势已去的风评就像是楼市即将崩盘的传言甚嚣尘上，而我们还在拼命地希望在BAT谋求一份生存的机会，通信原理、DSP、信号处理什么都抛之脑后，都在找工作的几个月前拼命地补操作系统、编程语言、算法与数据结构、软件工程。</p><p>这就是教育的意义吗？上研3年，除了顾些奖学金等鸡毛蒜皮的小事，就是靠突击和运气谋求一份不属于自己专业的工作。看着招聘黄金时期九月的过去，有人因一份研究所的工作高兴不已，也有人还在找工作的路上越走越远，将华为这种批发毕业生的公司都视为最好的归宿。</p><p>在学校论坛翻出了几年前一个学姐找工作的帖子，帖中毫不委婉地指出了目前学校研究生大多由2本学生组成的现状，对于他们来说，实现了工资从3000到8000的跨越，而我们这些原地踏步的从本科一路走来的人，和他们享受的是同样的就业状况，站在同样的起跑线上。</p><p>所谓学校第一大院，所谓的全国前三的专业，所谓的国家重点实验室。我只知道，好多人找不到满意的工作。</p><p>妈让我读博，我说我读完就已经二十八九了，即将而立之年，一点经济积累都没有，还要靠父母的救济度日。更别提孑然一人，在追求自由和梦想的路上越走越远。</p><p>我不是gay，但我也不想结婚，围城就是很好的例子。</p><p>归根结底，就业的压力和理想与现实的差距，让我就算在国庆假期也来到实验室学习，淡漠的，并无埋怨之心。</p><p>中午一个好哥们来学校了，免不了出去喝酒吃饭，酒肉穿肠过，大家吐槽一下学校，吐槽一下体制，并表示出对某某的歆羡之情。几瓶酒下肚，好像更快活了些，因为这个假期我并不是一个人，大家都没出去，很多人都在实验室学习，当然，他们都是有加班费的这就不提了。</p><p>当下，导师的项目是一方面，基本上是硬件通信模块的设计和管理软件的开发；对java的学习是另一方面，选择了java就一路走下去，无论是javaweb还是javase，加上对算法和数据结构的学习，后面再看几遍JVM，但愿到时候能找到合格的实习吧。</p><p>没什么抱怨的意味，在实验室难得清闲，学习和做项目，也有空更一下blog，就是蚊子略多，这两天已经拍死了七八只，说的带花露水过来，总是忘记。</p>]]></content>
    
    
    <categories>
      
      <category>Essays</category>
      
    </categories>
    
    
    <tags>
      
      <tag>扯淡</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用JAVA编写的排序算法</title>
    <link href="/posts/32334/"/>
    <url>/posts/32334/</url>
    
    <content type="html"><![CDATA[<p>使用java练习的排序算法，逐渐补齐。</p><span id="more"></span><hr><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br></code></pre></td></tr></table></figure><ul><li>选择排序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">classSort</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length-<span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br><span class="hljs-comment">// 用i的下一个元素和它比较</span><br><span class="hljs-keyword">if</span> (arr[i]&gt;arr[j]) &#123;<br><span class="hljs-comment">// 交换值</span><br>arr[i]=arr[j]+arr[i]-(arr[j]=arr[i]);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>冒泡排序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length-<span class="hljs-number">1</span> ; i++) &#123;<br><span class="hljs-comment">// 防止越界</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length-i-<span class="hljs-number">1</span>; j++) &#123;<br><span class="hljs-keyword">if</span> (arr[j] &gt; arr[j+<span class="hljs-number">1</span>]) &#123;<br><span class="hljs-comment">/*arr[j] = arr[j] ^ arr[j+1];</span><br><span class="hljs-comment">arr[j+1] =arr[j] ^ arr[j+1];</span><br><span class="hljs-comment">arr[j] = arr[j] ^ arr[j+1];*/</span><br>arr[j]=arr[j]+arr[j+<span class="hljs-number">1</span>]-(arr[j+<span class="hljs-number">1</span>]=arr[j]);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>合并排序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 合并排序（递归）</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right)</span></span>&#123;<br><br><span class="hljs-keyword">if</span> (left&lt;right) &#123;<br><span class="hljs-keyword">int</span> mid = (left+right)/<span class="hljs-number">2</span>;<br>mergeSort(arr, left, mid);<br>mergeSort(arr, mid+<span class="hljs-number">1</span>, right);<br>merge(arr,left,mid,right); <span class="hljs-comment">// 合并后给arr</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// merge的写法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> mid,<span class="hljs-keyword">int</span> right)</span> </span>&#123;<br><span class="hljs-comment">//int[] temp = new int[arr.length]; // 暂时存放</span><br><span class="hljs-keyword">int</span> length = right-left+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> temp[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length];<br><span class="hljs-keyword">int</span> i = left,<br>j = mid+<span class="hljs-number">1</span>,<br>k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> ((i &lt;= mid)&amp;&amp;(j &lt;= right)) &#123;<br><span class="hljs-keyword">if</span> (arr[i]&lt;arr[j]) &#123;<br>temp[k++] = arr[i++];<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>temp[k++] = arr[j++];<br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span> (i&lt;=mid) &#123;<br>temp[k++]=arr[i++];<br>&#125;<br><span class="hljs-keyword">while</span> (j&lt;=right) &#123;<br>temp[k++]=arr[j++];<br>&#125;<br><span class="hljs-keyword">int</span> n=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t=left;t&lt;=right;t++,n++)&#123;<br>           arr[t]=temp[n];<br>       &#125;<br><span class="hljs-comment">//System.out.println(Arrays.toString(temp));</span><br><span class="hljs-comment">//arr = Arrays.copyOf(temp, temp.length);</span><br>System.out.println(Arrays.toString(arr));<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>快速排序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 快速排序，分开写</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right)</span></span>&#123;<span class="hljs-comment">// 分治策略</span><br><span class="hljs-keyword">if</span> (left&lt;right) &#123;<br><span class="hljs-keyword">int</span> i = AdjustArray(arr,left,right);<br>quickSort(arr, left, i-<span class="hljs-number">1</span>);<br>quickSort(arr, i+<span class="hljs-number">1</span>, right);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">AdjustArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br><span class="hljs-keyword">int</span> i = left,j=right;<br><span class="hljs-keyword">int</span> x = arr[left];<br><span class="hljs-keyword">while</span> (i&lt;j) &#123;<br><span class="hljs-keyword">while</span> (i&lt;j&amp;&amp;arr[j]&gt;=x)<br>j--;<br><br><span class="hljs-keyword">if</span> (i&lt;j) <br>arr[i++]=arr[j];<br><br><span class="hljs-keyword">while</span> (i&lt;j&amp;&amp;arr[i]&lt;x)<br>i++;<br><br><span class="hljs-keyword">if</span> (i&lt;j)<br>arr[j--]=arr[i];<br>&#125;<br>arr[i]=x;<br><span class="hljs-keyword">return</span> i;<span class="hljs-comment">// 返回基准数位置</span><br>&#125;<br><br><span class="hljs-comment">// 快速排序，合并写</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort2</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (left&lt;right) &#123;<br><span class="hljs-comment">// 可使用中间数做基准</span><br><span class="hljs-keyword">int</span> i = left,j=right,x=arr[left];<br><span class="hljs-keyword">while</span> (i&lt;j)&#123;<br><span class="hljs-keyword">while</span> (i&lt;j&amp;&amp;arr[j]&gt;=x)<br>j--;<br><br><span class="hljs-keyword">if</span>(i&lt;j)<br>arr[i++] =arr[j];<br><br><span class="hljs-keyword">while</span> (i&lt;j&amp;&amp;arr[i]&lt;x)<br>i++;<br><br><span class="hljs-keyword">if</span>(i&lt;j)<br>arr[j--] = arr[i];<br>&#125;<br>arr[i]=x;<br>quickSort2(arr, left, i-<span class="hljs-number">1</span>);<br>quickSort2(arr, i+<span class="hljs-number">1</span>, right);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br><span class="hljs-keyword">int</span>[] arrTest = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>&#125;;<br>classSort m = <span class="hljs-keyword">new</span> classSort();<br>m.quickSort2(arrTest,<span class="hljs-number">0</span>,arrTest.length-<span class="hljs-number">1</span>);<br>System.out.println(Arrays.toString(arrTest));<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Codes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对于GPT和MBR系统引导的学习</title>
    <link href="/posts/23569/"/>
    <url>/posts/23569/</url>
    
    <content type="html"><![CDATA[<p>日前给一妹子装Ubuntu，几多波折，最主要的就是一开始没有意识到GPT+uefi的模式。</p><span id="more"></span><hr><h3 id="经验教训"><a href="#经验教训" class="headerlink" title="经验教训"></a>经验教训</h3><p>用PE装WIN10的时候并不会报错，用镜像做启动盘才能看到报错，和BIOS设置有关。</p><p><code>PE毁一生</code></p><hr><h3 id="GPT和MBR"><a href="#GPT和MBR" class="headerlink" title="GPT和MBR"></a>GPT和MBR</h3><p>mrb用于win平台，gpt主要用于mac（苹果），MBR分区表与GPT分区表的关系。</p><blockquote><p>与支持最大卷为2 TB（Terabytes）并且每个磁盘最多有4个主分区（或3个主分区，1个扩展分区和无限制的逻辑驱动器）的MBR磁盘分区的样式相比，GPT磁盘分区样式支持最大卷为18 EB（Exabytes）并且每磁盘的分区数没有上限，只受到操作系统限制（<code>由于分区表本身需要占用一定空间，最初规划硬盘分区时，留给分区表的空间决定了最多可以有多少个分区</code>，IA-64版Windows限制最多有128个分区，这也是EFI标准规定的分区表的最小尺寸）。与MBR分区的磁盘不同，至关重要的平台操作数据位于分区，而不是位于非分区或隐藏扇区。另外，GPT分区磁盘有备份分区表来提高分区数据结构的完整性。</p></blockquote><p><code>解读</code>：</p><ul><li>GPT支持更大的分区，并且支持大于4个主分区</li><li>uefi和legacy的速度没有很明显的比较，但是uefi毕竟是新一代的引导技术</li></ul><hr><h3 id="目前Linux对uefi-GPT的支持"><a href="#目前Linux对uefi-GPT的支持" class="headerlink" title="目前Linux对uefi+GPT的支持"></a>目前Linux对uefi+GPT的支持</h3><p>据说已经可以支持UEFI启动，对于GPT而言，多了一个boot&#x2F;efi</p><p>注意的几点：</p><ul><li>secure boot</li><li>如果在安装Ubuntu系统的时候不是选择自动分区，而是选择最后那个“其它选项”来自定义分区，会发现其实Ubuntu提供的自定义分区功能很有限。它没办法让人选择是使用MBR分区还是使用GPT分区，也没有办法选择是否启用LVM。如果需要更灵活的管理的话，还是只有点击“试用Ubuntu”按钮，进入LiveCD的Ubuntu系统后，使用parted命令和lvm命令手动管理硬盘分区。</li></ul><hr><h3 id="双系统中为什么选择了MBR"><a href="#双系统中为什么选择了MBR" class="headerlink" title="双系统中为什么选择了MBR"></a>双系统中为什么选择了MBR</h3><p>原因很简单，对于<code>MBR+legacy</code>的熟悉程度远大于uefi。</p><ul><li>可以随意定制boot的位置，efi好像必须是一个单独的分区。</li><li>启动引导可以随意选择win的boot loader或者linux的grub or grub2</li><li>想怎么玩怎么玩</li></ul><p>装机过程也选择了将GPT硬盘转化成MBR并重建MBR表。</p><p><strong>那么，GPT下如何实现WIN+linux双系统？（转载）</strong></p><ol><li>ubuntu镜像（以ubuntu为例）需要是64位的，ubuntu官网有说明，他们只为64位版本添加了uefi启动模式<br>（判断镜像是否支持uefi启动很简单，不只是ubuntu，只要打开镜像，看其中是否有个efi文件夹，有就支持，没有就不支持）</li><li>以uefi模式启动。虽然主板支持uefi，但从刻录好的U盘（或者光盘等其他介质）启动不一定采取uefi模式，以我电脑为例，开机按F12进入启动菜单选择时，分为两大类：uefi和lengcy。而U盘同时出现在两类启动中，这里需要选择uefi中的U盘</li><li>选择引导安装设备。在ubuntu安装过程中，会让你选择将系统引导安装到哪里。传统的grub是安装到“sda”也就是整个硬盘的开始处，现在嘛，绝对不行！预装win8情况下，C盘前肯定会有2~3个小分区，其中一个就是用来存放efi文件以引导开机的。选择引导安装设备时ubuntu会列出当前所有分区，并且有注明分区类型，其中有一个标注为efi的就是此时要选择的</li></ol><hr><h3 id="GPT和MBR的无损转化"><a href="#GPT和MBR的无损转化" class="headerlink" title="GPT和MBR的无损转化"></a>GPT和MBR的无损转化</h3><p>GPT到MBR比较简单，启动分区直接丢掉。</p><p><code>MBR到GPT有一定风险</code>，系统需要重装，并且需要一个新的引导分区。</p><p>实际操作过程用的傲梅分区助手。</p><p>就酱。</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无法识别主控的情况下如何“软修复”一个扩容U盘</title>
    <link href="/posts/11561/"/>
    <url>/posts/11561/</url>
    
    <content type="html"><![CDATA[<p>家中找到了一个假的金士顿扩容盘，表面容量是32G，实际只有8G，最关键的是存储资料常常丢失。原本恢复很简单，量产即可，但该盘主控不可识别，比较麻烦。</p><span id="more"></span><h3 id="如何知道是扩容盘？"><a href="#如何知道是扩容盘？" class="headerlink" title="如何知道是扩容盘？"></a>如何知道是扩容盘？</h3><ul><li><p>使用<strong>MyDiskTestV2.98</strong>，这里注意MyDiskTest号称自带软修复，但在WIN7以上系统中无法使用，我特意换了XP系统进行了测试，答案是也不能用。</p></li><li><p>什么是软修复？</p></li></ul><blockquote><p>对于扩容的那一部分，使用数据文件填充，然后只读隐藏，你的U盘就变成了32G容量，8G可用。因为这8G并不包括扩容的那一部分，所以可以正常存取，文件不会损坏。</p></blockquote><hr><h3 id="最常规的思路"><a href="#最常规的思路" class="headerlink" title="最常规的思路"></a>最常规的思路</h3><ul><li>针对扩容盘，最常规的思路就是识别主控型号，查找相应的量产工具，然后重新进行量产，这里识别主控型号用到的工具主要有两个：</li></ul><ol><li>ChipGenius</li><li>ChipEasy</li></ol><ul><li>二者效果差不多，主要注意版本不要太旧，否则无法识别新的主控型号。识别的结果如下：</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada">设备制造商:  General<br>设备型号  :  <span class="hljs-type">UDisk</span><br>当前协议  :  <span class="hljs-type">USB2.0</span><br>输入电流  :  100<span class="hljs-type">mA</span><br>分区系统  :  <span class="hljs-type">FAT32</span>                    是否激活  :  是<br>是否对齐  :  32 <span class="hljs-type">KB</span> 已扇区对齐<br>芯片制造商:  芯邦(Chipsbank)<br>芯片型号  :  <span class="hljs-type">CBMeneral</span><br></code></pre></td></tr></table></figure><ul><li>WTF？芯片型号被谁吃了？<strong>试过最新版本的多种识别软件均无果</strong>。不过幸好我们知道了是芯邦的芯片，具体主控型号位置。果断拆机，拆机后如图：</li></ul><p><img src="http://o7myibfc7.bkt.clouddn.com/2140772-b83693a38bed10f2.jpg" alt="U盘拆解图"></p><ul><li>在芯片背面看到了YHFL92098E-8GB1410，很显然这是8GB的芯邦2098E主控，寻找量产工具，但是尝试了如下工具无果，<strong>无法识别U盘</strong>。</li></ul><ol><li>APToolV5533</li><li>CBM2098_APToolV6006</li><li>UMPTool_V7000</li><li>UmpTool6003</li></ol><hr><h3 id="diskgenius分区解决"><a href="#diskgenius分区解决" class="headerlink" title="diskgenius分区解决"></a>diskgenius分区解决</h3><ul><li><p>在使用MyDiskTest的时候，发现32G空间的前8G是可用的空间，扩容的是之后的空间，既然软件没有提供软修复，那么干脆分区好了，因为分区是从0开始按照扇区号开始的。</p></li><li><p>使用DiskGenius进行分区，随便分出了7.6G的空间（8G&#x3D;8000M），剩下的分区进行隐藏。</p></li></ul><blockquote><p>这样就完成了一个扩容U盘的软修复，当然在能够量产的前提下还是进行量产吧。</p></blockquote><hr><h3 id="所用的软件集合（百度云外链）"><a href="#所用的软件集合（百度云外链）" class="headerlink" title="所用的软件集合（百度云外链）"></a>所用的软件集合（百度云外链）</h3><blockquote><p>pass</p></blockquote><hr><h3 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h3><ol><li><strong>优盘之家</strong>: <a href="http://www.upan.cc/">http://www.upan.cc/</a> </li><li><strong>U盘量产网</strong>: <a href="http://www.upantool.com/">http://www.upantool.com/</a></li></ol><hr>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>U-disk</tag>
      
      <tag>storage</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Ubuntu系统中遇到的问题</title>
    <link href="/posts/61830/"/>
    <url>/posts/61830/</url>
    
    <content type="html"><![CDATA[<p>记录自己在Ubuntu系统学习和建设中遇到的问题和解决方案，一些小tip选择加入<a href="/wiki">TiddlyWiki</a></p><span id="more"></span><h2 id="Ubuntu系统问题"><a href="#Ubuntu系统问题" class="headerlink" title="Ubuntu系统问题"></a>Ubuntu系统问题</h2><h3 id="删除显示为deinstall的linux内核"><a href="#删除显示为deinstall的linux内核" class="headerlink" title="删除显示为deinstall的linux内核"></a>删除显示为deinstall的linux内核</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">uname</span> -a  <br><span class="hljs-attribute">dpkg</span> --get-selections|grep linux  <br><span class="hljs-attribute">sudo</span> dpkg -P linux-image-<span class="hljs-number">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">0</span>-<span class="hljs-number">4</span>[<span class="hljs-number">2</span>-<span class="hljs-number">9</span>]-generic  <br><span class="hljs-attribute">sudo</span> dpkg -P linux-image-<span class="hljs-number">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">0</span>-<span class="hljs-number">51</span>-generic <br></code></pre></td></tr></table></figure><h3 id="嵌入式上的wifi网络"><a href="#嵌入式上的wifi网络" class="headerlink" title="嵌入式上的wifi网络"></a>嵌入式上的wifi网络</h3><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">sudo nano /etc/wp<span class="hljs-built_in">a_supplicant</span>/wp<span class="hljs-built_in">a_supplicant</span>.conf<br></code></pre></td></tr></table></figure><p>添加</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">network=&#123;<br>    <span class="hljs-attribute">ssid</span>=<span class="hljs-string">&quot;The_ESSID_from_earlier&quot;</span><br>    <span class="hljs-attribute">psk</span>=<span class="hljs-string">&quot;Your_wifi_password&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>重启接口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> ifup wlan<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="嵌入式上如何启动图形界面"><a href="#嵌入式上如何启动图形界面" class="headerlink" title="嵌入式上如何启动图形界面"></a>嵌入式上如何启动图形界面</h3><p>在shell中输入：<code>startx</code> 或者 <code>init 5</code></p><p>为了在Linux启动时直接进入Console界面，我们可以编辑&#x2F;etc&#x2F;inittab文件。找到id:5: initdefault:这一行，将它改为id:3:initdefault:后重新启动系统即可。我们看到，简简单单地将5改为3，就能实现启动时进入X-window图形操作界面或Console字符界面的转换，这是因为Linux操作系统有六种不同的运行级(run level)，在不同的运行级下，系统有着不同的状态，这六种运行级分别为：<br>0：停机(记住不要把initdefault 设置为0，因为这样会使Linux无法启动 )<br>1：单用户模式，就像Win9X下的安全模式。<br>2：多用户，但是没有 NFS 。<br>3：完全多用户模式，标准的运行级。<br>4：一般不用，在一些特殊情况下可以用它来做一些事情。<br>5：X11，即进到 X-window 系统。<br>6：重新启动 (记住不要把initdefault 设置为6，因为这样会使Linux不断地重新启动)。</p><h3 id="旧版本ubuntu无法更新问题"><a href="#旧版本ubuntu无法更新问题" class="headerlink" title="旧版本ubuntu无法更新问题"></a>旧版本ubuntu无法更新问题</h3><p>旧版本已经不再支持，需要换用old源：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//</span>old-releases.ubuntu.com<span class="hljs-regexp">/ubuntu/</span> raring main universe restricted multiverse<br>deb-src http:<span class="hljs-regexp">//</span>old-releases.ubuntu.com<span class="hljs-regexp">/ubuntu/</span> raring main universe restricted multiverse<br><br>deb http:<span class="hljs-regexp">//</span>old-releases.ubuntu.com<span class="hljs-regexp">/ubuntu/</span> raring-security main universe restricted multiverse<br>deb-src http:<span class="hljs-regexp">//</span>old-releases.ubuntu.com<span class="hljs-regexp">/ubuntu/</span> raring-security main universe restricted multiverse<br><br>deb http:<span class="hljs-regexp">//</span>old-releases.ubuntu.com<span class="hljs-regexp">/ubuntu/</span> raring-updates main universe restricted multiverse<br>deb-src http:<span class="hljs-regexp">//</span>old-releases.ubuntu.com<span class="hljs-regexp">/ubuntu/</span> raring-updates main universe restricted multiverse<br><br>deb http:<span class="hljs-regexp">//</span>old-releases.ubuntu.com<span class="hljs-regexp">/ubuntu/</span> raring-backports main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//</span>old-releases.ubuntu.com<span class="hljs-regexp">/ubuntu/</span> raring-backports main restricted universe multiverse<br><br>deb http:<span class="hljs-regexp">//</span>old-releases.ubuntu.com<span class="hljs-regexp">/ubuntu/</span> raring-proposed main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//</span>old-releases.ubuntu.com<span class="hljs-regexp">/ubuntu/</span> raring-proposed main restricted universe multiverse<br></code></pre></td></tr></table></figure><p>源文件的地址：</p><blockquote><p>&#x2F;etc&#x2F;apt&#x2F;sources.list</p></blockquote><h3 id="删除多余内核"><a href="#删除多余内核" class="headerlink" title="删除多余内核"></a>删除多余内核</h3><p>解决boot分区空间不足。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dpkg --get-selections |grep linux<br>uname -a<br>sudo apt-get purge linux-headers-&amp;linux-image-<br>sudo update-grub<br></code></pre></td></tr></table></figure><hr><h3 id="linux下的文件和文件夹权限问题"><a href="#linux下的文件和文件夹权限问题" class="headerlink" title="linux下的文件和文件夹权限问题"></a>linux下的文件和文件夹权限问题</h3><p>ubuntu下查看权限的命令为：</p><pre><code class="hljs">ls -l filename</code></pre><p>ubuntu下设置权限的命令为：</p><blockquote><p>一共有10位数<br>其中： 最前面那个 - 代表的是类型<br>中间那三个 rw- 代表的是所有者（user）<br>然后那三个 rw- 代表的是组群（group）<br>最后那三个 r– 代表的是其他人（other）</p></blockquote><blockquote><p>后面那9位数：<br>r 表示文件可以被读（read）<br>w 表示文件可以被写（write）<br>x 表示文件可以被执行（如果它是程序的话）<br>- 表示相应的权限还没有被授予</p></blockquote><p>现在该说说修改文件权限了</p><p>在终端输入：</p><p>chmod o+w xxx.xxx</p><p>表示给其他人授予写xxx.xxx这个文件的权限</p><p>chmod go-rw xxx.xxx</p><p>表示删除xxx.xxx中组群和其他人的读和写的权限</p><p><code>其中：</code></p><p>u 代表所有者（user）</p><p>g 代表所有者所在的组群（group）</p><p>o 代表其他人，但不是u和g （other）</p><p>a 代表全部的人，也就是包括u，g和o</p><p>r 表示文件可以被读（read）</p><p>w 表示文件可以被写（write）</p><p>x 表示文件可以被执行（如果它是程序的话）</p><p>rwx也可以用数字来代替</p><p>r ————4</p><p>w ———–2</p><p>x ————1</p><p>- ————0</p><p><code>行动：</code></p><p>+ 表示添加权限</p><p>- 表示删除权限</p><p>&#x3D; 表示使之成为唯一的权限</p><p>当大家都明白了上面的东西之后，那么我们常见的以下的一些权限就很容易都明白了：</p><p>-rw——- (600) 只有所有者才有读和写的权限</p><p>-rw-r–r– (644) 只有所有者才有读和写的权限，组群和其他人只有读的权限</p><p>-rwx—— (700) 只有所有者才有读，写，执行的权限</p><p>-rwxr-xr-x (755) 只有所有者才有读，写，执行的权限，组群和其他人只有读和执行的权限</p><p>-rwx–x–x (711) 只有所有者才有读，写，执行的权限，组群和其他人只有执行的权限</p><p>-rw-rw-rw- (666) 每个人都有读写的权限</p><p>-rwxrwxrwx (777) 每个人都有读写和执行的权限</p><p>转载自：<a href="http://www.linuxsky.org/doc/newbie/200801/220.html">http://www.linuxsky.org/doc/newbie/200801/220.html</a><br>若分配给某个文件所有权限，则利用下面的命令：</p><p><code>sudo chmod -R 777</code> 文件或文件夹的名字（其中sudo是管理员权限）</p><hr><h2 id="grub2手动引导命令"><a href="#grub2手动引导命令" class="headerlink" title="grub2手动引导命令"></a>grub2手动引导命令</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gams">grub rescue&gt; ls  <span class="hljs-comment">//查看分区</span><br>grub rescue&gt; ls (hd0,gpt8) <span class="hljs-comment">//寻找根分区</span><br>grub rescue&gt; <span class="hljs-keyword">set</span><br>grub <span class="hljs-comment">rescue&gt; set  prefix=(hd0,gpt8)</span>/boot/<span class="hljs-comment">grub</span><br>grub <span class="hljs-comment">rescue&gt; set  root=hd0,gpt8</span><br>grub <span class="hljs-comment">rescue&gt; insmod normal</span><br>grub <span class="hljs-comment">rescue&gt; normal</span><br><br></code></pre></td></tr></table></figure><hr><h2 id="Gnome3问题"><a href="#Gnome3问题" class="headerlink" title="Gnome3问题"></a>Gnome3问题</h2><hr><ul><li><strong>对Gnome3的感受就是爱并折磨着～</strong></li></ul><h3 id="fcitx和ibus在gnome3下的冲突问题"><a href="#fcitx和ibus在gnome3下的冲突问题" class="headerlink" title="fcitx和ibus在gnome3下的冲突问题"></a>fcitx和ibus在gnome3下的冲突问题</h3><p>因为在Ubuntu下对搜狗输入法的痴爱（皮肤和WIN下的皮肤通用，并且词库强大），必须使用fcitx来作为输入法管理工具，而gnome3和ibus是绑定关系，天然的gnome3自带ibus，二者冲突导致了fcitx在QT4等界面下会出现失效，盲目卸载ibus还会出现系统设置崩溃的问题。</p><ul><li>对于ibus的看法</li></ul><blockquote><p>ibus是gnome3的天然输入法，盲目卸载可能会导致问题，最关键的两个套件包括<strong>ibus-gtk</strong>和<strong>ibus-gtk2</strong>，其余的ibus组件可以卸载目前没有发现问题。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get remove ibus<br>sudo apt-get autoremove<br></code></pre></td></tr></table></figure><ul><li>fcitx的配置</li></ul><blockquote><p>出问题的时候不妨尝试<strong>卸载fcitx和搜狗输入法</strong>，然后重新安装搜狗输入法和fcitx</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install fcitx-pinyin<br>im-config -s fcitx -z all_ALL<br></code></pre></td></tr></table></figure><blockquote><p>此时 &#x2F;etc&#x2F;X11&#x2F;xinit&#x2F;xinput.d&#x2F;fcitx 应为</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">XIM</span>=fcitx<br><span class="hljs-attr">XIM_PROGRAM</span>=/usr/bin/fcitx<br><span class="hljs-attr">XIM_ARGS</span>=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">GTK_IM_MODULE</span>=fcitx<br><span class="hljs-attr">QT4_IM_MODULE</span>=fcitx<br><span class="hljs-attr">DEPENDS</span>=<span class="hljs-string">&quot;fcitx&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>可通过查看环境变量来判断</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">env | grep fcitx<br></code></pre></td></tr></table></figure><blockquote><p>也可以通过fcitx自带的诊断工具<code>fcitx-diagnose</code></p></blockquote><ul><li><strong>提示</strong></li></ul><p>在init文件中直接export <em>fcitx</em> 变量的方法不可取！</p><hr><h2 id="Ubuntu工具收集"><a href="#Ubuntu工具收集" class="headerlink" title="Ubuntu工具收集"></a>Ubuntu工具收集</h2><h3 id="Boot-repair"><a href="#Boot-repair" class="headerlink" title="Boot-repair"></a>Boot-repair</h3><p>修复双系统引导</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">sudo -i<span class="hljs-built_in"></span><br><span class="hljs-built_in">add-apt-repository </span>ppa:yannubuntu/boot-repair &amp;&amp; apt-get update<br>apt-get install -y boot-repair &amp;&amp; boot-repair<br></code></pre></td></tr></table></figure><h3 id="grub神器-GRUB-Customizer"><a href="#grub神器-GRUB-Customizer" class="headerlink" title="grub神器 GRUB Customizer"></a>grub神器 GRUB Customizer</h3><ul><li>地址</li></ul><p><a href="https://launchpad.net/grub-customizer">Grub Customizer</a></p><ul><li>安装方法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo add-apt-repository ppa:danielrichter2007/grub-customizer<br>sudo apt-get update<br>sudo apt-get install grub-customizer<br></code></pre></td></tr></table></figure><ul><li>一些tips</li></ul><p>利用Grub Customizer可以轻松的对Ubuntu自带的grub引导进行管理，同时可以很方便地写入MBR，从而对WIN和Linux双系统进行引导管理。</p><p><strong>Grub Customizer可以定制启动时的grub界面</strong></p><p>事实上可以直接编辑<code>/boot/grub/grub.cfg</code>文件进行相应的配置，有了Grub Customizer更为方便。</p><h3 id="shadowsocks-QT5-科学上网"><a href="#shadowsocks-QT5-科学上网" class="headerlink" title="shadowsocks-QT5 科学上网"></a>shadowsocks-QT5 科学上网</h3><p><a href="https://github.com/shadowsocks/shadowsocks-qt5">shdowsocks-QT5</a></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">sudo<span class="hljs-built_in"> add-apt-repository </span>ppa:hzwhuang/ss-qt5<br>sudo apt-get update<br>sudo apt-get install shadowsocks-qt5<br></code></pre></td></tr></table></figure><p><code>注意</code>: 注意如果代理类型是SOCKS5，请在系统设置的HTTP代理一栏留空。若代理类型是HTTP(S)，请在SOCKS5代理一栏留空</p><h3 id="wine-qq和搜狗输入法"><a href="#wine-qq和搜狗输入法" class="headerlink" title="wine-qq和搜狗输入法"></a>wine-qq和搜狗输入法</h3><blockquote><p>使用<a href="http://www.ubuntukylin.com/application/">优麒麟</a>提供的deb安装包安装，没有太大困难。</p></blockquote><hr>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Linux</tag>
      
      <tag>Gnome3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NPV问题和科学学习地址</title>
    <link href="/posts/40055/"/>
    <url>/posts/40055/</url>
    
    <content type="html"><![CDATA[<p>因为需要访问<code>GNU Radio</code>，需要科学学习，很自然的想到在Ubuntu16.04里使用NPV。<br>遇到的问题是NPV无法正常启动服务，<del>至今仍未解决</del>,<strong>该问题已经解决</strong>。</p><span id="more"></span><hr><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote><p>问题主要是在Ubuntu16.04系统中使用NPV无法启动服务，syslog如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">Jul 23 21:45:06 tyler-QTJ5 NetworkManager[2597]: &lt;error&gt; [1469281506.9518] platform-linux: do-change-link[9]: failure changing link: failure 19 (没有那个设备)<br>Jul 23 21:45:06 tyler-QTJ5 NetworkManager[2597]: &lt;warn&gt;  [1469281506.9518] device (ppp0): failed to <span class="hljs-built_in">disable</span> userspace IPv6LL address handling<br>Jul 23 21:45:06 tyler-QTJ5 gnome-session[3306]: Gjs-Message: JS LOG: Removing a network device that was not added<br>Jul 23 21:45:06 tyler-QTJ5 NetworkManager[2597]: &lt;info&gt;  [1469281506.9549] devices removed (path: /sys/devices/virtual/net/ppp0, iface: ppp0)<br>Jul 23 21:45:06 tyler-QTJ5 NetworkManager[2597]: ** Message: nm-pptp-ppp-plugin: (nm_phasechange): status 1 / phase <span class="hljs-string">&#x27;dead&#x27;</span><br>Jul 23 21:45:06 tyler-QTJ5 NetworkManager[2597]: ** Message: nm-pptp-ppp-plugin: (nm_exit_notify): cleaning up<br>Jul 23 21:45:06 tyler-QTJ5 pptp[5371]: nm-pptp-service-5359 warn[decaps_hdlc:pptp_gre.c:220]: short <span class="hljs-built_in">read</span> (-1): Input/output error<br>Jul 23 21:45:06 tyler-QTJ5 pptp[5371]: nm-pptp-service-5359 warn[decaps_hdlc:pptp_gre.c:232]: pppd may have shutdown, see pppd <span class="hljs-built_in">log</span><br>Jul 23 21:45:06 tyler-QTJ5 pptp[5386]: nm-pptp-service-5359 <span class="hljs-built_in">log</span>[callmgr_main:pptp_callmgr.c:245]: Closing connection (unhandled)<br>Jul 23 21:45:06 tyler-QTJ5 pptp[5386]: nm-pptp-service-5359 <span class="hljs-built_in">log</span>[ctrlp_rep:pptp_ctrl.c:259]: Sent control packet <span class="hljs-built_in">type</span> is 12 <span class="hljs-string">&#x27;Call-Clear-Request&#x27;</span><br>Jul 23 21:45:06 tyler-QTJ5 pppd[5366]: Exit.<br>Jul 23 21:45:06 tyler-QTJ5 pptp[5386]: nm-pptp-service-5359 <span class="hljs-built_in">log</span>[call_callback:pptp_callmgr.c:84]: Closing connection (call state)<br></code></pre></td></tr></table></figure><blockquote><p>和自己的网络状况以及NPV的设置有关</p></blockquote><hr><h3 id="NPV选择"><a href="#NPV选择" class="headerlink" title="NPV选择"></a>NPV选择</h3><ol><li><strong>lantteerrnn</strong>: <a href="https://github.com/getlantern/forum/issues/833">https://github.com/getlantern/forum/issues/833</a>  <strong>每月800M免费流量，WIN10旧版本无限流量</strong></li><li><strong>天行NPV</strong></li></ol><hr><h3 id="科学学习-google镜像"><a href="#科学学习-google镜像" class="headerlink" title="科学学习-google镜像"></a>科学学习-google镜像</h3><ol><li><strong>快搜</strong>: <a href="http://so.chongbuluo.com/">http://so.chongbuluo.com/</a>   &#x2F;&#x2F; 比较推荐</li><li><strong>谷歌镜像大全</strong>: <a href="http://google.adwiki.cn/">http://google.adwiki.cn/</a></li></ol><hr><p><code>以下为转载：</code></p><blockquote></blockquote><p> 原版页面：</p><p><a href="https://go.coolnull.com/">https://go.coolnull.com/</a> （无广告，搜索体验良好）</p><p><a href="http://google.suanfazu.com/">http://google.suanfazu.com/</a> （整合搜索，非原版，相对稳定）</p><p><a href="https://g.jikewenku.cn/">https://g.jikewenku.cn/</a> （无广告，搜索体验良好）</p><p><a href="https://g.chenjx.cn/">https://g.chenjx.cn/</a> （无广告，体验良好</p><p><a href="https://g.namaho.com/">https://g.namaho.com/</a> （无广告，搜索体验良好）</p><p><a href="https://g.starmoe.xyz/">https://g.starmoe.xyz/</a> （无广告，搜索体验良好）</p><p><a href="https://g.linuxeye.com/">https://g.linuxeye.com</a> （无广告，搜索体验良好）</p><p><a href="https://g.inspire-energy.com.cn/">https://g.inspire-energy.com.cn/</a> （无广告，搜索体验良好）</p><p><a href="https://www.ytso.cc/">https://www.ytso.cc/</a> （无广告，搜索体验良好）</p><p><a href="https://soguge.ga/">https://soguge.ga</a> （无广告，搜索体验良好）</p><p><a href="https://ggg.eeload.com/">https://ggg.eeload.com/</a> （无广告，体验良好）</p><p><a href="https://letsgg.tk/">https://letsgg.tk/</a> （无广告，体验良好）</p><p><a href="https://google.kfd.me/">https://google.kfd.me/</a> （先访问主站，然后点击google）</p><p><a href="https://www.guge.xxx/">https://www.guge.xxx/</a> （无广告，体验良好）</p><p><a href="http://ljy2345.esy.es/">http://ljy2345.esy.es/</a> （无广告，搜索体验良好）</p><p><a href="http://gg.aiorai.com/">http://gg.aiorai.com/</a> （无广告，搜索体验良好）</p><p><a href="http://ggso.gq/">http://ggso.gq/</a> （无广告，搜索体验良好）</p><p><a href="http://gg.qwghq.com/">http://gg.qwghq.com/</a> （无广告，体验良好）</p><p><a href="http://bc60042.byethost13.com/">http://bc60042.byethost13.com/</a> （无广告，体验良好）</p><p><a href="http://gc.ihuan.me/">http://gc.ihuan.me/</a>  （无广告，体验良好）</p><p><a href="http://www.nginxgoogle.com/">http://www.nginxgoogle.com/</a> （无广告，体验良好）</p><p><a href="https://julianhuang.cc/">https://julianhuang.cc/</a> （无广告，体验良好）</p><p><a href="http://baidusb.tk/">http://baidusb.tk/</a> （无广告，体验良好）</p><p><a href="http://45.78.38.197/">http://45.78.38.197/</a> （无广告，体验良好）</p><p><a href="https://ggso.co/">https://ggso.co/</a> （无广告，体验良好）</p><p><a href="http://glgoo.jsylhs.com/">http://glgoo.jsylhs.com/</a> （有广告，体验一般）</p><p><a href="https://g.hancel.net/">https://g.hancel.net/</a> （无广告，体验良好）</p><p><a href="https://g.v2fr.ml/">https://g.v2fr.ml</a> （无广告，搜索体验良好）</p><p><a href="http://scholar.hntvchina.com/">http://scholar.hntvchina.com/</a> （无广告，体验良好）</p><p><a href="http://lujinjie.win/">http://lujinjie.win/</a> （无广告，体验良好）</p><p><a href="http://so.biochen.com/">http://so.biochen.com/</a> （无广告，体验良好）</p><p><a href="http://gg.huwaige.com/">http://gg.huwaige.com/</a> （有弹窗广告，体验不是很好）</p><p><a href="http://guge.ro.lt/">http://guge.ro.lt/</a> （有弹窗广告，体验不是很好）</p><p><a href="http://free.8090st.com/">http://free.8090st.com/</a> （有弹窗广告，体验不是很好）</p><p><a href="https://fq.yanke.info/">https://fq.yanke.info</a> （无广告，搜索体验良好）</p><p><a href="https://g.glv.io/">https://g.glv.io/</a> （无广告，搜索体验良好）</p><p><a href="http://www.jumper.site/">http://www.jumper.site/</a> （无广告，体验良好）</p><p><a href="http://3.zzq2.com/">http://3.zzq2.com/</a> （无广告，体验良好）</p><p><a href="https://ggso.me/">https://ggso.me/</a> （无广告，体验良好）</p><p><a href="http://fuckbaidu.bid/">http://fuckbaidu.bid</a>  （已被污染，建议访问对应ip地址：<a href="http://198.12.101.102/%EF%BC%89">http://198.12.101.102/）</a></p><p><a href="http://forkgil.com/">http://forkgil.com/</a> （无广告，体验良好）</p><p><a href="https://aigg.info/">https://aigg.info</a> （无广告，体验良好）</p><p><a href="https://g.wxbit.com/">https://g.wxbit.com/</a> （无广告，搜索体验良好）</p><p><a href="http://g.fity.cn/">http://g.fity.cn/</a> （无广告，体验良好）</p><p><a href="https://ykooh.com/">https://ykooh.com/</a> （无广告，搜索体验良好）</p><p><a href="https://www.onk6.com/">https://www.onk6.com</a> （无广告，体验良好）</p><blockquote><p>谷歌学术</p></blockquote><p><a href="https://xueshu.glgoo.org/">https://xueshu.glgoo.org/</a> </p><p><a href="http://gg.qwghq.com/scholar/">http://gg.qwghq.com/scholar/</a></p><p><a href="http://xueshu.51google.pw/">http://xueshu.51google.pw/</a></p><p><a href="https://ggso.co/scholar">https://ggso.co/scholar</a></p><p><a href="https://www.scholar.live/">https://www.scholar.live/</a> </p><p><a href="https://g.glv.io/extdomains/scholar.google.com/">https://g.glv.io/extdomains/scholar.google.com/</a></p><blockquote><p>变种网页：</p></blockquote><p><a href="http://www.gfsousou.cn/">http://www.gfsousou.cn/</a> （谷粉搜搜）</p><p><a href="http://www.51google.pw/">http://www.51google.pw/</a> （无广告，搜索体验良好）</p><p><a href="https://www.dcrss.com/">https://www.dcrss.com/</a> （google学术和网页）</p><p><a href="http://www.ibying.com/">http://www.ibying.com/</a> （无广告，搜索体验良好）</p><p><a href="http://www.ssdao.com/">http://www.ssdao.com/</a> （无广告，搜索体验良好）</p><p><a href="https://gfsoso.8090st.com/">https://gfsoso.8090st.com/</a> （无广告，搜索体验良好）</p><p><a href="http://lige.aclstack.com/">http://lige.aclstack.com/</a> （无广告，体验良好）</p><p><a href="http://g.sjswdh.com/">http://g.sjswdh.com/</a> （无广告，体验良好）</p><p><a href="http://search.twcc.com/">http://search.twcc.com/</a>  （无广告，体验良好）</p><p><a href="http://wangye.wallpai.com/">http://wangye.wallpai.com/</a> （无广告，体验良好）</p><p><a href="https://www.tlss.space/">https://www.tlss.space/</a> （无广告，体验良好）</p><p><a href="http://google.aiorai.com/">http://google.aiorai.com/</a> （有广告，体验一般）</p><p><a href="http://mob.wallpai.com/">http://mob.wallpai.com/</a> （有广告，体验还行）</p><p><a href="http://www.gfss.cc/">http://www.gfss.cc/</a> （有广告，体验还行）</p><p><a href="https://www.googto.com/">https://www.googto.com/</a> （<a href="https://www.googto.net)/">https://www.googto.net）</a></p><p><a href="http://fcczp3.huwaige.com/">http://fcczp3.huwaige.com/</a> （有广告，体验一般）</p><p><a href="http://www.gfsswy.com/">http://www.gfsswy.com/</a> （无广告，体验良好）</p><p><a href="http://www.gycc.com/">http://www.gycc.com/</a> （无广告，体验良好）</p><p><a href="http://fcczp6.huwaige.com/">http://fcczp6.huwaige.com/</a> （有广告，体验一般） </p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>VPN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客搭建过程和工具总结</title>
    <link href="/posts/17629/"/>
    <url>/posts/17629/</url>
    
    <content type="html"><![CDATA[<p>长期记录，很多东西都是边学边做，要培养自己规范记录的习惯。</p><p>还不怎么熟悉图床和图链的使用，暂时就用文字叙述，主要还是给自己看。</p><span id="more"></span><h2 id="2021-5-18-更新"><a href="#2021-5-18-更新" class="headerlink" title="2021.5.18 更新"></a>2021.5.18 更新</h2><ul><li>主题更换为<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a></li></ul><h2 id="2018-3-8更新"><a href="#2018-3-8更新" class="headerlink" title="2018.3.8更新"></a>2018.3.8更新</h2><ul><li>加入了插件<a href="https://github.com/rozbo/hexo-abbrlink/">hexo-abbrlink</a> 目前文章ID为随机数，解决了gitment laber不够短的问题</li></ul><hr><h2 id="2018-3-7更新"><a href="#2018-3-7更新" class="headerlink" title="2018.3.7更新"></a>2018.3.7更新</h2><ul><li>修改了gitment生成ID的方式，参考<a href="http://xichen.pub/2018/01/31/2018-01-31-gitment/">添加Gitment评论系统踩过的坑</a></li><li>增加了插件hexo-admin，踩坑，删除nodejs插件目录后重装恢复，增加了hexo编辑文档的方式<br>  cnpm install</li></ul><hr><h2 id="2018-1-23更新"><a href="#2018-1-23更新" class="headerlink" title="2018.1.23更新"></a>2018.1.23更新</h2><ul><li>用python写了gitment自动初始化工具</li></ul><hr><h2 id="2018-1-22更新"><a href="#2018-1-22更新" class="headerlink" title="2018.1.22更新"></a>2018.1.22更新</h2><ul><li>加入了<a href="https://github.com/imsun/gitment/">gitment</a>评论，修改了gitment的css样式，匹配了我的blog</li><li>在留言板中也加入了gitment</li></ul><hr><h2 id="2018-1-17更新"><a href="#2018-1-17更新" class="headerlink" title="2018.1.17更新"></a>2018.1.17更新</h2><ul><li>新建了一个wordpress小站<a href="https://ykk.000webhostapp.com/">我的文字小站</a>，托管在三蛋空间</li><li>之前换了友言评论，差强人意，有时间换成gitment</li><li>修改主站，增加了跳转链接<a href="http://ykksmile.top/writing">http://ykksmile.top/writing</a>,并修改了博客左边栏适配</li><li>考虑要不要自己新开一个主题，原作者不更新了，我还有足够的精力吗？</li></ul><hr><h2 id="博客搭建过程"><a href="#博客搭建过程" class="headerlink" title="博客搭建过程"></a>博客搭建过程</h2><ul><li>博客搭建主要是依赖[Hexo][0.1]，这是一个<code>快速、简洁且高效的博客框架</code>，支持的主题十分丰富。</li><li>搭建环境是Ubuntu 16.04，因为之前做毕设课题是<code>SDN</code>和<code>物联网</code>，硬件驱动都是在Linux中编译；后面研究方向又是集中在<code>GNU Radio</code>上，所以早早的就进了Linux这个大坑。</li><li>在Linux里遇到炒鸡多的问题，就连装个QQ也折腾了好久，好多东西比如<code>Ubuntu中文站</code>都是后来才知道的。后面会再开一贴记录Linux折腾的过程，之前的大多不记得了，就从今往后吧。<br>[0.1]: <a href="https://hexo.io/zh-cn/index.html">https://hexo.io/zh-cn/index.html</a> “Hexo中文主页”</li></ul><hr><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><p>做静态主页必然是要从<a href="https://github.com/" title="Github主页">Github</a>入手：</p><ul><li>注册账号，建立repository，使用Github提供的Github Pages。</li><li>部署Hexo，需要前置程序：<ul><li>Node.js</li><li>Git</li></ul></li><li>安装和建站（省去folder）：<br> npm install -g hexo-cli<br> hexo init<br> npm install</li><li>学习使用git命令，下载主题仓库<br>     git clone URL</li><li>基础命令<br> hexo new [layout] <title><br> hexo clean<br> hexo g<br> hexo s</li><li>主题修改过后使用部署插件<br> npm install hexo-deployer-git –save<br> hexo deploy</li><li>这里Github部署使用SSH，需要在官网匹配一个公钥，注意branch的填写<blockquote><p>初始地址：<a href="http://cloisonne.github.io/">http://cloisonne.github.io/</a> (cloisonne为我的ID)</p></blockquote></li></ul><hr><h3 id="补充-关于nodejs的安装"><a href="#补充-关于nodejs的安装" class="headerlink" title="补充-关于nodejs的安装"></a>补充-关于nodejs的安装</h3><p>官网直接下载完整包 <a href="https://nodejs.org/en/">Node.js</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> node-v-linux-x64/bin<br>ls<br>./node -v<br></code></pre></td></tr></table></figure><p>设置全局：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ln -s /home/node-v-linux-x64/bin/node /usr/<span class="hljs-built_in">local</span>/bin/node<br>ln -s /home/node-v-linux-x64/bin/npm /usr/<span class="hljs-built_in">local</span>/bin/npm<br></code></pre></td></tr></table></figure><p>后面安装的hexo目录位于nodejs&#x2F;bin 也需要设置全局</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ln -s /opt/node-v4.4.7-linux-x64/bin/hexo /usr/<span class="hljs-built_in">local</span>/bin/hexo<br></code></pre></td></tr></table></figure><hr><h3 id="补充-Windows下nodejs的问题"><a href="#补充-Windows下nodejs的问题" class="headerlink" title="补充-Windows下nodejs的问题"></a>补充-Windows下nodejs的问题</h3><p>国内npm被墙 采用淘宝镜像<a href="https://npm.taobao.org/">cnpm</a></p><pre><code class="hljs">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><h3 id="补充-关于私钥公钥的生成"><a href="#补充-关于私钥公钥的生成" class="headerlink" title="补充-关于私钥公钥的生成"></a>补充-关于私钥公钥的生成</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;cloisonne&quot;</span><br>$ git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;tylerluan@163.com&quot;</span><br>$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;tylerluan@163.com&quot;</span><br></code></pre></td></tr></table></figure><p>生成两个文件id_rsa和id_rsa.pub 公钥位于<code>id_rsa.pub</code></p><h3 id="Next主题"><a href="#Next主题" class="headerlink" title="Next主题"></a>Next主题</h3><p>一开始是使用的<a href="http://theme-next.iissnan.com/" title="干净整洁的主题">Next主题</a>，这个主题的好处在于有很强大的说明文档。<br>利用自带的<code>_config.yml</code>可以完成基础的定制，也借助它我熟悉了Hexo的主要框架和一个blog的主要结构。</p><blockquote><p>在Next中首先遇到的问题在于如何修改底部标签，事实上如果了解Hexo主题的开发过程，这一问题就很好解决。<br>自己摸索找到了<code>theme/layout/_partial</code>这里放着关于布局的JavaScript文件。</p></blockquote><p>包括学习Markdown，并且发表第一篇post，过程一直很顺利，后面<a href="http://duoshuo.com/" title="多说评论系统主页">多说</a>在手机适配端出现了问题，恰逢毕业季，很久都未解决，迫不得已放弃。</p><h3 id="Yelee主题"><a href="#Yelee主题" class="headerlink" title="Yelee主题"></a>Yelee主题</h3><p>后来看上了<a href="https://github.com/litten/hexo-theme-yilia" title="Yilia主题">Yilia</a>主题，主题特点是简单，注重对内容的突出。但是简单就意味着缺少了很多功能，比如搜索等等，<a href="https://github.com/MOxFIVE/hexo-theme-yelee" title="Yelee主题">Yelee</a>正是在Yilia基础上更改的主题，增加了很多可用的功能。</p><blockquote><p>本主题基于主题 Hexo-Theme-Yilia 修改而来，在此再次感谢原作者 Litten。修复了一些 bugs，改变了大量的样式，添加了不少特性。对原主题百般折腾后，发觉变动越来越大，索性就发布个新主题了，主题随我微博名 “夜Yelee” 。个人喜欢简洁的样式，重视内容的浏览，同时希望作为个人网站的博客，能稍微凸显出博主个性。各种修改折腾大抵基于以上考虑。</p></blockquote><p>这里附上Yelee主题使用说明，基本配置大致都有了：<a href="http://moxfive.coding.me/yelee/" title="Yelee主题使用说明">Yelee主题使用说明</a></p><ul><li>关于修改左边栏上方的<strong>Overlay</strong>配色，这一段代码写在<code>yelee/source/js/main.js</code></li><li>关于如何解决Hexo置顶问题：<a href="http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/" title="解决Hexo置顶问题">解决Hexo置顶问题 </a></li><li>多说样式的修改：<a href="http://moxfive.xyz/2015/09/29/duoshuo-style/" title="对多说评论的改造">多说样式折腾记录 — 添加 UA 浏览器标识、旋转头像等 </a></li></ul><h3 id="各种插件"><a href="#各种插件" class="headerlink" title="各种插件"></a>各种插件</h3><p>Hexo的各种插件，包括sitemap、rss、git部署等等：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-generator-index --save<br>npm install hexo-generator-archive --save<br>npm install hexo-generator-category --save<br>npm install hexo-generator-tag --save<br>npm install hexo-server --save<br>npm install hexo-deployer-git --save<br>npm install hexo-deployer-heroku --save<br>npm install hexo-deployer-rsync --save<br>npm install hexo-deployer-openshift --save<br>npm install hexo-renderer-marked@0.2 --save<br>npm install hexo-renderer-stylus@0.2 --save<br>npm install hexo-generator-feed@1 --save<br>npm install hexo-generator-sitemap@1 --save<br>npm install hexo-generator-baidu-sitemap --save<br><br></code></pre></td></tr></table></figure><p><strong>置顶插件</strong></p><pre><code class="hljs">    $ npm uninstall hexo-generator-index --save$ npm install hexo-generator-index-pin-top --save</code></pre><p>第三方插件，主要有：</p><p> <del>- 多说评论</del></p><ul><li>百度统计</li><li>不蒜子统计</li><li>sitemap</li><li>RSS</li></ul><h3 id="coding部署"><a href="#coding部署" class="headerlink" title="coding部署"></a>coding部署</h3><p>因为百度屏蔽了Github的抓取，为了让百度能够正常抓取，这里借鉴了知乎<br><a href="http://www.zhihu.com/question/30898326/" title="如何解决百度爬虫无法爬取搭建在Github上的个人博客的问题">如何解决百度爬虫无法爬取搭建在Github上的个人博客的问题</a><br>完成了Github和国内Coding的共同部署，并通过DNS实现了国内访问Coding，国外访问Github。</p><p>附上Deploy的配置（Github的branch <code>master</code>可以省略）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">deploy:<br>- type: git<br>  repo: https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/cloisonne/</span>cloisonne.github.io<br>- type: git<br>  repo: https:<span class="hljs-regexp">//gi</span>t.coding.net<span class="hljs-regexp">/cloisonne/</span>cloisonne.git<br>  branch: coding-pages<br></code></pre></td></tr></table></figure><p><del>登录方式依然是SSH，SSH隔段时间就要重新输入密码，最近还在寻找更好的方式。</del></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">deploy:<br>- type: git<br>  repo: git@github<span class="hljs-selector-class">.com</span>:cloisonne/cloisonne<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.git</span><br>- type: git<br>  repo: git@git<span class="hljs-selector-class">.coding</span><span class="hljs-selector-class">.net</span>:cloisonne/cloisonne<span class="hljs-selector-class">.git</span><br>  branch: coding-pages<br></code></pre></td></tr></table></figure><p>已解决每次需要输入密码的问题。</p><h3 id="域名和DNS"><a href="#域名和DNS" class="headerlink" title="域名和DNS"></a>域名和DNS</h3><p>因为主要是以学习为主，这里使用了免费的<a href="http://www.dot.tk/zh/index.html?lang=zh/" title="注册Dot TK域名">tk域名</a>，注册了<del><a href="http://smileykk.tk/">http://smileykk.tk</a></del>　已换成<a href="http://ykksmile.top/">http://ykksmile.top</a></p><blockquote><p>注意tk域名目前免费最大时长为12小时，建议一次注册选择最大时长，注册时间选错了可以注销重新申请。</p></blockquote><p>DNS使用了流行的<a href="https://www.dnspod.cn/" title="好用的DNS工具">DNSPod</a>,具体过程比较简单，参考了<a href="http://bblove.me/2015/11/25/how-to-solve-the-problem-that-github-blocks-the-baidu-spider/" title="参考的DNS方案">解决 Github Pages 禁止百度爬虫的方法</a></p><ul><li>将域名解析到DNSPod提供的地址</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">f1g1ns1<span class="hljs-selector-class">.dnspod</span><span class="hljs-selector-class">.net</span><br>f1g1ns2<span class="hljs-selector-class">.dnspod</span>.net<br></code></pre></td></tr></table></figure><ul><li>修改DNSPod解析记录</li><li>添加Github的CNAME文件,添加Coding自定义域名</li></ul><h3 id="TiddlyWiki"><a href="#TiddlyWiki" class="headerlink" title="TiddlyWiki"></a>TiddlyWiki</h3><p>TiddlyWiki是一个轻量级的静态的个人wiki工具，具体使用方法参考TigglyWiki的官方文档：</p><p>在Hexo中的应用：</p><blockquote><p>放在theme&#x2F;source&#x2F;wiki&#x2F;index.html 即可通过<code>http://URL/wiki/</code>访问</p></blockquote><p>TiddlyWiki的Markdown插件安装：</p><blockquote><p>To add the plugin to your own TiddlyWiki5, just drag this link to the browser window:</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$:<span class="hljs-regexp">/plugins/</span>tiddlywiki/markdown<br></code></pre></td></tr></table></figure><h2 id="工具链接"><a href="#工具链接" class="headerlink" title="工具链接"></a>工具链接</h2><h3 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h3><ol><li><strong>My blog</strong>: <a href="http://smileykk.tk/">http://smileykk.tk</a> &#x2F; <a href="http://cloisonne.github.io/">http://cloisonne.github.io</a> &#x2F; <a href="http://cloisonne.coding.me/cloisonne">http://cloisonne.coding.me/cloisonne</a></li><li><strong>GitHub</strong>: <a href="https://github.com/cloisonne">https://github.com/cloisonne</a></li><li><strong>Coding</strong>: <a href="https://coding.net/">https://coding.net/</a></li><li><strong>Hexo</strong>: <a href="https://hexo.io/zh-cn">https://hexo.io/zh-cn</a></li><li><strong>Node.js</strong>: <a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li><li><strong>Next主题</strong>: <a href="http://theme-next.iissnan.com/">http://theme-next.iissnan.com</a></li><li><strong>Yelee主题</strong>: <a href="http://moxfive.coding.me/yelee">http://moxfive.coding.me/yelee</a></li><li><strong>favicon制作</strong>: <a href="http://www.atool.org/ico.php">http://www.atool.org/ico.php</a></li><li><strong>淘宝npm镜像</strong>： <a href="https://npm.taobao.org/">https://npm.taobao.org/</a></li></ol><h3 id="网站维护"><a href="#网站维护" class="headerlink" title="网站维护"></a>网站维护</h3><ol><li><del>多说评论系统: <a href="http://duoshuo.com/">http://duoshuo.com/</a></del></li><li><strong>DNSPod</strong>: <a href="https://www.dnspod.cn/">https://www.dnspod.cn</a></li><li><strong>TK域名注册</strong>: <a href="http://www.dot.tk/zh/index.html?lang=zh">http://www.dot.tk/zh/index.html?lang=zh</a></li><li><strong>域名管理freenom</strong>: <a href="https://my.freenom.com/clientarea.php">https://my.freenom.com/clientarea.php</a></li><li><strong>站长工具大全</strong>: <a href="http://tool.lusongsong.com/">http://tool.lusongsong.com/</a></li></ol><h3 id="相关学习"><a href="#相关学习" class="headerlink" title="相关学习"></a>相关学习</h3><ol><li><strong>小书匠Markdown编辑器</strong>: <a href="http://markdown.xiaoshujiang.com/">http://markdown.xiaoshujiang.com/</a></li><li><strong>简书</strong>: <a href="http://www.jianshu.com/">http://www.jianshu.com</a></li><li><strong>TiddlyWiki</strong>: <a href="http://tiddlywiki.com/">http://tiddlywiki.com/</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
      <tag>Hexo</tag>
      
      <tag>Tools</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我为什么要建这样一个blog</title>
    <link href="/posts/41162/"/>
    <url>/posts/41162/</url>
    
    <content type="html"><![CDATA[<h2 id="intro">前言</h2>一切从零开始。<span id="more"></span><h3 id="扯一些淡"><a href="#扯一些淡" class="headerlink" title="扯一些淡"></a>扯一些淡</h3><p>第一次写<a href="http://www.jianshu.com/p/1e402922ee32">Markdown</a>，好吧，直观感受是如果用英文写更好一点，因为加一个链接需要这样：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">[markdow<span class="hljs-symbol">n](http://www.jianshu.com/p/1</span>e<span class="hljs-number">402922</span>ee<span class="hljs-number">32</span>)<br></code></pre></td></tr></table></figure><p>上面放上了<a href="http://www.jianshu.com/">简书</a>的Markdown入门教程，语法还是边学边用，来的快一些。</p><p>对我来说最大的问题其实并不是Markdown，因为还要注意学习Hexo内建的Tag Plugin，例如下面要手动加入一个阅读全文，like this way:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&lt;!-- more --&gt;<br></code></pre></td></tr></table></figure><h3 id="为什么要搭建这样一个blog"><a href="#为什么要搭建这样一个blog" class="headerlink" title="为什么要搭建这样一个blog"></a>为什么要搭建这样一个blog</h3><p>差不多一个月前，在做毕业设计的时候，涉及到SDN的技术，这方面国内能参考的就一个<a href="www.sdnlab.com">SDNLab</a>，在里面看到一篇很有意思的文章，called <a href="http://www.sdnlab.com/16666.html">我是一个SDN交换机</a>，写的声情并茂啊有木有，忍不住quote一段:</p><blockquote><p>我按照工作手册的知道，将自己切换到了StandAlone模式，再也不需要主管控制。我自己也学过二层自学习转发算法，和阿楚同桌的时候学的，我可以用二层转发算法继续工作。</p></blockquote><p>作者的名字就不提了，这里放上作者的<a href="http://www.muzixing.com/pages/about-me.html">简历</a>供你们膜拜。</p><hr><p>刚刚打扫卫生了，这里果断加个粗体，<strong>打扫卫生啊喂！</strong> 都快毕业了，领导还不辞辛苦地来检查卫生。</p><hr><p>因为看到了他的博客，然后自己正好在SDN上有些问题，给这位师兄发邮件问了下，虽然没什么帮助，但是我也想有一个技术博客可以在找工作的时候装逼啊！ <strong>装逼啊！</strong></p><h3 id="这个博客是怎么搭建的"><a href="#这个博客是怎么搭建的" class="headerlink" title="这个博客是怎么搭建的"></a>这个博客是怎么搭建的</h3><p>之后会写一篇文记录自己搭建的过程，这里面最大的困难在于整个过程都是在Ubuntu16.04上完成的，使用linux的过程，简直就是，qoute</p><blockquote><p> 面向搜索引擎的学习过程</p></blockquote><p>因为之前做毕设，课题是物联网，需要使用linux来完成物联网网关的部分，我使用了Ubuntu12.04，现学现卖，从对与<code>cp</code> <code>rm</code> 这样的命令一窍不通到看懂底层的linux驱动，以及各种修改OpenWrt和编译，学习进度简直要起飞了。<strong>然而</strong>，当我接触到Ubuntu16.04的时候，尤其面对的是从未用过的gnome图形界面，现实又给我上了一课，这个后面具体再说吧。</p><p>言归正传，这个博客是基于Hexo，使用了Next的主题，修改主要是基于EZLippi的博客。托管在了github上，主要是HTML5和javascript编写，自己做一些定制或者基于third-party的插件，其中改了一些代码，也是从零开始，现学现卖。<br>网站的搭建还涉及到一些例如域名管理、百度站长之类的事情，也是自己摸索着做了一部分，后续还需要做很多。</p><h3 id="我要写什么-写给谁看？"><a href="#我要写什么-写给谁看？" class="headerlink" title="我要写什么 写给谁看？"></a>我要写什么 写给谁看？</h3><blockquote><p>当然不是写给你看的</p><footer><strong>尼古拉斯赵四</strong></footer></blockquote><p>虽然我也会写一些随笔在这里，但是这个博客注定是为技术而生。<br>我会把我的学习过程，以及我做过的东西都记录下来，例如毕业设计做的<code>SDN</code>和<code>物联网</code>等等<br>所以这个博客的作用主要是给自己看的，for myself。很久不写东西了，怀念参加全国作文大赛的日子，几年时间，如果真的让我写些什么我或许也写不出了吧。<br>也许以后时间多的话，会在lofter写一些东西，简短的随笔也会放在这里。</p><p>我的目标并不是程序猿，也不是什么技术大牛，只是上研了，被逼无奈要做一些东西，例如现在的LTE底层仿真，有这样一个自己的小天地，聊胜于无吧。</p><p>下面的回复里表情这么多这么可爱，你好意思不给我回复一下吗？ </p><img style="display: block;" src="/resources/dogdog.gif" title="dog">]]></content>
    
    
    <categories>
      
      <category>Essays</category>
      
    </categories>
    
    
    <tags>
      
      <tag>扯淡</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
